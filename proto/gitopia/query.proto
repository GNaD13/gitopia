syntax = "proto3";
package gitopia.gitopia.gitopia;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "gitopia/comment.proto";
import "gitopia/issue.proto";
import "gitopia/repository.proto";
import "gitopia/user.proto";
import "gitopia/whois.proto";

option go_package = "github.com/gitopia/gitopia/x/gitopia/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2
	rpc Comment(QueryGetCommentRequest) returns (QueryGetCommentResponse) {
		option (google.api.http).get = "/gitopia/gitopia/gitopia/comment/{id}";
	}
	rpc CommentAll(QueryAllCommentRequest) returns (QueryAllCommentResponse) {
		option (google.api.http).get = "/gitopia/gitopia/gitopia/comment";
	}

	rpc Issue(QueryGetIssueRequest) returns (QueryGetIssueResponse) {
		option (google.api.http).get = "/gitopia/gitopia/gitopia/issue/{id}";
	}
	rpc IssueAll(QueryAllIssueRequest) returns (QueryAllIssueResponse) {
		option (google.api.http).get = "/gitopia/gitopia/gitopia/issue";
	}

	rpc Repository(QueryGetRepositoryRequest) returns (QueryGetRepositoryResponse) {
		option (google.api.http).get = "/gitopia/gitopia/gitopia/repository/{id}";
	}
	rpc RepositoryAll(QueryAllRepositoryRequest) returns (QueryAllRepositoryResponse) {
		option (google.api.http).get = "/gitopia/gitopia/gitopia/repository";
	}

	rpc User(QueryGetUserRequest) returns (QueryGetUserResponse) {
		option (google.api.http).get = "/gitopia/gitopia/gitopia/user/{id}";
	}
	rpc UserAll(QueryAllUserRequest) returns (QueryAllUserResponse) {
		option (google.api.http).get = "/gitopia/gitopia/gitopia/user";
	}

	rpc Whois(QueryGetWhoisRequest) returns (QueryGetWhoisResponse) {
		option (google.api.http).get = "/gitopia/gitopia/gitopia/whois/{name}";
	}
	rpc WhoisAll(QueryAllWhoisRequest) returns (QueryAllWhoisResponse) {
		option (google.api.http).get = "/gitopia/gitopia/gitopia/whois";
	}

}

// this line is used by starport scaffolding # 3
message QueryGetCommentRequest {
	uint64 id = 1;
}

message QueryGetCommentResponse {
	Comment Comment = 1;
}

message QueryAllCommentRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCommentResponse {
	repeated Comment Comment = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetIssueRequest {
	uint64 id = 1;
}

message QueryGetIssueResponse {
	Issue Issue = 1;
}

message QueryAllIssueRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllIssueResponse {
	repeated Issue Issue = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetRepositoryRequest {
	uint64 id = 1;
}

message QueryGetRepositoryResponse {
	Repository Repository = 1;
}

message QueryAllRepositoryRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllRepositoryResponse {
	repeated Repository Repository = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetUserRequest {
	uint64 id = 1;
}

message QueryGetUserResponse {
	User User = 1;
}

message QueryAllUserRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllUserResponse {
	repeated User User = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetWhoisRequest {
	string name = 1;
}

message QueryGetWhoisResponse {
	Whois Whois = 1;
}

message QueryAllWhoisRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllWhoisResponse {
	repeated Whois Whois = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
