// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rewards/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RewardPool struct {
	TotalAmount   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=total_amount,json=totalAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_amount" yaml:"total_amount"`
	ClaimedAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=claimed_amount,json=claimedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"claimed_amount" yaml:"claimed_amount"`
	Expiry        time.Time                                `protobuf:"bytes,3,opt,name=expiry,proto3,stdtime" json:"expiry" yaml:"expiry"`
}

func (m *RewardPool) Reset()         { *m = RewardPool{} }
func (m *RewardPool) String() string { return proto.CompactTextString(m) }
func (*RewardPool) ProtoMessage()    {}
func (*RewardPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4f6e2be212d3b23, []int{0}
}
func (m *RewardPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardPool.Merge(m, src)
}
func (m *RewardPool) XXX_Size() int {
	return m.Size()
}
func (m *RewardPool) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardPool.DiscardUnknown(m)
}

var xxx_messageInfo_RewardPool proto.InternalMessageInfo

func (m *RewardPool) GetTotalAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalAmount
	}
	return nil
}

func (m *RewardPool) GetClaimedAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ClaimedAmount
	}
	return nil
}

func (m *RewardPool) GetExpiry() time.Time {
	if m != nil {
		return m.Expiry
	}
	return time.Time{}
}

type RewardSeries struct {
	SeriesOne   *RewardPool `protobuf:"bytes,1,opt,name=series_one,json=seriesOne,proto3" json:"series_one,omitempty" yaml:"series_one"`
	SeriesTwo   *RewardPool `protobuf:"bytes,2,opt,name=series_two,json=seriesTwo,proto3" json:"series_two,omitempty" yaml:"series_two"`
	SeriesThree *RewardPool `protobuf:"bytes,3,opt,name=series_three,json=seriesThree,proto3" json:"series_three,omitempty" yaml:"series_three"`
	SeriesFour  *RewardPool `protobuf:"bytes,4,opt,name=series_four,json=seriesFour,proto3" json:"series_four,omitempty" yaml:"series_four"`
	SeriesFive  *RewardPool `protobuf:"bytes,5,opt,name=series_five,json=seriesFive,proto3" json:"series_five,omitempty" yaml:"series_five"`
	SeriesSix   *RewardPool `protobuf:"bytes,6,opt,name=series_six,json=seriesSix,proto3" json:"series_six,omitempty" yaml:"series_six"`
	SeriesSeven *RewardPool `protobuf:"bytes,7,opt,name=series_seven,json=seriesSeven,proto3" json:"series_seven,omitempty" yaml:"series_seven"`
}

func (m *RewardSeries) Reset()         { *m = RewardSeries{} }
func (m *RewardSeries) String() string { return proto.CompactTextString(m) }
func (*RewardSeries) ProtoMessage()    {}
func (*RewardSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4f6e2be212d3b23, []int{1}
}
func (m *RewardSeries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardSeries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardSeries.Merge(m, src)
}
func (m *RewardSeries) XXX_Size() int {
	return m.Size()
}
func (m *RewardSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardSeries.DiscardUnknown(m)
}

var xxx_messageInfo_RewardSeries proto.InternalMessageInfo

func (m *RewardSeries) GetSeriesOne() *RewardPool {
	if m != nil {
		return m.SeriesOne
	}
	return nil
}

func (m *RewardSeries) GetSeriesTwo() *RewardPool {
	if m != nil {
		return m.SeriesTwo
	}
	return nil
}

func (m *RewardSeries) GetSeriesThree() *RewardPool {
	if m != nil {
		return m.SeriesThree
	}
	return nil
}

func (m *RewardSeries) GetSeriesFour() *RewardPool {
	if m != nil {
		return m.SeriesFour
	}
	return nil
}

func (m *RewardSeries) GetSeriesFive() *RewardPool {
	if m != nil {
		return m.SeriesFive
	}
	return nil
}

func (m *RewardSeries) GetSeriesSix() *RewardPool {
	if m != nil {
		return m.SeriesSix
	}
	return nil
}

func (m *RewardSeries) GetSeriesSeven() *RewardPool {
	if m != nil {
		return m.SeriesSeven
	}
	return nil
}

// Params defines the parameters for the module.
type Params struct {
	EvaluatorAddress string        `protobuf:"bytes,1,opt,name=evaluator_address,json=evaluatorAddress,proto3" json:"evaluator_address,omitempty" yaml:"evaluator_address"`
	RewardSeries     *RewardSeries `protobuf:"bytes,2,opt,name=reward_series,json=rewardSeries,proto3" json:"reward_series,omitempty" yaml:"reward_series"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4f6e2be212d3b23, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEvaluatorAddress() string {
	if m != nil {
		return m.EvaluatorAddress
	}
	return ""
}

func (m *Params) GetRewardSeries() *RewardSeries {
	if m != nil {
		return m.RewardSeries
	}
	return nil
}

func init() {
	proto.RegisterType((*RewardPool)(nil), "gitopia.gitopia.rewards.RewardPool")
	proto.RegisterType((*RewardSeries)(nil), "gitopia.gitopia.rewards.RewardSeries")
	proto.RegisterType((*Params)(nil), "gitopia.gitopia.rewards.Params")
}

func init() { proto.RegisterFile("rewards/params.proto", fileDescriptor_d4f6e2be212d3b23) }

var fileDescriptor_d4f6e2be212d3b23 = []byte{
	// 603 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xc1, 0x6e, 0xd3, 0x3e,
	0x1c, 0xc7, 0x9b, 0xed, 0xbf, 0xfe, 0x35, 0xb7, 0x43, 0x2c, 0x6c, 0x2c, 0x9b, 0x50, 0x32, 0x05,
	0x21, 0x4d, 0x48, 0x38, 0xda, 0xb8, 0x71, 0x5b, 0x41, 0xa0, 0x1d, 0x10, 0x53, 0xb6, 0x0b, 0x08,
	0x29, 0x72, 0x1b, 0x2f, 0xb3, 0x48, 0xe2, 0xc8, 0x76, 0xd2, 0xee, 0x01, 0x38, 0x71, 0xd9, 0x0b,
	0xf0, 0x02, 0xbc, 0x01, 0x6f, 0xb0, 0xe3, 0x8e, 0x9c, 0x32, 0xd4, 0x3e, 0x01, 0x7d, 0x02, 0x54,
	0xdb, 0x69, 0x53, 0x24, 0xb4, 0xa1, 0x9e, 0x1c, 0x27, 0xbf, 0xdf, 0xe7, 0xfb, 0xd5, 0x37, 0x3f,
	0x1b, 0x6c, 0x30, 0xdc, 0x47, 0x2c, 0xe4, 0x5e, 0x86, 0x18, 0x4a, 0x38, 0xcc, 0x18, 0x15, 0xd4,
	0xdc, 0x8a, 0x88, 0xa0, 0x19, 0x41, 0xb0, 0x5a, 0x75, 0xd5, 0xce, 0x46, 0x44, 0x23, 0x2a, 0x6b,
	0xbc, 0xc9, 0x93, 0x2a, 0xdf, 0xb1, 0x7b, 0x94, 0x27, 0x94, 0x7b, 0x5d, 0xc4, 0xb1, 0x57, 0xec,
	0x77, 0xb1, 0x40, 0xfb, 0x5e, 0x8f, 0x92, 0x54, 0x7f, 0x77, 0x22, 0x4a, 0xa3, 0x18, 0x7b, 0x72,
	0xd7, 0xcd, 0xcf, 0x3c, 0x41, 0x12, 0xcc, 0x05, 0x4a, 0x32, 0x55, 0xe0, 0xfe, 0x5a, 0x02, 0xc0,
	0x97, 0x12, 0xc7, 0x94, 0xc6, 0xe6, 0x67, 0x03, 0xb4, 0x05, 0x15, 0x28, 0x0e, 0x50, 0x42, 0xf3,
	0x54, 0x58, 0xc6, 0xee, 0xf2, 0x5e, 0xeb, 0x60, 0x1b, 0x2a, 0x1d, 0x38, 0xd1, 0x81, 0x5a, 0x07,
	0xbe, 0xa4, 0x24, 0xed, 0xbc, 0xb9, 0x2a, 0x9d, 0xc6, 0xb8, 0x74, 0x1e, 0x5c, 0xa0, 0x24, 0x7e,
	0xe1, 0xd6, 0x9b, 0xdd, 0x6f, 0x37, 0xce, 0x5e, 0x44, 0xc4, 0x79, 0xde, 0x85, 0x3d, 0x9a, 0x78,
	0xda, 0xab, 0x5a, 0x9e, 0xf1, 0xf0, 0x93, 0x27, 0x2e, 0x32, 0xcc, 0x25, 0x87, 0xfb, 0x2d, 0xd9,
	0x7a, 0x28, 0x3b, 0xcd, 0x2f, 0x06, 0xb8, 0xd7, 0x8b, 0x11, 0x49, 0x70, 0x58, 0x39, 0x59, 0xba,
	0xcd, 0xc9, 0x91, 0x76, 0xb2, 0xa9, 0x9c, 0xcc, 0xb7, 0xff, 0x9b, 0x97, 0x35, 0xdd, 0xac, 0xdd,
	0xbc, 0x05, 0x4d, 0x3c, 0xc8, 0x08, 0xbb, 0xb0, 0x96, 0x77, 0x8d, 0xbd, 0xd6, 0xc1, 0x0e, 0x54,
	0xb1, 0xc2, 0x2a, 0x56, 0x78, 0x5a, 0xc5, 0xda, 0xd9, 0xd6, 0x2e, 0xd6, 0x94, 0x0b, 0xd5, 0xe7,
	0x5e, 0xde, 0x38, 0x86, 0xaf, 0x21, 0xee, 0xd7, 0x15, 0xd0, 0x56, 0x99, 0x9f, 0x60, 0x46, 0x30,
	0x37, 0xdf, 0x03, 0xc0, 0xe5, 0x53, 0x40, 0x53, 0x6c, 0x19, 0x52, 0xe3, 0x31, 0xfc, 0xcb, 0x24,
	0xc0, 0xd9, 0xef, 0xea, 0x6c, 0x8e, 0x4b, 0x67, 0x5d, 0x09, 0xcd, 0x00, 0xae, 0xbf, 0xaa, 0x36,
	0xef, 0x52, 0x5c, 0x43, 0x8b, 0x3e, 0xb5, 0x96, 0x16, 0x41, 0x8b, 0x3e, 0x9d, 0xa2, 0x4f, 0xfb,
	0xd4, 0x0c, 0x40, 0xbb, 0xfa, 0x72, 0xce, 0x30, 0xd6, 0xd9, 0xdc, 0x09, 0xbe, 0x35, 0x1b, 0x98,
	0x3a, 0xc2, 0xf5, 0x5b, 0x1a, 0x3f, 0xd9, 0x99, 0x1f, 0x81, 0xde, 0x06, 0x67, 0x34, 0x67, 0xd6,
	0x7f, 0x77, 0xe7, 0x3f, 0x1c, 0x97, 0x8e, 0x39, 0xc7, 0x9f, 0x10, 0x5c, 0x5f, 0x67, 0xf1, 0x9a,
	0xe6, 0xac, 0x4e, 0x27, 0x05, 0xb6, 0x56, 0x16, 0xa2, 0x93, 0x02, 0xcf, 0xe8, 0xa4, 0xa8, 0xe7,
	0xce, 0xc9, 0xc0, 0x6a, 0x2e, 0x92, 0x3b, 0x27, 0x83, 0x69, 0xee, 0x27, 0x64, 0x50, 0xcb, 0x9d,
	0xe3, 0x02, 0xa7, 0xd6, 0xff, 0x8b, 0xe4, 0x2e, 0x11, 0xd3, 0xdc, 0x4f, 0xe4, 0xee, 0xbb, 0x01,
	0x9a, 0xc7, 0xf2, 0x52, 0x32, 0x8f, 0xc0, 0x3a, 0x2e, 0x50, 0x9c, 0x23, 0x41, 0x59, 0x80, 0xc2,
	0x90, 0x61, 0xce, 0xe5, 0x80, 0xae, 0x76, 0x1e, 0x8d, 0x4b, 0xc7, 0xd2, 0x43, 0xfe, 0x67, 0x89,
	0xeb, 0xdf, 0x9f, 0xbe, 0x3b, 0x54, 0xaf, 0xcc, 0x10, 0xac, 0x29, 0x47, 0x81, 0xd2, 0xd2, 0xc3,
	0xf8, 0xe4, 0x16, 0xdf, 0xea, 0x88, 0x74, 0xac, 0x71, 0xe9, 0x6c, 0x28, 0xb5, 0x39, 0x8a, 0xeb,
	0xb7, 0x59, 0xbd, 0xee, 0xd5, 0xd5, 0xd0, 0x36, 0xae, 0x87, 0xb6, 0xf1, 0x73, 0x68, 0x1b, 0x97,
	0x23, 0xbb, 0x71, 0x3d, 0xb2, 0x1b, 0x3f, 0x46, 0x76, 0xe3, 0xc3, 0xd3, 0xda, 0xe9, 0xd7, 0x52,
	0xd3, 0x75, 0xe0, 0x55, 0x97, 0xb1, 0xbc, 0x05, 0xba, 0x4d, 0x79, 0xb0, 0x9f, 0xff, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0xe0, 0x83, 0xe8, 0xda, 0xa4, 0x05, 0x00, 0x00,
}

func (m *RewardPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Expiry, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiry):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintParams(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if len(m.ClaimedAmount) > 0 {
		for iNdEx := len(m.ClaimedAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimedAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TotalAmount) > 0 {
		for iNdEx := len(m.TotalAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RewardSeries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardSeries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardSeries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeriesSeven != nil {
		{
			size, err := m.SeriesSeven.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.SeriesSix != nil {
		{
			size, err := m.SeriesSix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SeriesFive != nil {
		{
			size, err := m.SeriesFive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SeriesFour != nil {
		{
			size, err := m.SeriesFour.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SeriesThree != nil {
		{
			size, err := m.SeriesThree.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SeriesTwo != nil {
		{
			size, err := m.SeriesTwo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SeriesOne != nil {
		{
			size, err := m.SeriesOne.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardSeries != nil {
		{
			size, err := m.RewardSeries.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EvaluatorAddress) > 0 {
		i -= len(m.EvaluatorAddress)
		copy(dAtA[i:], m.EvaluatorAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.EvaluatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TotalAmount) > 0 {
		for _, e := range m.TotalAmount {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.ClaimedAmount) > 0 {
		for _, e := range m.ClaimedAmount {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiry)
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *RewardSeries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeriesOne != nil {
		l = m.SeriesOne.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.SeriesTwo != nil {
		l = m.SeriesTwo.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.SeriesThree != nil {
		l = m.SeriesThree.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.SeriesFour != nil {
		l = m.SeriesFour.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.SeriesFive != nil {
		l = m.SeriesFive.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.SeriesSix != nil {
		l = m.SeriesSix.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.SeriesSeven != nil {
		l = m.SeriesSeven.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EvaluatorAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.RewardSeries != nil {
		l = m.RewardSeries.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalAmount = append(m.TotalAmount, types.Coin{})
			if err := m.TotalAmount[len(m.TotalAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedAmount = append(m.ClaimedAmount, types.Coin{})
			if err := m.ClaimedAmount[len(m.ClaimedAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Expiry, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardSeries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardSeries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardSeries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesOne", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeriesOne == nil {
				m.SeriesOne = &RewardPool{}
			}
			if err := m.SeriesOne.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesTwo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeriesTwo == nil {
				m.SeriesTwo = &RewardPool{}
			}
			if err := m.SeriesTwo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesThree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeriesThree == nil {
				m.SeriesThree = &RewardPool{}
			}
			if err := m.SeriesThree.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesFour", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeriesFour == nil {
				m.SeriesFour = &RewardPool{}
			}
			if err := m.SeriesFour.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesFive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeriesFive == nil {
				m.SeriesFive = &RewardPool{}
			}
			if err := m.SeriesFive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesSix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeriesSix == nil {
				m.SeriesSix = &RewardPool{}
			}
			if err := m.SeriesSix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesSeven", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeriesSeven == nil {
				m.SeriesSeven = &RewardPool{}
			}
			if err := m.SeriesSeven.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvaluatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardSeries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardSeries == nil {
				m.RewardSeries = &RewardSeries{}
			}
			if err := m.RewardSeries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
