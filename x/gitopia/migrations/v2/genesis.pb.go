// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.20.0
// source: gitopia/genesis.proto

package types

import (
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GenesisState defines the gitopia module's genesis state.
type GenesisState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRepositoryKeyList []*BaseRepositoryKey `protobuf:"bytes,26,rep,name=baseRepositoryKeyList,proto3" json:"baseRepositoryKeyList,omitempty"`
	UserDaoList           []*UserDao           `protobuf:"bytes,25,rep,name=userDaoList,proto3" json:"userDaoList,omitempty"`
	TaskList              []*Task              `protobuf:"bytes,17,rep,name=taskList,proto3" json:"taskList,omitempty"`
	TaskCount             uint64               `protobuf:"varint,18,opt,name=taskCount,proto3" json:"taskCount,omitempty"`
	BranchList            []*Branch            `protobuf:"bytes,19,rep,name=branchList,proto3" json:"branchList,omitempty"`
	BranchCount           uint64               `protobuf:"varint,20,opt,name=branchCount,proto3" json:"branchCount,omitempty"`
	TagList               []*Tag               `protobuf:"bytes,21,rep,name=tagList,proto3" json:"tagList,omitempty"`
	TagCount              uint64               `protobuf:"varint,22,opt,name=tagCount,proto3" json:"tagCount,omitempty"`
	MemberList            []*Member            `protobuf:"bytes,23,rep,name=memberList,proto3" json:"memberList,omitempty"`
	MemberCount           uint64               `protobuf:"varint,24,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	// this line is used by starport scaffolding # genesis/proto/state
	ReleaseList      []*Release     `protobuf:"bytes,15,rep,name=releaseList,proto3" json:"releaseList,omitempty"`
	ReleaseCount     uint64         `protobuf:"varint,16,opt,name=releaseCount,proto3" json:"releaseCount,omitempty"`
	PullRequestList  []*PullRequest `protobuf:"bytes,13,rep,name=pullRequestList,proto3" json:"pullRequestList,omitempty"`
	PullRequestCount uint64         `protobuf:"varint,14,opt,name=pullRequestCount,proto3" json:"pullRequestCount,omitempty"`
	DaoList          []*Dao         `protobuf:"bytes,11,rep,name=daoList,proto3" json:"daoList,omitempty"`
	DaoCount         uint64         `protobuf:"varint,12,opt,name=daoCount,proto3" json:"daoCount,omitempty"`
	CommentList      []*Comment     `protobuf:"bytes,9,rep,name=commentList,proto3" json:"commentList,omitempty"`
	CommentCount     uint64         `protobuf:"varint,10,opt,name=commentCount,proto3" json:"commentCount,omitempty"`
	IssueList        []*Issue       `protobuf:"bytes,7,rep,name=issueList,proto3" json:"issueList,omitempty"`
	IssueCount       uint64         `protobuf:"varint,8,opt,name=issueCount,proto3" json:"issueCount,omitempty"`
	RepositoryList   []*Repository  `protobuf:"bytes,5,rep,name=repositoryList,proto3" json:"repositoryList,omitempty"`
	RepositoryCount  uint64         `protobuf:"varint,6,opt,name=repositoryCount,proto3" json:"repositoryCount,omitempty"`
	UserList         []*User        `protobuf:"bytes,3,rep,name=userList,proto3" json:"userList,omitempty"`
	UserCount        uint64         `protobuf:"varint,4,opt,name=userCount,proto3" json:"userCount,omitempty"`
	WhoisList        []*Whois       `protobuf:"bytes,1,rep,name=whoisList,proto3" json:"whoisList,omitempty"`
	WhoisCount       uint64         `protobuf:"varint,2,opt,name=whoisCount,proto3" json:"whoisCount,omitempty"` // this line is used by starport scaffolding # ibc/genesis/proto
}

func (x *GenesisState) Reset() {
	*x = GenesisState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_genesis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisState) ProtoMessage() {}

func (x *GenesisState) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_genesis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisState.ProtoReflect.Descriptor instead.
func (*GenesisState) Descriptor() ([]byte, []int) {
	return file_gitopia_genesis_proto_rawDescGZIP(), []int{0}
}

func (x *GenesisState) GetBaseRepositoryKeyList() []*BaseRepositoryKey {
	if x != nil {
		return x.BaseRepositoryKeyList
	}
	return nil
}

func (x *GenesisState) GetUserDaoList() []*UserDao {
	if x != nil {
		return x.UserDaoList
	}
	return nil
}

func (x *GenesisState) GetTaskList() []*Task {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *GenesisState) GetTaskCount() uint64 {
	if x != nil {
		return x.TaskCount
	}
	return 0
}

func (x *GenesisState) GetBranchList() []*Branch {
	if x != nil {
		return x.BranchList
	}
	return nil
}

func (x *GenesisState) GetBranchCount() uint64 {
	if x != nil {
		return x.BranchCount
	}
	return 0
}

func (x *GenesisState) GetTagList() []*Tag {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *GenesisState) GetTagCount() uint64 {
	if x != nil {
		return x.TagCount
	}
	return 0
}

func (x *GenesisState) GetMemberList() []*Member {
	if x != nil {
		return x.MemberList
	}
	return nil
}

func (x *GenesisState) GetMemberCount() uint64 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *GenesisState) GetReleaseList() []*Release {
	if x != nil {
		return x.ReleaseList
	}
	return nil
}

func (x *GenesisState) GetReleaseCount() uint64 {
	if x != nil {
		return x.ReleaseCount
	}
	return 0
}

func (x *GenesisState) GetPullRequestList() []*PullRequest {
	if x != nil {
		return x.PullRequestList
	}
	return nil
}

func (x *GenesisState) GetPullRequestCount() uint64 {
	if x != nil {
		return x.PullRequestCount
	}
	return 0
}

func (x *GenesisState) GetDaoList() []*Dao {
	if x != nil {
		return x.DaoList
	}
	return nil
}

func (x *GenesisState) GetDaoCount() uint64 {
	if x != nil {
		return x.DaoCount
	}
	return 0
}

func (x *GenesisState) GetCommentList() []*Comment {
	if x != nil {
		return x.CommentList
	}
	return nil
}

func (x *GenesisState) GetCommentCount() uint64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *GenesisState) GetIssueList() []*Issue {
	if x != nil {
		return x.IssueList
	}
	return nil
}

func (x *GenesisState) GetIssueCount() uint64 {
	if x != nil {
		return x.IssueCount
	}
	return 0
}

func (x *GenesisState) GetRepositoryList() []*Repository {
	if x != nil {
		return x.RepositoryList
	}
	return nil
}

func (x *GenesisState) GetRepositoryCount() uint64 {
	if x != nil {
		return x.RepositoryCount
	}
	return 0
}

func (x *GenesisState) GetUserList() []*User {
	if x != nil {
		return x.UserList
	}
	return nil
}

func (x *GenesisState) GetUserCount() uint64 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *GenesisState) GetWhoisList() []*Whois {
	if x != nil {
		return x.WhoisList
	}
	return nil
}

func (x *GenesisState) GetWhoisCount() uint64 {
	if x != nil {
		return x.WhoisCount
	}
	return 0
}

var File_gitopia_genesis_proto protoreflect.FileDescriptor

var file_gitopia_genesis_proto_rawDesc = []byte{
	0x0a, 0x15, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x76, 0x32, 0x1a, 0x12, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x70, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x64, 0x61, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2f, 0x77, 0x68, 0x6f, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd1, 0x0b, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x69, 0x0a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x15, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x6f, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4b, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x57, 0x0a, 0x0f, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0f, 0x70, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x64, 0x61, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x6f, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07,
	0x64, 0x61, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x0e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x09, 0x77, 0x68, 0x6f, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x68,
	0x6f, 0x69, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x09, 0x77, 0x68, 0x6f, 0x69, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x68, 0x6f, 0x69, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x77, 0x68, 0x6f, 0x69, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2f, 0x78, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x32, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitopia_genesis_proto_rawDescOnce sync.Once
	file_gitopia_genesis_proto_rawDescData = file_gitopia_genesis_proto_rawDesc
)

func file_gitopia_genesis_proto_rawDescGZIP() []byte {
	file_gitopia_genesis_proto_rawDescOnce.Do(func() {
		file_gitopia_genesis_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitopia_genesis_proto_rawDescData)
	})
	return file_gitopia_genesis_proto_rawDescData
}

var file_gitopia_genesis_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gitopia_genesis_proto_goTypes = []interface{}{
	(*GenesisState)(nil),      // 0: gitopia.gitopia.gitopia.v2.GenesisState
	(*BaseRepositoryKey)(nil), // 1: gitopia.gitopia.gitopia.v2.BaseRepositoryKey
	(*UserDao)(nil),           // 2: gitopia.gitopia.gitopia.v2.UserDao
	(*Task)(nil),              // 3: gitopia.gitopia.gitopia.v2.Task
	(*Branch)(nil),            // 4: gitopia.gitopia.gitopia.v2.Branch
	(*Tag)(nil),               // 5: gitopia.gitopia.gitopia.v2.Tag
	(*Member)(nil),            // 6: gitopia.gitopia.gitopia.v2.Member
	(*Release)(nil),           // 7: gitopia.gitopia.gitopia.v2.Release
	(*PullRequest)(nil),       // 8: gitopia.gitopia.gitopia.v2.PullRequest
	(*Dao)(nil),               // 9: gitopia.gitopia.gitopia.v2.Dao
	(*Comment)(nil),           // 10: gitopia.gitopia.gitopia.v2.Comment
	(*Issue)(nil),             // 11: gitopia.gitopia.gitopia.v2.Issue
	(*Repository)(nil),        // 12: gitopia.gitopia.gitopia.v2.Repository
	(*User)(nil),              // 13: gitopia.gitopia.gitopia.v2.User
	(*Whois)(nil),             // 14: gitopia.gitopia.gitopia.v2.Whois
}
var file_gitopia_genesis_proto_depIdxs = []int32{
	1,  // 0: gitopia.gitopia.gitopia.v2.GenesisState.baseRepositoryKeyList:type_name -> gitopia.gitopia.gitopia.v2.BaseRepositoryKey
	2,  // 1: gitopia.gitopia.gitopia.v2.GenesisState.userDaoList:type_name -> gitopia.gitopia.gitopia.v2.UserDao
	3,  // 2: gitopia.gitopia.gitopia.v2.GenesisState.taskList:type_name -> gitopia.gitopia.gitopia.v2.Task
	4,  // 3: gitopia.gitopia.gitopia.v2.GenesisState.branchList:type_name -> gitopia.gitopia.gitopia.v2.Branch
	5,  // 4: gitopia.gitopia.gitopia.v2.GenesisState.tagList:type_name -> gitopia.gitopia.gitopia.v2.Tag
	6,  // 5: gitopia.gitopia.gitopia.v2.GenesisState.memberList:type_name -> gitopia.gitopia.gitopia.v2.Member
	7,  // 6: gitopia.gitopia.gitopia.v2.GenesisState.releaseList:type_name -> gitopia.gitopia.gitopia.v2.Release
	8,  // 7: gitopia.gitopia.gitopia.v2.GenesisState.pullRequestList:type_name -> gitopia.gitopia.gitopia.v2.PullRequest
	9,  // 8: gitopia.gitopia.gitopia.v2.GenesisState.daoList:type_name -> gitopia.gitopia.gitopia.v2.Dao
	10, // 9: gitopia.gitopia.gitopia.v2.GenesisState.commentList:type_name -> gitopia.gitopia.gitopia.v2.Comment
	11, // 10: gitopia.gitopia.gitopia.v2.GenesisState.issueList:type_name -> gitopia.gitopia.gitopia.v2.Issue
	12, // 11: gitopia.gitopia.gitopia.v2.GenesisState.repositoryList:type_name -> gitopia.gitopia.gitopia.v2.Repository
	13, // 12: gitopia.gitopia.gitopia.v2.GenesisState.userList:type_name -> gitopia.gitopia.gitopia.v2.User
	14, // 13: gitopia.gitopia.gitopia.v2.GenesisState.whoisList:type_name -> gitopia.gitopia.gitopia.v2.Whois
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_gitopia_genesis_proto_init() }
func file_gitopia_genesis_proto_init() {
	if File_gitopia_genesis_proto != nil {
		return
	}
	file_gitopia_task_proto_init()
	file_gitopia_branch_proto_init()
	file_gitopia_tag_proto_init()
	file_gitopia_member_proto_init()
	file_gitopia_release_proto_init()
	file_gitopia_pullRequest_proto_init()
	file_gitopia_dao_proto_init()
	file_gitopia_comment_proto_init()
	file_gitopia_issue_proto_init()
	file_gitopia_repository_proto_init()
	file_gitopia_user_proto_init()
	file_gitopia_whois_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gitopia_genesis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitopia_genesis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitopia_genesis_proto_goTypes,
		DependencyIndexes: file_gitopia_genesis_proto_depIdxs,
		MessageInfos:      file_gitopia_genesis_proto_msgTypes,
	}.Build()
	File_gitopia_genesis_proto = out.File
	file_gitopia_genesis_proto_rawDesc = nil
	file_gitopia_genesis_proto_goTypes = nil
	file_gitopia_genesis_proto_depIdxs = nil
}
