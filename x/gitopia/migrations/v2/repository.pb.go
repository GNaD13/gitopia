// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.20.0
// source: gitopia/repository.proto

package types

import (
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RepositoryCollaborator_Permission int32

const (
	RepositoryCollaborator_READ     RepositoryCollaborator_Permission = 0
	RepositoryCollaborator_TRIAGE   RepositoryCollaborator_Permission = 1
	RepositoryCollaborator_WRITE    RepositoryCollaborator_Permission = 2
	RepositoryCollaborator_MAINTAIN RepositoryCollaborator_Permission = 3
	RepositoryCollaborator_ADMIN    RepositoryCollaborator_Permission = 4
)

// Enum value maps for RepositoryCollaborator_Permission.
var (
	RepositoryCollaborator_Permission_name = map[int32]string{
		0: "READ",
		1: "TRIAGE",
		2: "WRITE",
		3: "MAINTAIN",
		4: "ADMIN",
	}
	RepositoryCollaborator_Permission_value = map[string]int32{
		"READ":     0,
		"TRIAGE":   1,
		"WRITE":    2,
		"MAINTAIN": 3,
		"ADMIN":    4,
	}
)

func (x RepositoryCollaborator_Permission) Enum() *RepositoryCollaborator_Permission {
	p := new(RepositoryCollaborator_Permission)
	*p = x
	return p
}

func (x RepositoryCollaborator_Permission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepositoryCollaborator_Permission) Descriptor() protoreflect.EnumDescriptor {
	return file_gitopia_repository_proto_enumTypes[0].Descriptor()
}

func (RepositoryCollaborator_Permission) Type() protoreflect.EnumType {
	return &file_gitopia_repository_proto_enumTypes[0]
}

func (x RepositoryCollaborator_Permission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepositoryCollaborator_Permission.Descriptor instead.
func (RepositoryCollaborator_Permission) EnumDescriptor() ([]byte, []int) {
	return file_gitopia_repository_proto_rawDescGZIP(), []int{6, 0}
}

type RepositoryBackup_Store int32

const (
	RepositoryBackup_IPFS    RepositoryBackup_Store = 0
	RepositoryBackup_ARWEAVE RepositoryBackup_Store = 1
)

// Enum value maps for RepositoryBackup_Store.
var (
	RepositoryBackup_Store_name = map[int32]string{
		0: "IPFS",
		1: "ARWEAVE",
	}
	RepositoryBackup_Store_value = map[string]int32{
		"IPFS":    0,
		"ARWEAVE": 1,
	}
)

func (x RepositoryBackup_Store) Enum() *RepositoryBackup_Store {
	p := new(RepositoryBackup_Store)
	*p = x
	return p
}

func (x RepositoryBackup_Store) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepositoryBackup_Store) Descriptor() protoreflect.EnumDescriptor {
	return file_gitopia_repository_proto_enumTypes[1].Descriptor()
}

func (RepositoryBackup_Store) Type() protoreflect.EnumType {
	return &file_gitopia_repository_proto_enumTypes[1]
}

func (x RepositoryBackup_Store) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepositoryBackup_Store.Descriptor instead.
func (RepositoryBackup_Store) EnumDescriptor() ([]byte, []int) {
	return file_gitopia_repository_proto_rawDescGZIP(), []int{10, 0}
}

type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator             string                    `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                  uint64                    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Owner               *RepositoryOwner          `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Description         string                    `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Forks               []uint64                  `protobuf:"varint,6,rep,packed,name=forks,proto3" json:"forks,omitempty"`
	Subscribers         string                    `protobuf:"bytes,7,opt,name=subscribers,proto3" json:"subscribers,omitempty"`
	Commits             string                    `protobuf:"bytes,8,opt,name=commits,proto3" json:"commits,omitempty"`
	Issues              []*RepositoryIssue        `protobuf:"bytes,9,rep,name=issues,proto3" json:"issues,omitempty"`
	PullRequests        []*RepositoryPullRequest  `protobuf:"bytes,10,rep,name=pullRequests,proto3" json:"pullRequests,omitempty"`
	IssuesCount         uint64                    `protobuf:"varint,11,opt,name=issuesCount,proto3" json:"issuesCount,omitempty"`
	PullsCount          uint64                    `protobuf:"varint,12,opt,name=pullsCount,proto3" json:"pullsCount,omitempty"`
	Labels              []*RepositoryLabel        `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty"`
	LabelsCount         uint64                    `protobuf:"varint,14,opt,name=labelsCount,proto3" json:"labelsCount,omitempty"`
	Releases            []*RepositoryRelease      `protobuf:"bytes,15,rep,name=releases,proto3" json:"releases,omitempty"`
	CreatedAt           int64                     `protobuf:"varint,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt           int64                     `protobuf:"varint,17,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	PushedAt            int64                     `protobuf:"varint,18,opt,name=pushedAt,proto3" json:"pushedAt,omitempty"`
	Stargazers          []uint64                  `protobuf:"varint,19,rep,packed,name=stargazers,proto3" json:"stargazers,omitempty"`
	Archived            bool                      `protobuf:"varint,20,opt,name=archived,proto3" json:"archived,omitempty"`
	License             string                    `protobuf:"bytes,21,opt,name=license,proto3" json:"license,omitempty"`
	DefaultBranch       string                    `protobuf:"bytes,22,opt,name=defaultBranch,proto3" json:"defaultBranch,omitempty"`
	Parent              uint64                    `protobuf:"varint,23,opt,name=parent,proto3" json:"parent,omitempty"`
	Fork                bool                      `protobuf:"varint,24,opt,name=fork,proto3" json:"fork,omitempty"`
	Collaborators       []*RepositoryCollaborator `protobuf:"bytes,25,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
	AllowForking        bool                      `protobuf:"varint,26,opt,name=allowForking,proto3" json:"allowForking,omitempty"`
	Backups             []*RepositoryBackup       `protobuf:"bytes,27,rep,name=backups,proto3" json:"backups,omitempty"`
	EnableArweaveBackup bool                      `protobuf:"varint,28,opt,name=enableArweaveBackup,proto3" json:"enableArweaveBackup,omitempty"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_repository_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_repository_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_gitopia_repository_proto_rawDescGZIP(), []int{0}
}

func (x *Repository) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Repository) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repository) GetOwner() *RepositoryOwner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Repository) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Repository) GetForks() []uint64 {
	if x != nil {
		return x.Forks
	}
	return nil
}

func (x *Repository) GetSubscribers() string {
	if x != nil {
		return x.Subscribers
	}
	return ""
}

func (x *Repository) GetCommits() string {
	if x != nil {
		return x.Commits
	}
	return ""
}

func (x *Repository) GetIssues() []*RepositoryIssue {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *Repository) GetPullRequests() []*RepositoryPullRequest {
	if x != nil {
		return x.PullRequests
	}
	return nil
}

func (x *Repository) GetIssuesCount() uint64 {
	if x != nil {
		return x.IssuesCount
	}
	return 0
}

func (x *Repository) GetPullsCount() uint64 {
	if x != nil {
		return x.PullsCount
	}
	return 0
}

func (x *Repository) GetLabels() []*RepositoryLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Repository) GetLabelsCount() uint64 {
	if x != nil {
		return x.LabelsCount
	}
	return 0
}

func (x *Repository) GetReleases() []*RepositoryRelease {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *Repository) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Repository) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Repository) GetPushedAt() int64 {
	if x != nil {
		return x.PushedAt
	}
	return 0
}

func (x *Repository) GetStargazers() []uint64 {
	if x != nil {
		return x.Stargazers
	}
	return nil
}

func (x *Repository) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *Repository) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *Repository) GetDefaultBranch() string {
	if x != nil {
		return x.DefaultBranch
	}
	return ""
}

func (x *Repository) GetParent() uint64 {
	if x != nil {
		return x.Parent
	}
	return 0
}

func (x *Repository) GetFork() bool {
	if x != nil {
		return x.Fork
	}
	return false
}

func (x *Repository) GetCollaborators() []*RepositoryCollaborator {
	if x != nil {
		return x.Collaborators
	}
	return nil
}

func (x *Repository) GetAllowForking() bool {
	if x != nil {
		return x.AllowForking
	}
	return false
}

func (x *Repository) GetBackups() []*RepositoryBackup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *Repository) GetEnableArweaveBackup() bool {
	if x != nil {
		return x.EnableArweaveBackup
	}
	return false
}

type RepositoryId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RepositoryId) Reset() {
	*x = RepositoryId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_repository_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryId) ProtoMessage() {}

func (x *RepositoryId) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_repository_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryId.ProtoReflect.Descriptor instead.
func (*RepositoryId) Descriptor() ([]byte, []int) {
	return file_gitopia_repository_proto_rawDescGZIP(), []int{1}
}

func (x *RepositoryId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RepositoryId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BaseRepositoryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BaseRepositoryKey) Reset() {
	*x = BaseRepositoryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_repository_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseRepositoryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseRepositoryKey) ProtoMessage() {}

func (x *BaseRepositoryKey) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_repository_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseRepositoryKey.ProtoReflect.Descriptor instead.
func (*BaseRepositoryKey) Descriptor() ([]byte, []int) {
	return file_gitopia_repository_proto_rawDescGZIP(), []int{2}
}

func (x *BaseRepositoryKey) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseRepositoryKey) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BaseRepositoryKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RepositoryOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type OwnerType `protobuf:"varint,2,opt,name=type,proto3,enum=gitopia.gitopia.gitopia.v2.OwnerType" json:"type,omitempty"`
}

func (x *RepositoryOwner) Reset() {
	*x = RepositoryOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_repository_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryOwner) ProtoMessage() {}

func (x *RepositoryOwner) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_repository_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryOwner.ProtoReflect.Descriptor instead.
func (*RepositoryOwner) Descriptor() ([]byte, []int) {
	return file_gitopia_repository_proto_rawDescGZIP(), []int{3}
}

func (x *RepositoryOwner) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RepositoryOwner) GetType() OwnerType {
	if x != nil {
		return x.Type
	}
	return OwnerType_USER
}

type RepositoryIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iid uint64 `protobuf:"varint,1,opt,name=iid,proto3" json:"iid,omitempty"`
	Id  uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RepositoryIssue) Reset() {
	*x = RepositoryIssue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_repository_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryIssue) ProtoMessage() {}

func (x *RepositoryIssue) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_repository_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryIssue.ProtoReflect.Descriptor instead.
func (*RepositoryIssue) Descriptor() ([]byte, []int) {
	return file_gitopia_repository_proto_rawDescGZIP(), []int{4}
}

func (x *RepositoryIssue) GetIid() uint64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *RepositoryIssue) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RepositoryPullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iid uint64 `protobuf:"varint,1,opt,name=iid,proto3" json:"iid,omitempty"`
	Id  uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RepositoryPullRequest) Reset() {
	*x = RepositoryPullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_repository_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryPullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryPullRequest) ProtoMessage() {}

func (x *RepositoryPullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_repository_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryPullRequest.ProtoReflect.Descriptor instead.
func (*RepositoryPullRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_repository_proto_rawDescGZIP(), []int{5}
}

func (x *RepositoryPullRequest) GetIid() uint64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *RepositoryPullRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RepositoryCollaborator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Permission RepositoryCollaborator_Permission `protobuf:"varint,2,opt,name=permission,proto3,enum=gitopia.gitopia.gitopia.v2.RepositoryCollaborator_Permission" json:"permission,omitempty"`
}

func (x *RepositoryCollaborator) Reset() {
	*x = RepositoryCollaborator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_repository_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryCollaborator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryCollaborator) ProtoMessage() {}

func (x *RepositoryCollaborator) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_repository_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryCollaborator.ProtoReflect.Descriptor instead.
func (*RepositoryCollaborator) Descriptor() ([]byte, []int) {
	return file_gitopia_repository_proto_rawDescGZIP(), []int{6}
}

func (x *RepositoryCollaborator) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RepositoryCollaborator) GetPermission() RepositoryCollaborator_Permission {
	if x != nil {
		return x.Permission
	}
	return RepositoryCollaborator_READ
}

type RepositoryLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Color       string `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *RepositoryLabel) Reset() {
	*x = RepositoryLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_repository_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryLabel) ProtoMessage() {}

func (x *RepositoryLabel) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_repository_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryLabel.ProtoReflect.Descriptor instead.
func (*RepositoryLabel) Descriptor() ([]byte, []int) {
	return file_gitopia_repository_proto_rawDescGZIP(), []int{7}
}

func (x *RepositoryLabel) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RepositoryLabel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepositoryLabel) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *RepositoryLabel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type RepositoryRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TagName string `protobuf:"bytes,2,opt,name=tagName,proto3" json:"tagName,omitempty"`
}

func (x *RepositoryRelease) Reset() {
	*x = RepositoryRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_repository_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryRelease) ProtoMessage() {}

func (x *RepositoryRelease) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_repository_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryRelease.ProtoReflect.Descriptor instead.
func (*RepositoryRelease) Descriptor() ([]byte, []int) {
	return file_gitopia_repository_proto_rawDescGZIP(), []int{8}
}

func (x *RepositoryRelease) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RepositoryRelease) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size     uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Sha      string `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
	Uploader string `protobuf:"bytes,4,opt,name=uploader,proto3" json:"uploader,omitempty"`
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_repository_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_repository_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_gitopia_repository_proto_rawDescGZIP(), []int{9}
}

func (x *Attachment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attachment) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Attachment) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *Attachment) GetUploader() string {
	if x != nil {
		return x.Uploader
	}
	return ""
}

type RepositoryBackup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store RepositoryBackup_Store `protobuf:"varint,1,opt,name=store,proto3,enum=gitopia.gitopia.gitopia.v2.RepositoryBackup_Store" json:"store,omitempty"`
	Refs  []string               `protobuf:"bytes,2,rep,name=refs,proto3" json:"refs,omitempty"`
}

func (x *RepositoryBackup) Reset() {
	*x = RepositoryBackup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_repository_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryBackup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryBackup) ProtoMessage() {}

func (x *RepositoryBackup) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_repository_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryBackup.ProtoReflect.Descriptor instead.
func (*RepositoryBackup) Descriptor() ([]byte, []int) {
	return file_gitopia_repository_proto_rawDescGZIP(), []int{10}
}

func (x *RepositoryBackup) GetStore() RepositoryBackup_Store {
	if x != nil {
		return x.Store
	}
	return RepositoryBackup_IPFS
}

func (x *RepositoryBackup) GetRefs() []string {
	if x != nil {
		return x.Refs
	}
	return nil
}

var File_gitopia_repository_proto protoreflect.FileDescriptor

var file_gitopia_repository_proto_rawDesc = []byte{
	0x0a, 0x18, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x77, 0x68, 0x6f, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x89, 0x09, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0c, 0x70, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0c, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x7a, 0x65, 0x72, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x7a, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x66, 0x6f, 0x72, 0x6b, 0x12, 0x58, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x77, 0x65, 0x61, 0x76, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x72, 0x77, 0x65, 0x61, 0x76, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x22, 0x32, 0x0a,
	0x0c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x51, 0x0a, 0x11, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x76, 0x32, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x33, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x0a,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45,
	0x41, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x52, 0x49, 0x41, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x41, 0x49, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x10, 0x04, 0x22, 0x6d, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x62, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x48, 0x0a, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x22, 0x1e, 0x0a, 0x05, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x46, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x52, 0x57, 0x45, 0x41, 0x56, 0x45, 0x10, 0x01, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x78, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x32, 0x3b,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitopia_repository_proto_rawDescOnce sync.Once
	file_gitopia_repository_proto_rawDescData = file_gitopia_repository_proto_rawDesc
)

func file_gitopia_repository_proto_rawDescGZIP() []byte {
	file_gitopia_repository_proto_rawDescOnce.Do(func() {
		file_gitopia_repository_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitopia_repository_proto_rawDescData)
	})
	return file_gitopia_repository_proto_rawDescData
}

var file_gitopia_repository_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gitopia_repository_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_gitopia_repository_proto_goTypes = []interface{}{
	(RepositoryCollaborator_Permission)(0), // 0: gitopia.gitopia.gitopia.v2.RepositoryCollaborator.Permission
	(RepositoryBackup_Store)(0),            // 1: gitopia.gitopia.gitopia.v2.RepositoryBackup.Store
	(*Repository)(nil),                     // 2: gitopia.gitopia.gitopia.v2.Repository
	(*RepositoryId)(nil),                   // 3: gitopia.gitopia.gitopia.v2.RepositoryId
	(*BaseRepositoryKey)(nil),              // 4: gitopia.gitopia.gitopia.v2.BaseRepositoryKey
	(*RepositoryOwner)(nil),                // 5: gitopia.gitopia.gitopia.v2.RepositoryOwner
	(*RepositoryIssue)(nil),                // 6: gitopia.gitopia.gitopia.v2.RepositoryIssue
	(*RepositoryPullRequest)(nil),          // 7: gitopia.gitopia.gitopia.v2.RepositoryPullRequest
	(*RepositoryCollaborator)(nil),         // 8: gitopia.gitopia.gitopia.v2.RepositoryCollaborator
	(*RepositoryLabel)(nil),                // 9: gitopia.gitopia.gitopia.v2.RepositoryLabel
	(*RepositoryRelease)(nil),              // 10: gitopia.gitopia.gitopia.v2.RepositoryRelease
	(*Attachment)(nil),                     // 11: gitopia.gitopia.gitopia.v2.Attachment
	(*RepositoryBackup)(nil),               // 12: gitopia.gitopia.gitopia.v2.RepositoryBackup
	(OwnerType)(0),                         // 13: gitopia.gitopia.gitopia.v2.OwnerType
}
var file_gitopia_repository_proto_depIdxs = []int32{
	5,  // 0: gitopia.gitopia.gitopia.v2.Repository.owner:type_name -> gitopia.gitopia.gitopia.v2.RepositoryOwner
	6,  // 1: gitopia.gitopia.gitopia.v2.Repository.issues:type_name -> gitopia.gitopia.gitopia.v2.RepositoryIssue
	7,  // 2: gitopia.gitopia.gitopia.v2.Repository.pullRequests:type_name -> gitopia.gitopia.gitopia.v2.RepositoryPullRequest
	9,  // 3: gitopia.gitopia.gitopia.v2.Repository.labels:type_name -> gitopia.gitopia.gitopia.v2.RepositoryLabel
	10, // 4: gitopia.gitopia.gitopia.v2.Repository.releases:type_name -> gitopia.gitopia.gitopia.v2.RepositoryRelease
	8,  // 5: gitopia.gitopia.gitopia.v2.Repository.collaborators:type_name -> gitopia.gitopia.gitopia.v2.RepositoryCollaborator
	12, // 6: gitopia.gitopia.gitopia.v2.Repository.backups:type_name -> gitopia.gitopia.gitopia.v2.RepositoryBackup
	13, // 7: gitopia.gitopia.gitopia.v2.RepositoryOwner.type:type_name -> gitopia.gitopia.gitopia.v2.OwnerType
	0,  // 8: gitopia.gitopia.gitopia.v2.RepositoryCollaborator.permission:type_name -> gitopia.gitopia.gitopia.v2.RepositoryCollaborator.Permission
	1,  // 9: gitopia.gitopia.gitopia.v2.RepositoryBackup.store:type_name -> gitopia.gitopia.gitopia.v2.RepositoryBackup.Store
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_gitopia_repository_proto_init() }
func file_gitopia_repository_proto_init() {
	if File_gitopia_repository_proto != nil {
		return
	}
	file_gitopia_whois_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gitopia_repository_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_repository_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_repository_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseRepositoryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_repository_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_repository_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryIssue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_repository_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryPullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_repository_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryCollaborator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_repository_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_repository_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_repository_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_repository_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryBackup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitopia_repository_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitopia_repository_proto_goTypes,
		DependencyIndexes: file_gitopia_repository_proto_depIdxs,
		EnumInfos:         file_gitopia_repository_proto_enumTypes,
		MessageInfos:      file_gitopia_repository_proto_msgTypes,
	}.Build()
	File_gitopia_repository_proto = out.File
	file_gitopia_repository_proto_rawDesc = nil
	file_gitopia_repository_proto_goTypes = nil
	file_gitopia_repository_proto_depIdxs = nil
}
