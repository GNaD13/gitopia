// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.20.0
// source: gitopia/issue.proto

package types

import (
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Issue_State int32

const (
	Issue_OPEN   Issue_State = 0
	Issue_CLOSED Issue_State = 1
)

// Enum value maps for Issue_State.
var (
	Issue_State_name = map[int32]string{
		0: "OPEN",
		1: "CLOSED",
	}
	Issue_State_value = map[string]int32{
		"OPEN":   0,
		"CLOSED": 1,
	}
)

func (x Issue_State) Enum() *Issue_State {
	p := new(Issue_State)
	*p = x
	return p
}

func (x Issue_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Issue_State) Descriptor() protoreflect.EnumDescriptor {
	return file_gitopia_issue_proto_enumTypes[0].Descriptor()
}

func (Issue_State) Type() protoreflect.EnumType {
	return &file_gitopia_issue_proto_enumTypes[0]
}

func (x Issue_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Issue_State.Descriptor instead.
func (Issue_State) EnumDescriptor() ([]byte, []int) {
	return file_gitopia_issue_proto_rawDescGZIP(), []int{0, 0}
}

type Issue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator       string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id            uint64      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Iid           uint64      `protobuf:"varint,3,opt,name=iid,proto3" json:"iid,omitempty"`
	Title         string      `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	State         Issue_State `protobuf:"varint,5,opt,name=state,proto3,enum=gitopia.gitopia.gitopia.v2.Issue_State" json:"state,omitempty"`
	Description   string      `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Comments      []uint64    `protobuf:"varint,7,rep,packed,name=comments,proto3" json:"comments,omitempty"`
	CommentsCount uint64      `protobuf:"varint,8,opt,name=commentsCount,proto3" json:"commentsCount,omitempty"`
	PullRequests  []uint64    `protobuf:"varint,9,rep,packed,name=pullRequests,proto3" json:"pullRequests,omitempty"`
	RepositoryId  uint64      `protobuf:"varint,10,opt,name=repositoryId,proto3" json:"repositoryId,omitempty"`
	Labels        []uint64    `protobuf:"varint,11,rep,packed,name=labels,proto3" json:"labels,omitempty"`
	Weight        uint64      `protobuf:"varint,12,opt,name=weight,proto3" json:"weight,omitempty"`
	Assignees     []string    `protobuf:"bytes,13,rep,name=assignees,proto3" json:"assignees,omitempty"`
	CreatedAt     int64       `protobuf:"varint,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     int64       `protobuf:"varint,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	ClosedAt      int64       `protobuf:"varint,16,opt,name=closedAt,proto3" json:"closedAt,omitempty"`
	ClosedBy      string      `protobuf:"bytes,17,opt,name=closedBy,proto3" json:"closedBy,omitempty"`
}

func (x *Issue) Reset() {
	*x = Issue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_issue_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue) ProtoMessage() {}

func (x *Issue) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_issue_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue.ProtoReflect.Descriptor instead.
func (*Issue) Descriptor() ([]byte, []int) {
	return file_gitopia_issue_proto_rawDescGZIP(), []int{0}
}

func (x *Issue) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Issue) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Issue) GetIid() uint64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *Issue) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Issue) GetState() Issue_State {
	if x != nil {
		return x.State
	}
	return Issue_OPEN
}

func (x *Issue) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Issue) GetComments() []uint64 {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Issue) GetCommentsCount() uint64 {
	if x != nil {
		return x.CommentsCount
	}
	return 0
}

func (x *Issue) GetPullRequests() []uint64 {
	if x != nil {
		return x.PullRequests
	}
	return nil
}

func (x *Issue) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *Issue) GetLabels() []uint64 {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Issue) GetWeight() uint64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Issue) GetAssignees() []string {
	if x != nil {
		return x.Assignees
	}
	return nil
}

func (x *Issue) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Issue) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Issue) GetClosedAt() int64 {
	if x != nil {
		return x.ClosedAt
	}
	return 0
}

func (x *Issue) GetClosedBy() string {
	if x != nil {
		return x.ClosedBy
	}
	return ""
}

var File_gitopia_issue_proto protoreflect.FileDescriptor

var file_gitopia_issue_proto_rawDesc = []byte{
	0x0a, 0x13, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76,
	0x32, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x04, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x79,
	0x22, 0x1d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45,
	0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x42,
	0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x78, 0x2f,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x76, 0x32, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_gitopia_issue_proto_rawDescOnce sync.Once
	file_gitopia_issue_proto_rawDescData = file_gitopia_issue_proto_rawDesc
)

func file_gitopia_issue_proto_rawDescGZIP() []byte {
	file_gitopia_issue_proto_rawDescOnce.Do(func() {
		file_gitopia_issue_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitopia_issue_proto_rawDescData)
	})
	return file_gitopia_issue_proto_rawDescData
}

var file_gitopia_issue_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gitopia_issue_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gitopia_issue_proto_goTypes = []interface{}{
	(Issue_State)(0), // 0: gitopia.gitopia.gitopia.v2.Issue.State
	(*Issue)(nil),    // 1: gitopia.gitopia.gitopia.v2.Issue
}
var file_gitopia_issue_proto_depIdxs = []int32{
	0, // 0: gitopia.gitopia.gitopia.v2.Issue.state:type_name -> gitopia.gitopia.gitopia.v2.Issue.State
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_gitopia_issue_proto_init() }
func file_gitopia_issue_proto_init() {
	if File_gitopia_issue_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gitopia_issue_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitopia_issue_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitopia_issue_proto_goTypes,
		DependencyIndexes: file_gitopia_issue_proto_depIdxs,
		EnumInfos:         file_gitopia_issue_proto_enumTypes,
		MessageInfos:      file_gitopia_issue_proto_msgTypes,
	}.Build()
	File_gitopia_issue_proto = out.File
	file_gitopia_issue_proto_rawDesc = nil
	file_gitopia_issue_proto_goTypes = nil
	file_gitopia_issue_proto_depIdxs = nil
}
