// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.20.0
// source: gitopia/query.proto

package types

import (
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryCheckStorageProviderAuthorizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAddress     string `protobuf:"bytes,1,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
	ProviderAddress string `protobuf:"bytes,2,opt,name=providerAddress,proto3" json:"providerAddress,omitempty"`
}

func (x *QueryCheckStorageProviderAuthorizationRequest) Reset() {
	*x = QueryCheckStorageProviderAuthorizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCheckStorageProviderAuthorizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCheckStorageProviderAuthorizationRequest) ProtoMessage() {}

func (x *QueryCheckStorageProviderAuthorizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCheckStorageProviderAuthorizationRequest.ProtoReflect.Descriptor instead.
func (*QueryCheckStorageProviderAuthorizationRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{0}
}

func (x *QueryCheckStorageProviderAuthorizationRequest) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *QueryCheckStorageProviderAuthorizationRequest) GetProviderAddress() string {
	if x != nil {
		return x.ProviderAddress
	}
	return ""
}

type QueryCheckStorageProviderAuthorizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HaveAuthorization bool `protobuf:"varint,1,opt,name=haveAuthorization,proto3" json:"haveAuthorization,omitempty"`
}

func (x *QueryCheckStorageProviderAuthorizationResponse) Reset() {
	*x = QueryCheckStorageProviderAuthorizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCheckStorageProviderAuthorizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCheckStorageProviderAuthorizationResponse) ProtoMessage() {}

func (x *QueryCheckStorageProviderAuthorizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCheckStorageProviderAuthorizationResponse.ProtoReflect.Descriptor instead.
func (*QueryCheckStorageProviderAuthorizationResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{1}
}

func (x *QueryCheckStorageProviderAuthorizationResponse) GetHaveAuthorization() bool {
	if x != nil {
		return x.HaveAuthorization
	}
	return false
}

type QueryGetTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryGetTaskRequest) Reset() {
	*x = QueryGetTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetTaskRequest) ProtoMessage() {}

func (x *QueryGetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetTaskRequest.ProtoReflect.Descriptor instead.
func (*QueryGetTaskRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{2}
}

func (x *QueryGetTaskRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryGetTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=Task,proto3" json:"Task,omitempty"`
}

func (x *QueryGetTaskResponse) Reset() {
	*x = QueryGetTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetTaskResponse) ProtoMessage() {}

func (x *QueryGetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetTaskResponse.ProtoReflect.Descriptor instead.
func (*QueryGetTaskResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{3}
}

func (x *QueryGetTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type QueryAllTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllTaskRequest) Reset() {
	*x = QueryAllTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllTaskRequest) ProtoMessage() {}

func (x *QueryAllTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllTaskRequest.ProtoReflect.Descriptor instead.
func (*QueryAllTaskRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{4}
}

func (x *QueryAllTaskRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task       []*Task             `protobuf:"bytes,1,rep,name=Task,proto3" json:"Task,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllTaskResponse) Reset() {
	*x = QueryAllTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllTaskResponse) ProtoMessage() {}

func (x *QueryAllTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllTaskResponse.ProtoReflect.Descriptor instead.
func (*QueryAllTaskResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{5}
}

func (x *QueryAllTaskResponse) GetTask() []*Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *QueryAllTaskResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryCheckGitServerAuthorizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAddress     string `protobuf:"bytes,1,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
	ProviderAddress string `protobuf:"bytes,2,opt,name=providerAddress,proto3" json:"providerAddress,omitempty"`
}

func (x *QueryCheckGitServerAuthorizationRequest) Reset() {
	*x = QueryCheckGitServerAuthorizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCheckGitServerAuthorizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCheckGitServerAuthorizationRequest) ProtoMessage() {}

func (x *QueryCheckGitServerAuthorizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCheckGitServerAuthorizationRequest.ProtoReflect.Descriptor instead.
func (*QueryCheckGitServerAuthorizationRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{6}
}

func (x *QueryCheckGitServerAuthorizationRequest) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *QueryCheckGitServerAuthorizationRequest) GetProviderAddress() string {
	if x != nil {
		return x.ProviderAddress
	}
	return ""
}

type QueryCheckGitServerAuthorizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HaveAuthorization bool `protobuf:"varint,1,opt,name=haveAuthorization,proto3" json:"haveAuthorization,omitempty"`
}

func (x *QueryCheckGitServerAuthorizationResponse) Reset() {
	*x = QueryCheckGitServerAuthorizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCheckGitServerAuthorizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCheckGitServerAuthorizationResponse) ProtoMessage() {}

func (x *QueryCheckGitServerAuthorizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCheckGitServerAuthorizationResponse.ProtoReflect.Descriptor instead.
func (*QueryCheckGitServerAuthorizationResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{7}
}

func (x *QueryCheckGitServerAuthorizationResponse) GetHaveAuthorization() bool {
	if x != nil {
		return x.HaveAuthorization
	}
	return false
}

type QueryAllBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllBranchRequest) Reset() {
	*x = QueryAllBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllBranchRequest) ProtoMessage() {}

func (x *QueryAllBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllBranchRequest.ProtoReflect.Descriptor instead.
func (*QueryAllBranchRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{8}
}

func (x *QueryAllBranchRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch     []*Branch           `protobuf:"bytes,1,rep,name=Branch,proto3" json:"Branch,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllBranchResponse) Reset() {
	*x = QueryAllBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllBranchResponse) ProtoMessage() {}

func (x *QueryAllBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllBranchResponse.ProtoReflect.Descriptor instead.
func (*QueryAllBranchResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{9}
}

func (x *QueryAllBranchResponse) GetBranch() []*Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *QueryAllBranchResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryGetRepositoryBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryName string `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
	BranchName     string `protobuf:"bytes,3,opt,name=branchName,proto3" json:"branchName,omitempty"`
}

func (x *QueryGetRepositoryBranchRequest) Reset() {
	*x = QueryGetRepositoryBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryBranchRequest) ProtoMessage() {}

func (x *QueryGetRepositoryBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryBranchRequest.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryBranchRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{10}
}

func (x *QueryGetRepositoryBranchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryGetRepositoryBranchRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *QueryGetRepositoryBranchRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type QueryGetRepositoryBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch *Branch `protobuf:"bytes,1,opt,name=Branch,proto3" json:"Branch,omitempty"`
}

func (x *QueryGetRepositoryBranchResponse) Reset() {
	*x = QueryGetRepositoryBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryBranchResponse) ProtoMessage() {}

func (x *QueryGetRepositoryBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryBranchResponse.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryBranchResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{11}
}

func (x *QueryGetRepositoryBranchResponse) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

type QueryGetRepositoryBranchShaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryName string `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
	BranchName     string `protobuf:"bytes,3,opt,name=branchName,proto3" json:"branchName,omitempty"`
}

func (x *QueryGetRepositoryBranchShaRequest) Reset() {
	*x = QueryGetRepositoryBranchShaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryBranchShaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryBranchShaRequest) ProtoMessage() {}

func (x *QueryGetRepositoryBranchShaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryBranchShaRequest.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryBranchShaRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{12}
}

func (x *QueryGetRepositoryBranchShaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryGetRepositoryBranchShaRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *QueryGetRepositoryBranchShaRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type QueryGetRepositoryBranchShaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha string `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *QueryGetRepositoryBranchShaResponse) Reset() {
	*x = QueryGetRepositoryBranchShaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryBranchShaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryBranchShaResponse) ProtoMessage() {}

func (x *QueryGetRepositoryBranchShaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryBranchShaResponse.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryBranchShaResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{13}
}

func (x *QueryGetRepositoryBranchShaResponse) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

type QueryAllRepositoryBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryName string             `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
	Pagination     *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllRepositoryBranchRequest) Reset() {
	*x = QueryAllRepositoryBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllRepositoryBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllRepositoryBranchRequest) ProtoMessage() {}

func (x *QueryAllRepositoryBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllRepositoryBranchRequest.ProtoReflect.Descriptor instead.
func (*QueryAllRepositoryBranchRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{14}
}

func (x *QueryAllRepositoryBranchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryAllRepositoryBranchRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *QueryAllRepositoryBranchRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllRepositoryBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch     []*Branch           `protobuf:"bytes,1,rep,name=Branch,proto3" json:"Branch,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllRepositoryBranchResponse) Reset() {
	*x = QueryAllRepositoryBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllRepositoryBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllRepositoryBranchResponse) ProtoMessage() {}

func (x *QueryAllRepositoryBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllRepositoryBranchResponse.ProtoReflect.Descriptor instead.
func (*QueryAllRepositoryBranchResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{15}
}

func (x *QueryAllRepositoryBranchResponse) GetBranch() []*Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *QueryAllRepositoryBranchResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllTagRequest) Reset() {
	*x = QueryAllTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllTagRequest) ProtoMessage() {}

func (x *QueryAllTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllTagRequest.ProtoReflect.Descriptor instead.
func (*QueryAllTagRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{16}
}

func (x *QueryAllTagRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag        []*Tag              `protobuf:"bytes,1,rep,name=Tag,proto3" json:"Tag,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllTagResponse) Reset() {
	*x = QueryAllTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllTagResponse) ProtoMessage() {}

func (x *QueryAllTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllTagResponse.ProtoReflect.Descriptor instead.
func (*QueryAllTagResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{17}
}

func (x *QueryAllTagResponse) GetTag() []*Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *QueryAllTagResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryGetRepositoryTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryName string `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
	TagName        string `protobuf:"bytes,3,opt,name=tagName,proto3" json:"tagName,omitempty"`
}

func (x *QueryGetRepositoryTagRequest) Reset() {
	*x = QueryGetRepositoryTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryTagRequest) ProtoMessage() {}

func (x *QueryGetRepositoryTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryTagRequest.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryTagRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{18}
}

func (x *QueryGetRepositoryTagRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryGetRepositoryTagRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *QueryGetRepositoryTagRequest) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type QueryGetRepositoryTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag *Tag `protobuf:"bytes,1,opt,name=Tag,proto3" json:"Tag,omitempty"`
}

func (x *QueryGetRepositoryTagResponse) Reset() {
	*x = QueryGetRepositoryTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryTagResponse) ProtoMessage() {}

func (x *QueryGetRepositoryTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryTagResponse.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryTagResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{19}
}

func (x *QueryGetRepositoryTagResponse) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

type QueryGetRepositoryTagShaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryName string `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
	TagName        string `protobuf:"bytes,3,opt,name=tagName,proto3" json:"tagName,omitempty"`
}

func (x *QueryGetRepositoryTagShaRequest) Reset() {
	*x = QueryGetRepositoryTagShaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryTagShaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryTagShaRequest) ProtoMessage() {}

func (x *QueryGetRepositoryTagShaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryTagShaRequest.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryTagShaRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{20}
}

func (x *QueryGetRepositoryTagShaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryGetRepositoryTagShaRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *QueryGetRepositoryTagShaRequest) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type QueryGetRepositoryTagShaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha string `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *QueryGetRepositoryTagShaResponse) Reset() {
	*x = QueryGetRepositoryTagShaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryTagShaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryTagShaResponse) ProtoMessage() {}

func (x *QueryGetRepositoryTagShaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryTagShaResponse.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryTagShaResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{21}
}

func (x *QueryGetRepositoryTagShaResponse) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

type QueryAllRepositoryTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryName string             `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
	Pagination     *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllRepositoryTagRequest) Reset() {
	*x = QueryAllRepositoryTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllRepositoryTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllRepositoryTagRequest) ProtoMessage() {}

func (x *QueryAllRepositoryTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllRepositoryTagRequest.ProtoReflect.Descriptor instead.
func (*QueryAllRepositoryTagRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{22}
}

func (x *QueryAllRepositoryTagRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryAllRepositoryTagRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *QueryAllRepositoryTagRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllRepositoryTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag        []*Tag              `protobuf:"bytes,1,rep,name=Tag,proto3" json:"Tag,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllRepositoryTagResponse) Reset() {
	*x = QueryAllRepositoryTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllRepositoryTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllRepositoryTagResponse) ProtoMessage() {}

func (x *QueryAllRepositoryTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllRepositoryTagResponse.ProtoReflect.Descriptor instead.
func (*QueryAllRepositoryTagResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{23}
}

func (x *QueryAllRepositoryTagResponse) GetTag() []*Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *QueryAllRepositoryTagResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryGetDaoMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DaoId  string `protobuf:"bytes,1,opt,name=daoId,proto3" json:"daoId,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *QueryGetDaoMemberRequest) Reset() {
	*x = QueryGetDaoMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetDaoMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetDaoMemberRequest) ProtoMessage() {}

func (x *QueryGetDaoMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetDaoMemberRequest.ProtoReflect.Descriptor instead.
func (*QueryGetDaoMemberRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{24}
}

func (x *QueryGetDaoMemberRequest) GetDaoId() string {
	if x != nil {
		return x.DaoId
	}
	return ""
}

func (x *QueryGetDaoMemberRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type QueryGetDaoMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member *Member `protobuf:"bytes,1,opt,name=Member,proto3" json:"Member,omitempty"`
}

func (x *QueryGetDaoMemberResponse) Reset() {
	*x = QueryGetDaoMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetDaoMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetDaoMemberResponse) ProtoMessage() {}

func (x *QueryGetDaoMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetDaoMemberResponse.ProtoReflect.Descriptor instead.
func (*QueryGetDaoMemberResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{25}
}

func (x *QueryGetDaoMemberResponse) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

type QueryAllDaoMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DaoId      string             `protobuf:"bytes,1,opt,name=daoId,proto3" json:"daoId,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllDaoMemberRequest) Reset() {
	*x = QueryAllDaoMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllDaoMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllDaoMemberRequest) ProtoMessage() {}

func (x *QueryAllDaoMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllDaoMemberRequest.ProtoReflect.Descriptor instead.
func (*QueryAllDaoMemberRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{26}
}

func (x *QueryAllDaoMemberRequest) GetDaoId() string {
	if x != nil {
		return x.DaoId
	}
	return ""
}

func (x *QueryAllDaoMemberRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllDaoMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member     []*Member           `protobuf:"bytes,1,rep,name=Member,proto3" json:"Member,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllDaoMemberResponse) Reset() {
	*x = QueryAllDaoMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllDaoMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllDaoMemberResponse) ProtoMessage() {}

func (x *QueryAllDaoMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllDaoMemberResponse.ProtoReflect.Descriptor instead.
func (*QueryAllDaoMemberResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{27}
}

func (x *QueryAllDaoMemberResponse) GetMember() []*Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *QueryAllDaoMemberResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllMemberRequest) Reset() {
	*x = QueryAllMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllMemberRequest) ProtoMessage() {}

func (x *QueryAllMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllMemberRequest.ProtoReflect.Descriptor instead.
func (*QueryAllMemberRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{28}
}

func (x *QueryAllMemberRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member     []*Member           `protobuf:"bytes,1,rep,name=Member,proto3" json:"Member,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllMemberResponse) Reset() {
	*x = QueryAllMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllMemberResponse) ProtoMessage() {}

func (x *QueryAllMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllMemberResponse.ProtoReflect.Descriptor instead.
func (*QueryAllMemberResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{29}
}

func (x *QueryAllMemberResponse) GetMember() []*Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *QueryAllMemberResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// this line is used by starport scaffolding # 3
type QueryGetPullRequestMergePermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	PullId uint64 `protobuf:"varint,2,opt,name=pullId,proto3" json:"pullId,omitempty"`
}

func (x *QueryGetPullRequestMergePermissionRequest) Reset() {
	*x = QueryGetPullRequestMergePermissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetPullRequestMergePermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetPullRequestMergePermissionRequest) ProtoMessage() {}

func (x *QueryGetPullRequestMergePermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetPullRequestMergePermissionRequest.ProtoReflect.Descriptor instead.
func (*QueryGetPullRequestMergePermissionRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{30}
}

func (x *QueryGetPullRequestMergePermissionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *QueryGetPullRequestMergePermissionRequest) GetPullId() uint64 {
	if x != nil {
		return x.PullId
	}
	return 0
}

type QueryGetPullRequestMergePermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HavePermission bool `protobuf:"varint,1,opt,name=havePermission,proto3" json:"havePermission,omitempty"`
}

func (x *QueryGetPullRequestMergePermissionResponse) Reset() {
	*x = QueryGetPullRequestMergePermissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetPullRequestMergePermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetPullRequestMergePermissionResponse) ProtoMessage() {}

func (x *QueryGetPullRequestMergePermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetPullRequestMergePermissionResponse.ProtoReflect.Descriptor instead.
func (*QueryGetPullRequestMergePermissionResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{31}
}

func (x *QueryGetPullRequestMergePermissionResponse) GetHavePermission() bool {
	if x != nil {
		return x.HavePermission
	}
	return false
}

// this line is used by starport scaffolding # 3
type QueryGetReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryGetReleaseRequest) Reset() {
	*x = QueryGetReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetReleaseRequest) ProtoMessage() {}

func (x *QueryGetReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetReleaseRequest.ProtoReflect.Descriptor instead.
func (*QueryGetReleaseRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{32}
}

func (x *QueryGetReleaseRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryGetReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Release *Release `protobuf:"bytes,1,opt,name=Release,proto3" json:"Release,omitempty"`
}

func (x *QueryGetReleaseResponse) Reset() {
	*x = QueryGetReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetReleaseResponse) ProtoMessage() {}

func (x *QueryGetReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetReleaseResponse.ProtoReflect.Descriptor instead.
func (*QueryGetReleaseResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{33}
}

func (x *QueryGetReleaseResponse) GetRelease() *Release {
	if x != nil {
		return x.Release
	}
	return nil
}

type QueryAllReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllReleaseRequest) Reset() {
	*x = QueryAllReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllReleaseRequest) ProtoMessage() {}

func (x *QueryAllReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllReleaseRequest.ProtoReflect.Descriptor instead.
func (*QueryAllReleaseRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{34}
}

func (x *QueryAllReleaseRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Release    []*Release          `protobuf:"bytes,1,rep,name=Release,proto3" json:"Release,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllReleaseResponse) Reset() {
	*x = QueryAllReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllReleaseResponse) ProtoMessage() {}

func (x *QueryAllReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllReleaseResponse.ProtoReflect.Descriptor instead.
func (*QueryAllReleaseResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{35}
}

func (x *QueryAllReleaseResponse) GetRelease() []*Release {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *QueryAllReleaseResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryGetPullRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryGetPullRequestRequest) Reset() {
	*x = QueryGetPullRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetPullRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetPullRequestRequest) ProtoMessage() {}

func (x *QueryGetPullRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetPullRequestRequest.ProtoReflect.Descriptor instead.
func (*QueryGetPullRequestRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{36}
}

func (x *QueryGetPullRequestRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryGetPullRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PullRequest *PullRequest `protobuf:"bytes,1,opt,name=PullRequest,proto3" json:"PullRequest,omitempty"`
}

func (x *QueryGetPullRequestResponse) Reset() {
	*x = QueryGetPullRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetPullRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetPullRequestResponse) ProtoMessage() {}

func (x *QueryGetPullRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetPullRequestResponse.ProtoReflect.Descriptor instead.
func (*QueryGetPullRequestResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{37}
}

func (x *QueryGetPullRequestResponse) GetPullRequest() *PullRequest {
	if x != nil {
		return x.PullRequest
	}
	return nil
}

type QueryAllPullRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllPullRequestRequest) Reset() {
	*x = QueryAllPullRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllPullRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllPullRequestRequest) ProtoMessage() {}

func (x *QueryAllPullRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllPullRequestRequest.ProtoReflect.Descriptor instead.
func (*QueryAllPullRequestRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{38}
}

func (x *QueryAllPullRequestRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllPullRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PullRequest []*PullRequest      `protobuf:"bytes,1,rep,name=PullRequest,proto3" json:"PullRequest,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllPullRequestResponse) Reset() {
	*x = QueryAllPullRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllPullRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllPullRequestResponse) ProtoMessage() {}

func (x *QueryAllPullRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllPullRequestResponse.ProtoReflect.Descriptor instead.
func (*QueryAllPullRequestResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{39}
}

func (x *QueryAllPullRequestResponse) GetPullRequest() []*PullRequest {
	if x != nil {
		return x.PullRequest
	}
	return nil
}

func (x *QueryAllPullRequestResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryGetDaoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryGetDaoRequest) Reset() {
	*x = QueryGetDaoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetDaoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetDaoRequest) ProtoMessage() {}

func (x *QueryGetDaoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetDaoRequest.ProtoReflect.Descriptor instead.
func (*QueryGetDaoRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{40}
}

func (x *QueryGetDaoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QueryGetDaoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dao *Dao `protobuf:"bytes,1,opt,name=dao,proto3" json:"dao,omitempty"`
}

func (x *QueryGetDaoResponse) Reset() {
	*x = QueryGetDaoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetDaoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetDaoResponse) ProtoMessage() {}

func (x *QueryGetDaoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetDaoResponse.ProtoReflect.Descriptor instead.
func (*QueryGetDaoResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{41}
}

func (x *QueryGetDaoResponse) GetDao() *Dao {
	if x != nil {
		return x.Dao
	}
	return nil
}

type QueryAllDaoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllDaoRequest) Reset() {
	*x = QueryAllDaoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllDaoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllDaoRequest) ProtoMessage() {}

func (x *QueryAllDaoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllDaoRequest.ProtoReflect.Descriptor instead.
func (*QueryAllDaoRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{42}
}

func (x *QueryAllDaoRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllDaoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dao        []*Dao              `protobuf:"bytes,1,rep,name=dao,proto3" json:"dao,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllDaoResponse) Reset() {
	*x = QueryAllDaoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllDaoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllDaoResponse) ProtoMessage() {}

func (x *QueryAllDaoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllDaoResponse.ProtoReflect.Descriptor instead.
func (*QueryAllDaoResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{43}
}

func (x *QueryAllDaoResponse) GetDao() []*Dao {
	if x != nil {
		return x.Dao
	}
	return nil
}

func (x *QueryAllDaoResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryGetCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryGetCommentRequest) Reset() {
	*x = QueryGetCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetCommentRequest) ProtoMessage() {}

func (x *QueryGetCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetCommentRequest.ProtoReflect.Descriptor instead.
func (*QueryGetCommentRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{44}
}

func (x *QueryGetCommentRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryGetCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment *Comment `protobuf:"bytes,1,opt,name=Comment,proto3" json:"Comment,omitempty"`
}

func (x *QueryGetCommentResponse) Reset() {
	*x = QueryGetCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetCommentResponse) ProtoMessage() {}

func (x *QueryGetCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetCommentResponse.ProtoReflect.Descriptor instead.
func (*QueryGetCommentResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{45}
}

func (x *QueryGetCommentResponse) GetComment() *Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type QueryAllCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllCommentRequest) Reset() {
	*x = QueryAllCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllCommentRequest) ProtoMessage() {}

func (x *QueryAllCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllCommentRequest.ProtoReflect.Descriptor instead.
func (*QueryAllCommentRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{46}
}

func (x *QueryAllCommentRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment    []*Comment          `protobuf:"bytes,1,rep,name=Comment,proto3" json:"Comment,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllCommentResponse) Reset() {
	*x = QueryAllCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllCommentResponse) ProtoMessage() {}

func (x *QueryAllCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllCommentResponse.ProtoReflect.Descriptor instead.
func (*QueryAllCommentResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{47}
}

func (x *QueryAllCommentResponse) GetComment() []*Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *QueryAllCommentResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryGetIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryGetIssueRequest) Reset() {
	*x = QueryGetIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetIssueRequest) ProtoMessage() {}

func (x *QueryGetIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetIssueRequest.ProtoReflect.Descriptor instead.
func (*QueryGetIssueRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{48}
}

func (x *QueryGetIssueRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryGetIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issue *Issue `protobuf:"bytes,1,opt,name=Issue,proto3" json:"Issue,omitempty"`
}

func (x *QueryGetIssueResponse) Reset() {
	*x = QueryGetIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetIssueResponse) ProtoMessage() {}

func (x *QueryGetIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetIssueResponse.ProtoReflect.Descriptor instead.
func (*QueryGetIssueResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{49}
}

func (x *QueryGetIssueResponse) GetIssue() *Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

type QueryAllIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllIssueRequest) Reset() {
	*x = QueryAllIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllIssueRequest) ProtoMessage() {}

func (x *QueryAllIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllIssueRequest.ProtoReflect.Descriptor instead.
func (*QueryAllIssueRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{50}
}

func (x *QueryAllIssueRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issue      []*Issue            `protobuf:"bytes,1,rep,name=Issue,proto3" json:"Issue,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllIssueResponse) Reset() {
	*x = QueryAllIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllIssueResponse) ProtoMessage() {}

func (x *QueryAllIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllIssueResponse.ProtoReflect.Descriptor instead.
func (*QueryAllIssueResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{51}
}

func (x *QueryAllIssueResponse) GetIssue() []*Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

func (x *QueryAllIssueResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryGetLatestRepositoryReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryName string `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
}

func (x *QueryGetLatestRepositoryReleaseRequest) Reset() {
	*x = QueryGetLatestRepositoryReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetLatestRepositoryReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetLatestRepositoryReleaseRequest) ProtoMessage() {}

func (x *QueryGetLatestRepositoryReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetLatestRepositoryReleaseRequest.ProtoReflect.Descriptor instead.
func (*QueryGetLatestRepositoryReleaseRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{52}
}

func (x *QueryGetLatestRepositoryReleaseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryGetLatestRepositoryReleaseRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

type QueryGetLatestRepositoryReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Release *Release `protobuf:"bytes,1,opt,name=Release,proto3" json:"Release,omitempty"`
}

func (x *QueryGetLatestRepositoryReleaseResponse) Reset() {
	*x = QueryGetLatestRepositoryReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetLatestRepositoryReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetLatestRepositoryReleaseResponse) ProtoMessage() {}

func (x *QueryGetLatestRepositoryReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetLatestRepositoryReleaseResponse.ProtoReflect.Descriptor instead.
func (*QueryGetLatestRepositoryReleaseResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{53}
}

func (x *QueryGetLatestRepositoryReleaseResponse) GetRelease() *Release {
	if x != nil {
		return x.Release
	}
	return nil
}

type QueryGetRepositoryReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryName string `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
	TagName        string `protobuf:"bytes,3,opt,name=tagName,proto3" json:"tagName,omitempty"`
}

func (x *QueryGetRepositoryReleaseRequest) Reset() {
	*x = QueryGetRepositoryReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryReleaseRequest) ProtoMessage() {}

func (x *QueryGetRepositoryReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryReleaseRequest.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryReleaseRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{54}
}

func (x *QueryGetRepositoryReleaseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryGetRepositoryReleaseRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *QueryGetRepositoryReleaseRequest) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type QueryGetRepositoryReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Release *Release `protobuf:"bytes,1,opt,name=Release,proto3" json:"Release,omitempty"`
}

func (x *QueryGetRepositoryReleaseResponse) Reset() {
	*x = QueryGetRepositoryReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryReleaseResponse) ProtoMessage() {}

func (x *QueryGetRepositoryReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryReleaseResponse.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryReleaseResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{55}
}

func (x *QueryGetRepositoryReleaseResponse) GetRelease() *Release {
	if x != nil {
		return x.Release
	}
	return nil
}

type QueryAllRepositoryReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryName string             `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
	Pagination     *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllRepositoryReleaseRequest) Reset() {
	*x = QueryAllRepositoryReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllRepositoryReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllRepositoryReleaseRequest) ProtoMessage() {}

func (x *QueryAllRepositoryReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllRepositoryReleaseRequest.ProtoReflect.Descriptor instead.
func (*QueryAllRepositoryReleaseRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{56}
}

func (x *QueryAllRepositoryReleaseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryAllRepositoryReleaseRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *QueryAllRepositoryReleaseRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllRepositoryReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Release    []*Release          `protobuf:"bytes,1,rep,name=Release,proto3" json:"Release,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllRepositoryReleaseResponse) Reset() {
	*x = QueryAllRepositoryReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllRepositoryReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllRepositoryReleaseResponse) ProtoMessage() {}

func (x *QueryAllRepositoryReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllRepositoryReleaseResponse.ProtoReflect.Descriptor instead.
func (*QueryAllRepositoryReleaseResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{57}
}

func (x *QueryAllRepositoryReleaseResponse) GetRelease() []*Release {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *QueryAllRepositoryReleaseResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryGetRepositoryIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryName string `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
	IssueIid       uint64 `protobuf:"varint,3,opt,name=issueIid,proto3" json:"issueIid,omitempty"`
}

func (x *QueryGetRepositoryIssueRequest) Reset() {
	*x = QueryGetRepositoryIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryIssueRequest) ProtoMessage() {}

func (x *QueryGetRepositoryIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryIssueRequest.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryIssueRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{58}
}

func (x *QueryGetRepositoryIssueRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryGetRepositoryIssueRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *QueryGetRepositoryIssueRequest) GetIssueIid() uint64 {
	if x != nil {
		return x.IssueIid
	}
	return 0
}

type QueryGetRepositoryIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issue *Issue `protobuf:"bytes,1,opt,name=Issue,proto3" json:"Issue,omitempty"`
}

func (x *QueryGetRepositoryIssueResponse) Reset() {
	*x = QueryGetRepositoryIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryIssueResponse) ProtoMessage() {}

func (x *QueryGetRepositoryIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryIssueResponse.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryIssueResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{59}
}

func (x *QueryGetRepositoryIssueResponse) GetIssue() *Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

type QueryGetRepositoryPullRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryName string `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
	PullIid        uint64 `protobuf:"varint,3,opt,name=pullIid,proto3" json:"pullIid,omitempty"`
}

func (x *QueryGetRepositoryPullRequestRequest) Reset() {
	*x = QueryGetRepositoryPullRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryPullRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryPullRequestRequest) ProtoMessage() {}

func (x *QueryGetRepositoryPullRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryPullRequestRequest.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryPullRequestRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{60}
}

func (x *QueryGetRepositoryPullRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryGetRepositoryPullRequestRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *QueryGetRepositoryPullRequestRequest) GetPullIid() uint64 {
	if x != nil {
		return x.PullIid
	}
	return 0
}

type QueryGetRepositoryPullRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PullRequest *PullRequest `protobuf:"bytes,1,opt,name=PullRequest,proto3" json:"PullRequest,omitempty"`
}

func (x *QueryGetRepositoryPullRequestResponse) Reset() {
	*x = QueryGetRepositoryPullRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryPullRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryPullRequestResponse) ProtoMessage() {}

func (x *QueryGetRepositoryPullRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryPullRequestResponse.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryPullRequestResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{61}
}

func (x *QueryGetRepositoryPullRequestResponse) GetPullRequest() *PullRequest {
	if x != nil {
		return x.PullRequest
	}
	return nil
}

type QueryAllRepositoryIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryName string             `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
	Option         *IssueOptions      `protobuf:"bytes,3,opt,name=option,proto3" json:"option,omitempty"`
	Pagination     *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllRepositoryIssueRequest) Reset() {
	*x = QueryAllRepositoryIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllRepositoryIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllRepositoryIssueRequest) ProtoMessage() {}

func (x *QueryAllRepositoryIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllRepositoryIssueRequest.ProtoReflect.Descriptor instead.
func (*QueryAllRepositoryIssueRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{62}
}

func (x *QueryAllRepositoryIssueRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryAllRepositoryIssueRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *QueryAllRepositoryIssueRequest) GetOption() *IssueOptions {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *QueryAllRepositoryIssueRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type IssueOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedBy     string   `protobuf:"bytes,1,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	State         string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Labels        string   `protobuf:"bytes,3,opt,name=labels,proto3" json:"labels,omitempty"`
	Assignee      string   `protobuf:"bytes,4,opt,name=assignee,proto3" json:"assignee,omitempty"`
	LabelIds      []uint64 `protobuf:"varint,5,rep,packed,name=labelIds,proto3" json:"labelIds,omitempty"`
	Sort          string   `protobuf:"bytes,6,opt,name=sort,proto3" json:"sort,omitempty"`
	Search        string   `protobuf:"bytes,7,opt,name=search,proto3" json:"search,omitempty"`
	UpdatedAfter  int64    `protobuf:"varint,8,opt,name=updatedAfter,proto3" json:"updatedAfter,omitempty"`
	UpdatedBefore int64    `protobuf:"varint,9,opt,name=updatedBefore,proto3" json:"updatedBefore,omitempty"`
}

func (x *IssueOptions) Reset() {
	*x = IssueOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueOptions) ProtoMessage() {}

func (x *IssueOptions) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueOptions.ProtoReflect.Descriptor instead.
func (*IssueOptions) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{63}
}

func (x *IssueOptions) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *IssueOptions) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *IssueOptions) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *IssueOptions) GetAssignee() string {
	if x != nil {
		return x.Assignee
	}
	return ""
}

func (x *IssueOptions) GetLabelIds() []uint64 {
	if x != nil {
		return x.LabelIds
	}
	return nil
}

func (x *IssueOptions) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *IssueOptions) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *IssueOptions) GetUpdatedAfter() int64 {
	if x != nil {
		return x.UpdatedAfter
	}
	return 0
}

func (x *IssueOptions) GetUpdatedBefore() int64 {
	if x != nil {
		return x.UpdatedBefore
	}
	return 0
}

type QueryAllRepositoryIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issue      []*Issue            `protobuf:"bytes,1,rep,name=Issue,proto3" json:"Issue,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllRepositoryIssueResponse) Reset() {
	*x = QueryAllRepositoryIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllRepositoryIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllRepositoryIssueResponse) ProtoMessage() {}

func (x *QueryAllRepositoryIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllRepositoryIssueResponse.ProtoReflect.Descriptor instead.
func (*QueryAllRepositoryIssueResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{64}
}

func (x *QueryAllRepositoryIssueResponse) GetIssue() []*Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

func (x *QueryAllRepositoryIssueResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllRepositoryPullRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryName string              `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
	Option         *PullRequestOptions `protobuf:"bytes,3,opt,name=option,proto3" json:"option,omitempty"`
	Pagination     *query.PageRequest  `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllRepositoryPullRequestRequest) Reset() {
	*x = QueryAllRepositoryPullRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllRepositoryPullRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllRepositoryPullRequestRequest) ProtoMessage() {}

func (x *QueryAllRepositoryPullRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllRepositoryPullRequestRequest.ProtoReflect.Descriptor instead.
func (*QueryAllRepositoryPullRequestRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{65}
}

func (x *QueryAllRepositoryPullRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryAllRepositoryPullRequestRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *QueryAllRepositoryPullRequestRequest) GetOption() *PullRequestOptions {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *QueryAllRepositoryPullRequestRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type PullRequestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedBy     string   `protobuf:"bytes,1,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	State         string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Labels        string   `protobuf:"bytes,3,opt,name=labels,proto3" json:"labels,omitempty"`
	Assignee      string   `protobuf:"bytes,4,opt,name=assignee,proto3" json:"assignee,omitempty"`
	Reviewer      string   `protobuf:"bytes,5,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	LabelIds      []uint64 `protobuf:"varint,6,rep,packed,name=labelIds,proto3" json:"labelIds,omitempty"`
	Sort          string   `protobuf:"bytes,7,opt,name=sort,proto3" json:"sort,omitempty"`
	Search        string   `protobuf:"bytes,8,opt,name=search,proto3" json:"search,omitempty"`
	UpdatedAfter  int64    `protobuf:"varint,9,opt,name=updatedAfter,proto3" json:"updatedAfter,omitempty"`
	UpdatedBefore int64    `protobuf:"varint,10,opt,name=updatedBefore,proto3" json:"updatedBefore,omitempty"`
}

func (x *PullRequestOptions) Reset() {
	*x = PullRequestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequestOptions) ProtoMessage() {}

func (x *PullRequestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequestOptions.ProtoReflect.Descriptor instead.
func (*PullRequestOptions) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{66}
}

func (x *PullRequestOptions) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PullRequestOptions) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PullRequestOptions) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *PullRequestOptions) GetAssignee() string {
	if x != nil {
		return x.Assignee
	}
	return ""
}

func (x *PullRequestOptions) GetReviewer() string {
	if x != nil {
		return x.Reviewer
	}
	return ""
}

func (x *PullRequestOptions) GetLabelIds() []uint64 {
	if x != nil {
		return x.LabelIds
	}
	return nil
}

func (x *PullRequestOptions) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *PullRequestOptions) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *PullRequestOptions) GetUpdatedAfter() int64 {
	if x != nil {
		return x.UpdatedAfter
	}
	return 0
}

func (x *PullRequestOptions) GetUpdatedBefore() int64 {
	if x != nil {
		return x.UpdatedBefore
	}
	return 0
}

type QueryAllRepositoryPullRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PullRequest []*PullRequest      `protobuf:"bytes,1,rep,name=PullRequest,proto3" json:"PullRequest,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllRepositoryPullRequestResponse) Reset() {
	*x = QueryAllRepositoryPullRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllRepositoryPullRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllRepositoryPullRequestResponse) ProtoMessage() {}

func (x *QueryAllRepositoryPullRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllRepositoryPullRequestResponse.ProtoReflect.Descriptor instead.
func (*QueryAllRepositoryPullRequestResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{67}
}

func (x *QueryAllRepositoryPullRequestResponse) GetPullRequest() []*PullRequest {
	if x != nil {
		return x.PullRequest
	}
	return nil
}

func (x *QueryAllRepositoryPullRequestResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryGetRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryGetRepositoryRequest) Reset() {
	*x = QueryGetRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryRequest) ProtoMessage() {}

func (x *QueryGetRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryRequest.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{68}
}

func (x *QueryGetRepositoryRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryGetRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=Repository,proto3" json:"Repository,omitempty"`
}

func (x *QueryGetRepositoryResponse) Reset() {
	*x = QueryGetRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRepositoryResponse) ProtoMessage() {}

func (x *QueryGetRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetRepositoryResponse.ProtoReflect.Descriptor instead.
func (*QueryGetRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{69}
}

func (x *QueryGetRepositoryResponse) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

type RepositoryFork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator     string           `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id          uint64           `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name        string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Owner       *RepositoryOwner `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Description string           `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Parent      uint64           `protobuf:"varint,6,opt,name=parent,proto3" json:"parent,omitempty"`
	ForksCount  uint64           `protobuf:"varint,7,opt,name=forksCount,proto3" json:"forksCount,omitempty"`
	IssuesCount uint64           `protobuf:"varint,8,opt,name=issuesCount,proto3" json:"issuesCount,omitempty"`
	PullsCount  uint64           `protobuf:"varint,9,opt,name=pullsCount,proto3" json:"pullsCount,omitempty"`
}

func (x *RepositoryFork) Reset() {
	*x = RepositoryFork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryFork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryFork) ProtoMessage() {}

func (x *RepositoryFork) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryFork.ProtoReflect.Descriptor instead.
func (*RepositoryFork) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{70}
}

func (x *RepositoryFork) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *RepositoryFork) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RepositoryFork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepositoryFork) GetOwner() *RepositoryOwner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *RepositoryFork) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RepositoryFork) GetParent() uint64 {
	if x != nil {
		return x.Parent
	}
	return 0
}

func (x *RepositoryFork) GetForksCount() uint64 {
	if x != nil {
		return x.ForksCount
	}
	return 0
}

func (x *RepositoryFork) GetIssuesCount() uint64 {
	if x != nil {
		return x.IssuesCount
	}
	return 0
}

func (x *RepositoryFork) GetPullsCount() uint64 {
	if x != nil {
		return x.PullsCount
	}
	return 0
}

type QueryGetAllForkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryName string             `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
	Pagination     *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetAllForkRequest) Reset() {
	*x = QueryGetAllForkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetAllForkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetAllForkRequest) ProtoMessage() {}

func (x *QueryGetAllForkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetAllForkRequest.ProtoReflect.Descriptor instead.
func (*QueryGetAllForkRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{71}
}

func (x *QueryGetAllForkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryGetAllForkRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *QueryGetAllForkRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryGetAllForkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Forks      []*RepositoryFork   `protobuf:"bytes,1,rep,name=forks,proto3" json:"forks,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetAllForkResponse) Reset() {
	*x = QueryGetAllForkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetAllForkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetAllForkResponse) ProtoMessage() {}

func (x *QueryGetAllForkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetAllForkResponse.ProtoReflect.Descriptor instead.
func (*QueryGetAllForkResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{72}
}

func (x *QueryGetAllForkResponse) GetForks() []*RepositoryFork {
	if x != nil {
		return x.Forks
	}
	return nil
}

func (x *QueryGetAllForkResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllRepositoryRequest) Reset() {
	*x = QueryAllRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllRepositoryRequest) ProtoMessage() {}

func (x *QueryAllRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllRepositoryRequest.ProtoReflect.Descriptor instead.
func (*QueryAllRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{73}
}

func (x *QueryAllRepositoryRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository []*Repository       `protobuf:"bytes,1,rep,name=Repository,proto3" json:"Repository,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllRepositoryResponse) Reset() {
	*x = QueryAllRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllRepositoryResponse) ProtoMessage() {}

func (x *QueryAllRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllRepositoryResponse.ProtoReflect.Descriptor instead.
func (*QueryAllRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{74}
}

func (x *QueryAllRepositoryResponse) GetRepository() []*Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *QueryAllRepositoryResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryGetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryGetUserRequest) Reset() {
	*x = QueryGetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetUserRequest) ProtoMessage() {}

func (x *QueryGetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetUserRequest.ProtoReflect.Descriptor instead.
func (*QueryGetUserRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{75}
}

func (x *QueryGetUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QueryGetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
}

func (x *QueryGetUserResponse) Reset() {
	*x = QueryGetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetUserResponse) ProtoMessage() {}

func (x *QueryGetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetUserResponse.ProtoReflect.Descriptor instead.
func (*QueryGetUserResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{76}
}

func (x *QueryGetUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type QueryAllUserDaoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string             `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllUserDaoRequest) Reset() {
	*x = QueryAllUserDaoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllUserDaoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllUserDaoRequest) ProtoMessage() {}

func (x *QueryAllUserDaoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllUserDaoRequest.ProtoReflect.Descriptor instead.
func (*QueryAllUserDaoRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{77}
}

func (x *QueryAllUserDaoRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *QueryAllUserDaoRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllUserDaoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dao        []*Dao              `protobuf:"bytes,1,rep,name=dao,proto3" json:"dao,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllUserDaoResponse) Reset() {
	*x = QueryAllUserDaoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllUserDaoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllUserDaoResponse) ProtoMessage() {}

func (x *QueryAllUserDaoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllUserDaoResponse.ProtoReflect.Descriptor instead.
func (*QueryAllUserDaoResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{78}
}

func (x *QueryAllUserDaoResponse) GetDao() []*Dao {
	if x != nil {
		return x.Dao
	}
	return nil
}

func (x *QueryAllUserDaoResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllUserRequest) Reset() {
	*x = QueryAllUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllUserRequest) ProtoMessage() {}

func (x *QueryAllUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllUserRequest.ProtoReflect.Descriptor instead.
func (*QueryAllUserRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{79}
}

func (x *QueryAllUserRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User       []*User             `protobuf:"bytes,1,rep,name=User,proto3" json:"User,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllUserResponse) Reset() {
	*x = QueryAllUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllUserResponse) ProtoMessage() {}

func (x *QueryAllUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllUserResponse.ProtoReflect.Descriptor instead.
func (*QueryAllUserResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{80}
}

func (x *QueryAllUserResponse) GetUser() []*User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *QueryAllUserResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllAnyRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllAnyRepositoryRequest) Reset() {
	*x = QueryAllAnyRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllAnyRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllAnyRepositoryRequest) ProtoMessage() {}

func (x *QueryAllAnyRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllAnyRepositoryRequest.ProtoReflect.Descriptor instead.
func (*QueryAllAnyRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{81}
}

func (x *QueryAllAnyRepositoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryAllAnyRepositoryRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllAnyRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository []*Repository       `protobuf:"bytes,1,rep,name=Repository,proto3" json:"Repository,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllAnyRepositoryResponse) Reset() {
	*x = QueryAllAnyRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllAnyRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllAnyRepositoryResponse) ProtoMessage() {}

func (x *QueryAllAnyRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllAnyRepositoryResponse.ProtoReflect.Descriptor instead.
func (*QueryAllAnyRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{82}
}

func (x *QueryAllAnyRepositoryResponse) GetRepository() []*Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *QueryAllAnyRepositoryResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryGetAnyRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryName string `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
}

func (x *QueryGetAnyRepositoryRequest) Reset() {
	*x = QueryGetAnyRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetAnyRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetAnyRepositoryRequest) ProtoMessage() {}

func (x *QueryGetAnyRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetAnyRepositoryRequest.ProtoReflect.Descriptor instead.
func (*QueryGetAnyRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{83}
}

func (x *QueryGetAnyRepositoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryGetAnyRepositoryRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

type QueryGetAnyRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=Repository,proto3" json:"Repository,omitempty"`
}

func (x *QueryGetAnyRepositoryResponse) Reset() {
	*x = QueryGetAnyRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetAnyRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetAnyRepositoryResponse) ProtoMessage() {}

func (x *QueryGetAnyRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetAnyRepositoryResponse.ProtoReflect.Descriptor instead.
func (*QueryGetAnyRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{84}
}

func (x *QueryGetAnyRepositoryResponse) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

type QueryGetWhoisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *QueryGetWhoisRequest) Reset() {
	*x = QueryGetWhoisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetWhoisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetWhoisRequest) ProtoMessage() {}

func (x *QueryGetWhoisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetWhoisRequest.ProtoReflect.Descriptor instead.
func (*QueryGetWhoisRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{85}
}

func (x *QueryGetWhoisRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type QueryGetWhoisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Whois *Whois `protobuf:"bytes,1,opt,name=Whois,proto3" json:"Whois,omitempty"`
}

func (x *QueryGetWhoisResponse) Reset() {
	*x = QueryGetWhoisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetWhoisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetWhoisResponse) ProtoMessage() {}

func (x *QueryGetWhoisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGetWhoisResponse.ProtoReflect.Descriptor instead.
func (*QueryGetWhoisResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{86}
}

func (x *QueryGetWhoisResponse) GetWhois() *Whois {
	if x != nil {
		return x.Whois
	}
	return nil
}

type QueryAllWhoisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllWhoisRequest) Reset() {
	*x = QueryAllWhoisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllWhoisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllWhoisRequest) ProtoMessage() {}

func (x *QueryAllWhoisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllWhoisRequest.ProtoReflect.Descriptor instead.
func (*QueryAllWhoisRequest) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{87}
}

func (x *QueryAllWhoisRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllWhoisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Whois      []*Whois            `protobuf:"bytes,1,rep,name=Whois,proto3" json:"Whois,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllWhoisResponse) Reset() {
	*x = QueryAllWhoisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitopia_query_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllWhoisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllWhoisResponse) ProtoMessage() {}

func (x *QueryAllWhoisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitopia_query_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllWhoisResponse.ProtoReflect.Descriptor instead.
func (*QueryAllWhoisResponse) Descriptor() ([]byte, []int) {
	return file_gitopia_query_proto_rawDescGZIP(), []int{88}
}

func (x *QueryAllWhoisResponse) GetWhois() []*Whois {
	if x != nil {
		return x.Whois
	}
	return nil
}

func (x *QueryAllWhoisResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

var File_gitopia_query_proto protoreflect.FileDescriptor

var file_gitopia_query_proto_rawDesc = []byte{
	0x0a, 0x13, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76,
	0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x74,
	0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2f, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f,
	0x64, 0x61, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x77, 0x68, 0x6f,
	0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x2d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5e, 0x0a, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x61, 0x76, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x25, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x14,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b,
	0x22, 0x5d, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x9b, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x04,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a,
	0x27, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x69, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x58, 0x0a, 0x28, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x47, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x68, 0x61, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x76,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f,
	0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xa3, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x47, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x64, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x7c, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x53, 0x68, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x53, 0x68, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x22, 0xa1, 0x01,
	0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xad, 0x01, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5c, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x97, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x03, 0x54, 0x61, 0x67,
	0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x1c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x1d, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x03,
	0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x03, 0x54, 0x61, 0x67, 0x22, 0x73, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x53, 0x68,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x20, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x54, 0x61, 0x67, 0x53, 0x68, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61,
	0x22, 0x9e, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61,
	0x67, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x47, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x6f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x6f, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x61, 0x6f, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x5d, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x44, 0x61, 0x6f, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x78,
	0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x6f, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61,
	0x6f, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x6f, 0x49, 0x64,
	0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x6f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5f, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x29, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x65, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x75, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70,
	0x75, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x2a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x61, 0x76, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x76,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x16, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22,
	0x60, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x64, 0x0a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xb1, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c,
	0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a,
	0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x44, 0x61, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x64, 0x61, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x61, 0x6f, 0x52, 0x03, 0x64, 0x61, 0x6f, 0x22, 0x5c, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x6c, 0x6c, 0x44, 0x61, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x6c, 0x6c, 0x44, 0x61, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x03, 0x64, 0x61, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x6f, 0x52, 0x03, 0x64, 0x61, 0x6f,
	0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x16, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x60, 0x0a,
	0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xa1, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x15, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x22, 0x5e, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x01,
	0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x76, 0x32, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x26, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x27, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x74, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x21, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22,
	0xa2, 0x01, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x01, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x05, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x22, 0x78, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x6c, 0x6c, 0x49, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x75, 0x6c, 0x6c, 0x49, 0x69, 0x64, 0x22, 0x72,
	0x0a, 0x25, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x02, 0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x76, 0x32, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12,
	0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xee, 0x01, 0x0a, 0x24, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x02, 0x0a, 0x12, 0x50, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x25, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x64, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xad, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6b, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x75, 0x6c,
	0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x05, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x6b, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x6b, 0x73,
	0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x19, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad,
	0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x25,
	0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x78, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01,
	0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x64, 0x61, 0x6f,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x6f, 0x52, 0x03, 0x64, 0x61, 0x6f, 0x12, 0x47, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x1c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x47,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x47, 0x65, 0x74, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x67, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x2a, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x65, 0x74, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74,
	0x57, 0x68, 0x6f, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x05, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x52,
	0x05, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x22, 0x5e, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x6c, 0x6c, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x6c, 0x6c, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x05, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x68, 0x6f,
	0x69, 0x73, 0x52, 0x05, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0x90, 0x40, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x95, 0x01, 0x0a,
	0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x12, 0x22, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x93, 0x01, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x6c,
	0x12, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x9b, 0x01, 0x0a, 0x09, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x12, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0xe4, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x3b, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f,
	0x12, 0x4d, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x2f, 0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0xf1, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x53, 0x68, 0x61, 0x12, 0x3e, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x68, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x68, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x53,
	0x12, 0x51, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x2f, 0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x73, 0x68, 0x61, 0x12, 0xda, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x12, 0x3b, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x12, 0x40,
	0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x8f, 0x01, 0x0a, 0x06, 0x54, 0x61, 0x67, 0x41, 0x6c, 0x6c, 0x12, 0x2e, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x74,
	0x61, 0x67, 0x12, 0xd5, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x54, 0x61, 0x67, 0x12, 0x38, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76,
	0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x49, 0x12, 0x47, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x61, 0x67,
	0x2f, 0x7b, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xe2, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x53, 0x68, 0x61, 0x12,
	0x3b, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x61, 0x67, 0x53, 0x68, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x53,
	0x68, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x4d, 0x12, 0x4b, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x61,
	0x67, 0x2f, 0x7b, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x68, 0x61, 0x12,
	0xce, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61,
	0x67, 0x41, 0x6c, 0x6c, 0x12, 0x38, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76,
	0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3f, 0x12, 0x3d, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x61, 0x67,
	0x12, 0xb6, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x6f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x65, 0x74, 0x44, 0x61, 0x6f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76,
	0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x44, 0x61, 0x6f, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x64, 0x61,
	0x6f, 0x2f, 0x7b, 0x64, 0x61, 0x6f, 0x49, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x12, 0xb0, 0x01, 0x0a, 0x0c, 0x44, 0x61,
	0x6f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x12, 0x34, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c,
	0x44, 0x61, 0x6f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x6f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12,
	0x2b, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x64, 0x61, 0x6f, 0x2f, 0x7b, 0x64,
	0x61, 0x6f, 0x49, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x9b, 0x01, 0x0a,
	0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x12, 0x31, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xa1, 0x01, 0x0a, 0x07, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x32, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9f,
	0x01, 0x0a, 0x0a, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x32, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20,
	0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x12, 0xb1, 0x01, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2f, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0xaf, 0x01, 0x0a, 0x0e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x36, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x50, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x6c, 0x6c, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x12, 0x24, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x70, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x91, 0x01, 0x0a, 0x03, 0x44, 0x61, 0x6f, 0x12, 0x2e,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x65, 0x74, 0x44, 0x61, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x65, 0x74, 0x44, 0x61, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2f, 0x64, 0x61, 0x6f, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8f, 0x01, 0x0a, 0x06, 0x44,
	0x61, 0x6f, 0x41, 0x6c, 0x6c, 0x12, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c,
	0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x64, 0x61, 0x6f, 0x12, 0xa1, 0x01, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x9f, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x12,
	0x32, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x12, 0x20, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x30, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47,
	0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x97,
	0x01, 0x0a, 0x08, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x30, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x6c, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0xf5, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x12, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76,
	0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x12, 0x49, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f,
	0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x12, 0xea, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x3c, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76,
	0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x12, 0x50, 0x2f, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f,
	0x74, 0x61, 0x67, 0x2f, 0x7b, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xdf, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x3c, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76,
	0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12,
	0xd3, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x12, 0x3a, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2f, 0x7b, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x49, 0x69, 0x64, 0x7d, 0x12, 0xcb, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x3a, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x12, 0xe3, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x41, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x75, 0x6c, 0x6c, 0x2f,
	0x7b, 0x70, 0x75, 0x6c, 0x6c, 0x49, 0x69, 0x64, 0x7d, 0x12, 0xdc, 0x01, 0x0a, 0x18, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x40, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x75, 0x6c, 0x6c, 0x12, 0xad, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28,
	0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xab, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x12, 0x35, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x25, 0x12, 0x23, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0xbb, 0x01, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x6b, 0x41,
	0x6c, 0x6c, 0x12, 0x32, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x66,
	0x6f, 0x72, 0x6b, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2f, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa9, 0x01, 0x0a,
	0x0a, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x6f, 0x41, 0x6c, 0x6c, 0x12, 0x32, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x6f, 0x12, 0x93, 0x01, 0x0a, 0x07, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6c, 0x6c, 0x12, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76,
	0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12,
	0x1d, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x12, 0xbe,
	0x01, 0x0a, 0x10, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x41, 0x6c, 0x6c, 0x12, 0x38, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x6c, 0x6c, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f,
	0x12, 0x2d, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0xcc, 0x01, 0x0a, 0x0d, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x38, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65,
	0x74, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e,
	0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x9b,
	0x01, 0x0a, 0x05, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x12, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x57, 0x68,
	0x6f, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74,
	0x57, 0x68, 0x6f, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f,
	0x77, 0x68, 0x6f, 0x69, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x97, 0x01, 0x0a,
	0x08, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x12, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x57,
	0x68, 0x6f, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61,
	0x2f, 0x77, 0x68, 0x6f, 0x69, 0x73, 0x12, 0xf6, 0x01, 0x0a, 0x1a, 0x50, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41, 0x2f, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x70, 0x75, 0x6c, 0x6c,
	0x2f, 0x7b, 0x70, 0x75, 0x6c, 0x6c, 0x49, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x12,
	0x84, 0x02, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76,
	0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x69, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x54, 0x12, 0x52, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74,
	0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x69, 0x74, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x12, 0x9c, 0x02, 0x0a, 0x21, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69,
	0x61, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x12, 0x58, 0x2f, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2d, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x7d, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x69, 0x61, 0x2f, 0x78, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x32, 0x3b, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitopia_query_proto_rawDescOnce sync.Once
	file_gitopia_query_proto_rawDescData = file_gitopia_query_proto_rawDesc
)

func file_gitopia_query_proto_rawDescGZIP() []byte {
	file_gitopia_query_proto_rawDescOnce.Do(func() {
		file_gitopia_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitopia_query_proto_rawDescData)
	})
	return file_gitopia_query_proto_rawDescData
}

var file_gitopia_query_proto_msgTypes = make([]protoimpl.MessageInfo, 89)
var file_gitopia_query_proto_goTypes = []interface{}{
	(*QueryCheckStorageProviderAuthorizationRequest)(nil),  // 0: gitopia.gitopia.gitopia.v2.QueryCheckStorageProviderAuthorizationRequest
	(*QueryCheckStorageProviderAuthorizationResponse)(nil), // 1: gitopia.gitopia.gitopia.v2.QueryCheckStorageProviderAuthorizationResponse
	(*QueryGetTaskRequest)(nil),                            // 2: gitopia.gitopia.gitopia.v2.QueryGetTaskRequest
	(*QueryGetTaskResponse)(nil),                           // 3: gitopia.gitopia.gitopia.v2.QueryGetTaskResponse
	(*QueryAllTaskRequest)(nil),                            // 4: gitopia.gitopia.gitopia.v2.QueryAllTaskRequest
	(*QueryAllTaskResponse)(nil),                           // 5: gitopia.gitopia.gitopia.v2.QueryAllTaskResponse
	(*QueryCheckGitServerAuthorizationRequest)(nil),        // 6: gitopia.gitopia.gitopia.v2.QueryCheckGitServerAuthorizationRequest
	(*QueryCheckGitServerAuthorizationResponse)(nil),       // 7: gitopia.gitopia.gitopia.v2.QueryCheckGitServerAuthorizationResponse
	(*QueryAllBranchRequest)(nil),                          // 8: gitopia.gitopia.gitopia.v2.QueryAllBranchRequest
	(*QueryAllBranchResponse)(nil),                         // 9: gitopia.gitopia.gitopia.v2.QueryAllBranchResponse
	(*QueryGetRepositoryBranchRequest)(nil),                // 10: gitopia.gitopia.gitopia.v2.QueryGetRepositoryBranchRequest
	(*QueryGetRepositoryBranchResponse)(nil),               // 11: gitopia.gitopia.gitopia.v2.QueryGetRepositoryBranchResponse
	(*QueryGetRepositoryBranchShaRequest)(nil),             // 12: gitopia.gitopia.gitopia.v2.QueryGetRepositoryBranchShaRequest
	(*QueryGetRepositoryBranchShaResponse)(nil),            // 13: gitopia.gitopia.gitopia.v2.QueryGetRepositoryBranchShaResponse
	(*QueryAllRepositoryBranchRequest)(nil),                // 14: gitopia.gitopia.gitopia.v2.QueryAllRepositoryBranchRequest
	(*QueryAllRepositoryBranchResponse)(nil),               // 15: gitopia.gitopia.gitopia.v2.QueryAllRepositoryBranchResponse
	(*QueryAllTagRequest)(nil),                             // 16: gitopia.gitopia.gitopia.v2.QueryAllTagRequest
	(*QueryAllTagResponse)(nil),                            // 17: gitopia.gitopia.gitopia.v2.QueryAllTagResponse
	(*QueryGetRepositoryTagRequest)(nil),                   // 18: gitopia.gitopia.gitopia.v2.QueryGetRepositoryTagRequest
	(*QueryGetRepositoryTagResponse)(nil),                  // 19: gitopia.gitopia.gitopia.v2.QueryGetRepositoryTagResponse
	(*QueryGetRepositoryTagShaRequest)(nil),                // 20: gitopia.gitopia.gitopia.v2.QueryGetRepositoryTagShaRequest
	(*QueryGetRepositoryTagShaResponse)(nil),               // 21: gitopia.gitopia.gitopia.v2.QueryGetRepositoryTagShaResponse
	(*QueryAllRepositoryTagRequest)(nil),                   // 22: gitopia.gitopia.gitopia.v2.QueryAllRepositoryTagRequest
	(*QueryAllRepositoryTagResponse)(nil),                  // 23: gitopia.gitopia.gitopia.v2.QueryAllRepositoryTagResponse
	(*QueryGetDaoMemberRequest)(nil),                       // 24: gitopia.gitopia.gitopia.v2.QueryGetDaoMemberRequest
	(*QueryGetDaoMemberResponse)(nil),                      // 25: gitopia.gitopia.gitopia.v2.QueryGetDaoMemberResponse
	(*QueryAllDaoMemberRequest)(nil),                       // 26: gitopia.gitopia.gitopia.v2.QueryAllDaoMemberRequest
	(*QueryAllDaoMemberResponse)(nil),                      // 27: gitopia.gitopia.gitopia.v2.QueryAllDaoMemberResponse
	(*QueryAllMemberRequest)(nil),                          // 28: gitopia.gitopia.gitopia.v2.QueryAllMemberRequest
	(*QueryAllMemberResponse)(nil),                         // 29: gitopia.gitopia.gitopia.v2.QueryAllMemberResponse
	(*QueryGetPullRequestMergePermissionRequest)(nil),      // 30: gitopia.gitopia.gitopia.v2.QueryGetPullRequestMergePermissionRequest
	(*QueryGetPullRequestMergePermissionResponse)(nil),     // 31: gitopia.gitopia.gitopia.v2.QueryGetPullRequestMergePermissionResponse
	(*QueryGetReleaseRequest)(nil),                         // 32: gitopia.gitopia.gitopia.v2.QueryGetReleaseRequest
	(*QueryGetReleaseResponse)(nil),                        // 33: gitopia.gitopia.gitopia.v2.QueryGetReleaseResponse
	(*QueryAllReleaseRequest)(nil),                         // 34: gitopia.gitopia.gitopia.v2.QueryAllReleaseRequest
	(*QueryAllReleaseResponse)(nil),                        // 35: gitopia.gitopia.gitopia.v2.QueryAllReleaseResponse
	(*QueryGetPullRequestRequest)(nil),                     // 36: gitopia.gitopia.gitopia.v2.QueryGetPullRequestRequest
	(*QueryGetPullRequestResponse)(nil),                    // 37: gitopia.gitopia.gitopia.v2.QueryGetPullRequestResponse
	(*QueryAllPullRequestRequest)(nil),                     // 38: gitopia.gitopia.gitopia.v2.QueryAllPullRequestRequest
	(*QueryAllPullRequestResponse)(nil),                    // 39: gitopia.gitopia.gitopia.v2.QueryAllPullRequestResponse
	(*QueryGetDaoRequest)(nil),                             // 40: gitopia.gitopia.gitopia.v2.QueryGetDaoRequest
	(*QueryGetDaoResponse)(nil),                            // 41: gitopia.gitopia.gitopia.v2.QueryGetDaoResponse
	(*QueryAllDaoRequest)(nil),                             // 42: gitopia.gitopia.gitopia.v2.QueryAllDaoRequest
	(*QueryAllDaoResponse)(nil),                            // 43: gitopia.gitopia.gitopia.v2.QueryAllDaoResponse
	(*QueryGetCommentRequest)(nil),                         // 44: gitopia.gitopia.gitopia.v2.QueryGetCommentRequest
	(*QueryGetCommentResponse)(nil),                        // 45: gitopia.gitopia.gitopia.v2.QueryGetCommentResponse
	(*QueryAllCommentRequest)(nil),                         // 46: gitopia.gitopia.gitopia.v2.QueryAllCommentRequest
	(*QueryAllCommentResponse)(nil),                        // 47: gitopia.gitopia.gitopia.v2.QueryAllCommentResponse
	(*QueryGetIssueRequest)(nil),                           // 48: gitopia.gitopia.gitopia.v2.QueryGetIssueRequest
	(*QueryGetIssueResponse)(nil),                          // 49: gitopia.gitopia.gitopia.v2.QueryGetIssueResponse
	(*QueryAllIssueRequest)(nil),                           // 50: gitopia.gitopia.gitopia.v2.QueryAllIssueRequest
	(*QueryAllIssueResponse)(nil),                          // 51: gitopia.gitopia.gitopia.v2.QueryAllIssueResponse
	(*QueryGetLatestRepositoryReleaseRequest)(nil),         // 52: gitopia.gitopia.gitopia.v2.QueryGetLatestRepositoryReleaseRequest
	(*QueryGetLatestRepositoryReleaseResponse)(nil),        // 53: gitopia.gitopia.gitopia.v2.QueryGetLatestRepositoryReleaseResponse
	(*QueryGetRepositoryReleaseRequest)(nil),               // 54: gitopia.gitopia.gitopia.v2.QueryGetRepositoryReleaseRequest
	(*QueryGetRepositoryReleaseResponse)(nil),              // 55: gitopia.gitopia.gitopia.v2.QueryGetRepositoryReleaseResponse
	(*QueryAllRepositoryReleaseRequest)(nil),               // 56: gitopia.gitopia.gitopia.v2.QueryAllRepositoryReleaseRequest
	(*QueryAllRepositoryReleaseResponse)(nil),              // 57: gitopia.gitopia.gitopia.v2.QueryAllRepositoryReleaseResponse
	(*QueryGetRepositoryIssueRequest)(nil),                 // 58: gitopia.gitopia.gitopia.v2.QueryGetRepositoryIssueRequest
	(*QueryGetRepositoryIssueResponse)(nil),                // 59: gitopia.gitopia.gitopia.v2.QueryGetRepositoryIssueResponse
	(*QueryGetRepositoryPullRequestRequest)(nil),           // 60: gitopia.gitopia.gitopia.v2.QueryGetRepositoryPullRequestRequest
	(*QueryGetRepositoryPullRequestResponse)(nil),          // 61: gitopia.gitopia.gitopia.v2.QueryGetRepositoryPullRequestResponse
	(*QueryAllRepositoryIssueRequest)(nil),                 // 62: gitopia.gitopia.gitopia.v2.QueryAllRepositoryIssueRequest
	(*IssueOptions)(nil),                                   // 63: gitopia.gitopia.gitopia.v2.IssueOptions
	(*QueryAllRepositoryIssueResponse)(nil),                // 64: gitopia.gitopia.gitopia.v2.QueryAllRepositoryIssueResponse
	(*QueryAllRepositoryPullRequestRequest)(nil),           // 65: gitopia.gitopia.gitopia.v2.QueryAllRepositoryPullRequestRequest
	(*PullRequestOptions)(nil),                             // 66: gitopia.gitopia.gitopia.v2.PullRequestOptions
	(*QueryAllRepositoryPullRequestResponse)(nil),          // 67: gitopia.gitopia.gitopia.v2.QueryAllRepositoryPullRequestResponse
	(*QueryGetRepositoryRequest)(nil),                      // 68: gitopia.gitopia.gitopia.v2.QueryGetRepositoryRequest
	(*QueryGetRepositoryResponse)(nil),                     // 69: gitopia.gitopia.gitopia.v2.QueryGetRepositoryResponse
	(*RepositoryFork)(nil),                                 // 70: gitopia.gitopia.gitopia.v2.RepositoryFork
	(*QueryGetAllForkRequest)(nil),                         // 71: gitopia.gitopia.gitopia.v2.QueryGetAllForkRequest
	(*QueryGetAllForkResponse)(nil),                        // 72: gitopia.gitopia.gitopia.v2.QueryGetAllForkResponse
	(*QueryAllRepositoryRequest)(nil),                      // 73: gitopia.gitopia.gitopia.v2.QueryAllRepositoryRequest
	(*QueryAllRepositoryResponse)(nil),                     // 74: gitopia.gitopia.gitopia.v2.QueryAllRepositoryResponse
	(*QueryGetUserRequest)(nil),                            // 75: gitopia.gitopia.gitopia.v2.QueryGetUserRequest
	(*QueryGetUserResponse)(nil),                           // 76: gitopia.gitopia.gitopia.v2.QueryGetUserResponse
	(*QueryAllUserDaoRequest)(nil),                         // 77: gitopia.gitopia.gitopia.v2.QueryAllUserDaoRequest
	(*QueryAllUserDaoResponse)(nil),                        // 78: gitopia.gitopia.gitopia.v2.QueryAllUserDaoResponse
	(*QueryAllUserRequest)(nil),                            // 79: gitopia.gitopia.gitopia.v2.QueryAllUserRequest
	(*QueryAllUserResponse)(nil),                           // 80: gitopia.gitopia.gitopia.v2.QueryAllUserResponse
	(*QueryAllAnyRepositoryRequest)(nil),                   // 81: gitopia.gitopia.gitopia.v2.QueryAllAnyRepositoryRequest
	(*QueryAllAnyRepositoryResponse)(nil),                  // 82: gitopia.gitopia.gitopia.v2.QueryAllAnyRepositoryResponse
	(*QueryGetAnyRepositoryRequest)(nil),                   // 83: gitopia.gitopia.gitopia.v2.QueryGetAnyRepositoryRequest
	(*QueryGetAnyRepositoryResponse)(nil),                  // 84: gitopia.gitopia.gitopia.v2.QueryGetAnyRepositoryResponse
	(*QueryGetWhoisRequest)(nil),                           // 85: gitopia.gitopia.gitopia.v2.QueryGetWhoisRequest
	(*QueryGetWhoisResponse)(nil),                          // 86: gitopia.gitopia.gitopia.v2.QueryGetWhoisResponse
	(*QueryAllWhoisRequest)(nil),                           // 87: gitopia.gitopia.gitopia.v2.QueryAllWhoisRequest
	(*QueryAllWhoisResponse)(nil),                          // 88: gitopia.gitopia.gitopia.v2.QueryAllWhoisResponse
	(*Task)(nil),                                           // 89: gitopia.gitopia.gitopia.v2.Task
	(*query.PageRequest)(nil),                              // 90: cosmos.base.query.v1beta1.PageRequest
	(*query.PageResponse)(nil),                             // 91: cosmos.base.query.v1beta1.PageResponse
	(*Branch)(nil),                                         // 92: gitopia.gitopia.gitopia.v2.Branch
	(*Tag)(nil),                                            // 93: gitopia.gitopia.gitopia.v2.Tag
	(*Member)(nil),                                         // 94: gitopia.gitopia.gitopia.v2.Member
	(*Release)(nil),                                        // 95: gitopia.gitopia.gitopia.v2.Release
	(*PullRequest)(nil),                                    // 96: gitopia.gitopia.gitopia.v2.PullRequest
	(*Dao)(nil),                                            // 97: gitopia.gitopia.gitopia.v2.Dao
	(*Comment)(nil),                                        // 98: gitopia.gitopia.gitopia.v2.Comment
	(*Issue)(nil),                                          // 99: gitopia.gitopia.gitopia.v2.Issue
	(*Repository)(nil),                                     // 100: gitopia.gitopia.gitopia.v2.Repository
	(*RepositoryOwner)(nil),                                // 101: gitopia.gitopia.gitopia.v2.RepositoryOwner
	(*User)(nil),                                           // 102: gitopia.gitopia.gitopia.v2.User
	(*Whois)(nil),                                          // 103: gitopia.gitopia.gitopia.v2.Whois
}
var file_gitopia_query_proto_depIdxs = []int32{
	89,  // 0: gitopia.gitopia.gitopia.v2.QueryGetTaskResponse.Task:type_name -> gitopia.gitopia.gitopia.v2.Task
	90,  // 1: gitopia.gitopia.gitopia.v2.QueryAllTaskRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	89,  // 2: gitopia.gitopia.gitopia.v2.QueryAllTaskResponse.Task:type_name -> gitopia.gitopia.gitopia.v2.Task
	91,  // 3: gitopia.gitopia.gitopia.v2.QueryAllTaskResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	90,  // 4: gitopia.gitopia.gitopia.v2.QueryAllBranchRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	92,  // 5: gitopia.gitopia.gitopia.v2.QueryAllBranchResponse.Branch:type_name -> gitopia.gitopia.gitopia.v2.Branch
	91,  // 6: gitopia.gitopia.gitopia.v2.QueryAllBranchResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	92,  // 7: gitopia.gitopia.gitopia.v2.QueryGetRepositoryBranchResponse.Branch:type_name -> gitopia.gitopia.gitopia.v2.Branch
	90,  // 8: gitopia.gitopia.gitopia.v2.QueryAllRepositoryBranchRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	92,  // 9: gitopia.gitopia.gitopia.v2.QueryAllRepositoryBranchResponse.Branch:type_name -> gitopia.gitopia.gitopia.v2.Branch
	91,  // 10: gitopia.gitopia.gitopia.v2.QueryAllRepositoryBranchResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	90,  // 11: gitopia.gitopia.gitopia.v2.QueryAllTagRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	93,  // 12: gitopia.gitopia.gitopia.v2.QueryAllTagResponse.Tag:type_name -> gitopia.gitopia.gitopia.v2.Tag
	91,  // 13: gitopia.gitopia.gitopia.v2.QueryAllTagResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	93,  // 14: gitopia.gitopia.gitopia.v2.QueryGetRepositoryTagResponse.Tag:type_name -> gitopia.gitopia.gitopia.v2.Tag
	90,  // 15: gitopia.gitopia.gitopia.v2.QueryAllRepositoryTagRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	93,  // 16: gitopia.gitopia.gitopia.v2.QueryAllRepositoryTagResponse.Tag:type_name -> gitopia.gitopia.gitopia.v2.Tag
	91,  // 17: gitopia.gitopia.gitopia.v2.QueryAllRepositoryTagResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	94,  // 18: gitopia.gitopia.gitopia.v2.QueryGetDaoMemberResponse.Member:type_name -> gitopia.gitopia.gitopia.v2.Member
	90,  // 19: gitopia.gitopia.gitopia.v2.QueryAllDaoMemberRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	94,  // 20: gitopia.gitopia.gitopia.v2.QueryAllDaoMemberResponse.Member:type_name -> gitopia.gitopia.gitopia.v2.Member
	91,  // 21: gitopia.gitopia.gitopia.v2.QueryAllDaoMemberResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	90,  // 22: gitopia.gitopia.gitopia.v2.QueryAllMemberRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	94,  // 23: gitopia.gitopia.gitopia.v2.QueryAllMemberResponse.Member:type_name -> gitopia.gitopia.gitopia.v2.Member
	91,  // 24: gitopia.gitopia.gitopia.v2.QueryAllMemberResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	95,  // 25: gitopia.gitopia.gitopia.v2.QueryGetReleaseResponse.Release:type_name -> gitopia.gitopia.gitopia.v2.Release
	90,  // 26: gitopia.gitopia.gitopia.v2.QueryAllReleaseRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	95,  // 27: gitopia.gitopia.gitopia.v2.QueryAllReleaseResponse.Release:type_name -> gitopia.gitopia.gitopia.v2.Release
	91,  // 28: gitopia.gitopia.gitopia.v2.QueryAllReleaseResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	96,  // 29: gitopia.gitopia.gitopia.v2.QueryGetPullRequestResponse.PullRequest:type_name -> gitopia.gitopia.gitopia.v2.PullRequest
	90,  // 30: gitopia.gitopia.gitopia.v2.QueryAllPullRequestRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	96,  // 31: gitopia.gitopia.gitopia.v2.QueryAllPullRequestResponse.PullRequest:type_name -> gitopia.gitopia.gitopia.v2.PullRequest
	91,  // 32: gitopia.gitopia.gitopia.v2.QueryAllPullRequestResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	97,  // 33: gitopia.gitopia.gitopia.v2.QueryGetDaoResponse.dao:type_name -> gitopia.gitopia.gitopia.v2.Dao
	90,  // 34: gitopia.gitopia.gitopia.v2.QueryAllDaoRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	97,  // 35: gitopia.gitopia.gitopia.v2.QueryAllDaoResponse.dao:type_name -> gitopia.gitopia.gitopia.v2.Dao
	91,  // 36: gitopia.gitopia.gitopia.v2.QueryAllDaoResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	98,  // 37: gitopia.gitopia.gitopia.v2.QueryGetCommentResponse.Comment:type_name -> gitopia.gitopia.gitopia.v2.Comment
	90,  // 38: gitopia.gitopia.gitopia.v2.QueryAllCommentRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	98,  // 39: gitopia.gitopia.gitopia.v2.QueryAllCommentResponse.Comment:type_name -> gitopia.gitopia.gitopia.v2.Comment
	91,  // 40: gitopia.gitopia.gitopia.v2.QueryAllCommentResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	99,  // 41: gitopia.gitopia.gitopia.v2.QueryGetIssueResponse.Issue:type_name -> gitopia.gitopia.gitopia.v2.Issue
	90,  // 42: gitopia.gitopia.gitopia.v2.QueryAllIssueRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	99,  // 43: gitopia.gitopia.gitopia.v2.QueryAllIssueResponse.Issue:type_name -> gitopia.gitopia.gitopia.v2.Issue
	91,  // 44: gitopia.gitopia.gitopia.v2.QueryAllIssueResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	95,  // 45: gitopia.gitopia.gitopia.v2.QueryGetLatestRepositoryReleaseResponse.Release:type_name -> gitopia.gitopia.gitopia.v2.Release
	95,  // 46: gitopia.gitopia.gitopia.v2.QueryGetRepositoryReleaseResponse.Release:type_name -> gitopia.gitopia.gitopia.v2.Release
	90,  // 47: gitopia.gitopia.gitopia.v2.QueryAllRepositoryReleaseRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	95,  // 48: gitopia.gitopia.gitopia.v2.QueryAllRepositoryReleaseResponse.Release:type_name -> gitopia.gitopia.gitopia.v2.Release
	91,  // 49: gitopia.gitopia.gitopia.v2.QueryAllRepositoryReleaseResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	99,  // 50: gitopia.gitopia.gitopia.v2.QueryGetRepositoryIssueResponse.Issue:type_name -> gitopia.gitopia.gitopia.v2.Issue
	96,  // 51: gitopia.gitopia.gitopia.v2.QueryGetRepositoryPullRequestResponse.PullRequest:type_name -> gitopia.gitopia.gitopia.v2.PullRequest
	63,  // 52: gitopia.gitopia.gitopia.v2.QueryAllRepositoryIssueRequest.option:type_name -> gitopia.gitopia.gitopia.v2.IssueOptions
	90,  // 53: gitopia.gitopia.gitopia.v2.QueryAllRepositoryIssueRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	99,  // 54: gitopia.gitopia.gitopia.v2.QueryAllRepositoryIssueResponse.Issue:type_name -> gitopia.gitopia.gitopia.v2.Issue
	91,  // 55: gitopia.gitopia.gitopia.v2.QueryAllRepositoryIssueResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	66,  // 56: gitopia.gitopia.gitopia.v2.QueryAllRepositoryPullRequestRequest.option:type_name -> gitopia.gitopia.gitopia.v2.PullRequestOptions
	90,  // 57: gitopia.gitopia.gitopia.v2.QueryAllRepositoryPullRequestRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	96,  // 58: gitopia.gitopia.gitopia.v2.QueryAllRepositoryPullRequestResponse.PullRequest:type_name -> gitopia.gitopia.gitopia.v2.PullRequest
	91,  // 59: gitopia.gitopia.gitopia.v2.QueryAllRepositoryPullRequestResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	100, // 60: gitopia.gitopia.gitopia.v2.QueryGetRepositoryResponse.Repository:type_name -> gitopia.gitopia.gitopia.v2.Repository
	101, // 61: gitopia.gitopia.gitopia.v2.RepositoryFork.owner:type_name -> gitopia.gitopia.gitopia.v2.RepositoryOwner
	90,  // 62: gitopia.gitopia.gitopia.v2.QueryGetAllForkRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	70,  // 63: gitopia.gitopia.gitopia.v2.QueryGetAllForkResponse.forks:type_name -> gitopia.gitopia.gitopia.v2.RepositoryFork
	91,  // 64: gitopia.gitopia.gitopia.v2.QueryGetAllForkResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	90,  // 65: gitopia.gitopia.gitopia.v2.QueryAllRepositoryRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	100, // 66: gitopia.gitopia.gitopia.v2.QueryAllRepositoryResponse.Repository:type_name -> gitopia.gitopia.gitopia.v2.Repository
	91,  // 67: gitopia.gitopia.gitopia.v2.QueryAllRepositoryResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	102, // 68: gitopia.gitopia.gitopia.v2.QueryGetUserResponse.User:type_name -> gitopia.gitopia.gitopia.v2.User
	90,  // 69: gitopia.gitopia.gitopia.v2.QueryAllUserDaoRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	97,  // 70: gitopia.gitopia.gitopia.v2.QueryAllUserDaoResponse.dao:type_name -> gitopia.gitopia.gitopia.v2.Dao
	91,  // 71: gitopia.gitopia.gitopia.v2.QueryAllUserDaoResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	90,  // 72: gitopia.gitopia.gitopia.v2.QueryAllUserRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	102, // 73: gitopia.gitopia.gitopia.v2.QueryAllUserResponse.User:type_name -> gitopia.gitopia.gitopia.v2.User
	91,  // 74: gitopia.gitopia.gitopia.v2.QueryAllUserResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	90,  // 75: gitopia.gitopia.gitopia.v2.QueryAllAnyRepositoryRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	100, // 76: gitopia.gitopia.gitopia.v2.QueryAllAnyRepositoryResponse.Repository:type_name -> gitopia.gitopia.gitopia.v2.Repository
	91,  // 77: gitopia.gitopia.gitopia.v2.QueryAllAnyRepositoryResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	100, // 78: gitopia.gitopia.gitopia.v2.QueryGetAnyRepositoryResponse.Repository:type_name -> gitopia.gitopia.gitopia.v2.Repository
	103, // 79: gitopia.gitopia.gitopia.v2.QueryGetWhoisResponse.Whois:type_name -> gitopia.gitopia.gitopia.v2.Whois
	90,  // 80: gitopia.gitopia.gitopia.v2.QueryAllWhoisRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	103, // 81: gitopia.gitopia.gitopia.v2.QueryAllWhoisResponse.Whois:type_name -> gitopia.gitopia.gitopia.v2.Whois
	91,  // 82: gitopia.gitopia.gitopia.v2.QueryAllWhoisResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	2,   // 83: gitopia.gitopia.gitopia.v2.Query.Task:input_type -> gitopia.gitopia.gitopia.v2.QueryGetTaskRequest
	4,   // 84: gitopia.gitopia.gitopia.v2.Query.TaskAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllTaskRequest
	8,   // 85: gitopia.gitopia.gitopia.v2.Query.BranchAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllBranchRequest
	10,  // 86: gitopia.gitopia.gitopia.v2.Query.RepositoryBranch:input_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryBranchRequest
	12,  // 87: gitopia.gitopia.gitopia.v2.Query.RepositoryBranchSha:input_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryBranchShaRequest
	14,  // 88: gitopia.gitopia.gitopia.v2.Query.RepositoryBranchAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllRepositoryBranchRequest
	16,  // 89: gitopia.gitopia.gitopia.v2.Query.TagAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllTagRequest
	18,  // 90: gitopia.gitopia.gitopia.v2.Query.RepositoryTag:input_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryTagRequest
	20,  // 91: gitopia.gitopia.gitopia.v2.Query.RepositoryTagSha:input_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryTagShaRequest
	22,  // 92: gitopia.gitopia.gitopia.v2.Query.RepositoryTagAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllRepositoryTagRequest
	24,  // 93: gitopia.gitopia.gitopia.v2.Query.DaoMember:input_type -> gitopia.gitopia.gitopia.v2.QueryGetDaoMemberRequest
	26,  // 94: gitopia.gitopia.gitopia.v2.Query.DaoMemberAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllDaoMemberRequest
	28,  // 95: gitopia.gitopia.gitopia.v2.Query.MemberAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllMemberRequest
	32,  // 96: gitopia.gitopia.gitopia.v2.Query.Release:input_type -> gitopia.gitopia.gitopia.v2.QueryGetReleaseRequest
	34,  // 97: gitopia.gitopia.gitopia.v2.Query.ReleaseAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllReleaseRequest
	36,  // 98: gitopia.gitopia.gitopia.v2.Query.PullRequest:input_type -> gitopia.gitopia.gitopia.v2.QueryGetPullRequestRequest
	38,  // 99: gitopia.gitopia.gitopia.v2.Query.PullRequestAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllPullRequestRequest
	40,  // 100: gitopia.gitopia.gitopia.v2.Query.Dao:input_type -> gitopia.gitopia.gitopia.v2.QueryGetDaoRequest
	42,  // 101: gitopia.gitopia.gitopia.v2.Query.DaoAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllDaoRequest
	44,  // 102: gitopia.gitopia.gitopia.v2.Query.Comment:input_type -> gitopia.gitopia.gitopia.v2.QueryGetCommentRequest
	46,  // 103: gitopia.gitopia.gitopia.v2.Query.CommentAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllCommentRequest
	48,  // 104: gitopia.gitopia.gitopia.v2.Query.Issue:input_type -> gitopia.gitopia.gitopia.v2.QueryGetIssueRequest
	50,  // 105: gitopia.gitopia.gitopia.v2.Query.IssueAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllIssueRequest
	52,  // 106: gitopia.gitopia.gitopia.v2.Query.RepositoryReleaseLatest:input_type -> gitopia.gitopia.gitopia.v2.QueryGetLatestRepositoryReleaseRequest
	54,  // 107: gitopia.gitopia.gitopia.v2.Query.RepositoryRelease:input_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryReleaseRequest
	56,  // 108: gitopia.gitopia.gitopia.v2.Query.RepositoryReleaseAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllRepositoryReleaseRequest
	58,  // 109: gitopia.gitopia.gitopia.v2.Query.RepositoryIssue:input_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryIssueRequest
	62,  // 110: gitopia.gitopia.gitopia.v2.Query.RepositoryIssueAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllRepositoryIssueRequest
	60,  // 111: gitopia.gitopia.gitopia.v2.Query.RepositoryPullRequest:input_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryPullRequestRequest
	65,  // 112: gitopia.gitopia.gitopia.v2.Query.RepositoryPullRequestAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllRepositoryPullRequestRequest
	68,  // 113: gitopia.gitopia.gitopia.v2.Query.Repository:input_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryRequest
	73,  // 114: gitopia.gitopia.gitopia.v2.Query.RepositoryAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllRepositoryRequest
	71,  // 115: gitopia.gitopia.gitopia.v2.Query.ForkAll:input_type -> gitopia.gitopia.gitopia.v2.QueryGetAllForkRequest
	75,  // 116: gitopia.gitopia.gitopia.v2.Query.User:input_type -> gitopia.gitopia.gitopia.v2.QueryGetUserRequest
	77,  // 117: gitopia.gitopia.gitopia.v2.Query.UserDaoAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllUserDaoRequest
	79,  // 118: gitopia.gitopia.gitopia.v2.Query.UserAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllUserRequest
	81,  // 119: gitopia.gitopia.gitopia.v2.Query.AnyRepositoryAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllAnyRepositoryRequest
	83,  // 120: gitopia.gitopia.gitopia.v2.Query.AnyRepository:input_type -> gitopia.gitopia.gitopia.v2.QueryGetAnyRepositoryRequest
	85,  // 121: gitopia.gitopia.gitopia.v2.Query.Whois:input_type -> gitopia.gitopia.gitopia.v2.QueryGetWhoisRequest
	87,  // 122: gitopia.gitopia.gitopia.v2.Query.WhoisAll:input_type -> gitopia.gitopia.gitopia.v2.QueryAllWhoisRequest
	30,  // 123: gitopia.gitopia.gitopia.v2.Query.PullRequestMergePermission:input_type -> gitopia.gitopia.gitopia.v2.QueryGetPullRequestMergePermissionRequest
	6,   // 124: gitopia.gitopia.gitopia.v2.Query.CheckGitServerAuthorization:input_type -> gitopia.gitopia.gitopia.v2.QueryCheckGitServerAuthorizationRequest
	0,   // 125: gitopia.gitopia.gitopia.v2.Query.CheckStorageProviderAuthorization:input_type -> gitopia.gitopia.gitopia.v2.QueryCheckStorageProviderAuthorizationRequest
	3,   // 126: gitopia.gitopia.gitopia.v2.Query.Task:output_type -> gitopia.gitopia.gitopia.v2.QueryGetTaskResponse
	5,   // 127: gitopia.gitopia.gitopia.v2.Query.TaskAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllTaskResponse
	9,   // 128: gitopia.gitopia.gitopia.v2.Query.BranchAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllBranchResponse
	11,  // 129: gitopia.gitopia.gitopia.v2.Query.RepositoryBranch:output_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryBranchResponse
	13,  // 130: gitopia.gitopia.gitopia.v2.Query.RepositoryBranchSha:output_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryBranchShaResponse
	15,  // 131: gitopia.gitopia.gitopia.v2.Query.RepositoryBranchAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllRepositoryBranchResponse
	17,  // 132: gitopia.gitopia.gitopia.v2.Query.TagAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllTagResponse
	19,  // 133: gitopia.gitopia.gitopia.v2.Query.RepositoryTag:output_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryTagResponse
	21,  // 134: gitopia.gitopia.gitopia.v2.Query.RepositoryTagSha:output_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryTagShaResponse
	23,  // 135: gitopia.gitopia.gitopia.v2.Query.RepositoryTagAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllRepositoryTagResponse
	25,  // 136: gitopia.gitopia.gitopia.v2.Query.DaoMember:output_type -> gitopia.gitopia.gitopia.v2.QueryGetDaoMemberResponse
	27,  // 137: gitopia.gitopia.gitopia.v2.Query.DaoMemberAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllDaoMemberResponse
	29,  // 138: gitopia.gitopia.gitopia.v2.Query.MemberAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllMemberResponse
	33,  // 139: gitopia.gitopia.gitopia.v2.Query.Release:output_type -> gitopia.gitopia.gitopia.v2.QueryGetReleaseResponse
	35,  // 140: gitopia.gitopia.gitopia.v2.Query.ReleaseAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllReleaseResponse
	37,  // 141: gitopia.gitopia.gitopia.v2.Query.PullRequest:output_type -> gitopia.gitopia.gitopia.v2.QueryGetPullRequestResponse
	39,  // 142: gitopia.gitopia.gitopia.v2.Query.PullRequestAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllPullRequestResponse
	41,  // 143: gitopia.gitopia.gitopia.v2.Query.Dao:output_type -> gitopia.gitopia.gitopia.v2.QueryGetDaoResponse
	43,  // 144: gitopia.gitopia.gitopia.v2.Query.DaoAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllDaoResponse
	45,  // 145: gitopia.gitopia.gitopia.v2.Query.Comment:output_type -> gitopia.gitopia.gitopia.v2.QueryGetCommentResponse
	47,  // 146: gitopia.gitopia.gitopia.v2.Query.CommentAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllCommentResponse
	49,  // 147: gitopia.gitopia.gitopia.v2.Query.Issue:output_type -> gitopia.gitopia.gitopia.v2.QueryGetIssueResponse
	51,  // 148: gitopia.gitopia.gitopia.v2.Query.IssueAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllIssueResponse
	53,  // 149: gitopia.gitopia.gitopia.v2.Query.RepositoryReleaseLatest:output_type -> gitopia.gitopia.gitopia.v2.QueryGetLatestRepositoryReleaseResponse
	55,  // 150: gitopia.gitopia.gitopia.v2.Query.RepositoryRelease:output_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryReleaseResponse
	57,  // 151: gitopia.gitopia.gitopia.v2.Query.RepositoryReleaseAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllRepositoryReleaseResponse
	59,  // 152: gitopia.gitopia.gitopia.v2.Query.RepositoryIssue:output_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryIssueResponse
	64,  // 153: gitopia.gitopia.gitopia.v2.Query.RepositoryIssueAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllRepositoryIssueResponse
	61,  // 154: gitopia.gitopia.gitopia.v2.Query.RepositoryPullRequest:output_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryPullRequestResponse
	67,  // 155: gitopia.gitopia.gitopia.v2.Query.RepositoryPullRequestAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllRepositoryPullRequestResponse
	69,  // 156: gitopia.gitopia.gitopia.v2.Query.Repository:output_type -> gitopia.gitopia.gitopia.v2.QueryGetRepositoryResponse
	74,  // 157: gitopia.gitopia.gitopia.v2.Query.RepositoryAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllRepositoryResponse
	72,  // 158: gitopia.gitopia.gitopia.v2.Query.ForkAll:output_type -> gitopia.gitopia.gitopia.v2.QueryGetAllForkResponse
	76,  // 159: gitopia.gitopia.gitopia.v2.Query.User:output_type -> gitopia.gitopia.gitopia.v2.QueryGetUserResponse
	78,  // 160: gitopia.gitopia.gitopia.v2.Query.UserDaoAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllUserDaoResponse
	80,  // 161: gitopia.gitopia.gitopia.v2.Query.UserAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllUserResponse
	82,  // 162: gitopia.gitopia.gitopia.v2.Query.AnyRepositoryAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllAnyRepositoryResponse
	84,  // 163: gitopia.gitopia.gitopia.v2.Query.AnyRepository:output_type -> gitopia.gitopia.gitopia.v2.QueryGetAnyRepositoryResponse
	86,  // 164: gitopia.gitopia.gitopia.v2.Query.Whois:output_type -> gitopia.gitopia.gitopia.v2.QueryGetWhoisResponse
	88,  // 165: gitopia.gitopia.gitopia.v2.Query.WhoisAll:output_type -> gitopia.gitopia.gitopia.v2.QueryAllWhoisResponse
	31,  // 166: gitopia.gitopia.gitopia.v2.Query.PullRequestMergePermission:output_type -> gitopia.gitopia.gitopia.v2.QueryGetPullRequestMergePermissionResponse
	7,   // 167: gitopia.gitopia.gitopia.v2.Query.CheckGitServerAuthorization:output_type -> gitopia.gitopia.gitopia.v2.QueryCheckGitServerAuthorizationResponse
	1,   // 168: gitopia.gitopia.gitopia.v2.Query.CheckStorageProviderAuthorization:output_type -> gitopia.gitopia.gitopia.v2.QueryCheckStorageProviderAuthorizationResponse
	126, // [126:169] is the sub-list for method output_type
	83,  // [83:126] is the sub-list for method input_type
	83,  // [83:83] is the sub-list for extension type_name
	83,  // [83:83] is the sub-list for extension extendee
	0,   // [0:83] is the sub-list for field type_name
}

func init() { file_gitopia_query_proto_init() }
func file_gitopia_query_proto_init() {
	if File_gitopia_query_proto != nil {
		return
	}
	file_gitopia_task_proto_init()
	file_gitopia_branch_proto_init()
	file_gitopia_tag_proto_init()
	file_gitopia_member_proto_init()
	file_gitopia_release_proto_init()
	file_gitopia_pullRequest_proto_init()
	file_gitopia_dao_proto_init()
	file_gitopia_comment_proto_init()
	file_gitopia_issue_proto_init()
	file_gitopia_repository_proto_init()
	file_gitopia_user_proto_init()
	file_gitopia_whois_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gitopia_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCheckStorageProviderAuthorizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCheckStorageProviderAuthorizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCheckGitServerAuthorizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCheckGitServerAuthorizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryBranchShaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryBranchShaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllRepositoryBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllRepositoryBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryTagShaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryTagShaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllRepositoryTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllRepositoryTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetDaoMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetDaoMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllDaoMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllDaoMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetPullRequestMergePermissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetPullRequestMergePermissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetPullRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetPullRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllPullRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllPullRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetDaoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetDaoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllDaoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllDaoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetLatestRepositoryReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetLatestRepositoryReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllRepositoryReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllRepositoryReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryPullRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryPullRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllRepositoryIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllRepositoryIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllRepositoryPullRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullRequestOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllRepositoryPullRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryFork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetAllForkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetAllForkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllUserDaoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllUserDaoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllAnyRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllAnyRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetAnyRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetAnyRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetWhoisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetWhoisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllWhoisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitopia_query_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllWhoisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitopia_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   89,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitopia_query_proto_goTypes,
		DependencyIndexes: file_gitopia_query_proto_depIdxs,
		MessageInfos:      file_gitopia_query_proto_msgTypes,
	}.Build()
	File_gitopia_query_proto = out.File
	file_gitopia_query_proto_rawDesc = nil
	file_gitopia_query_proto_goTypes = nil
	file_gitopia_query_proto_depIdxs = nil
}
