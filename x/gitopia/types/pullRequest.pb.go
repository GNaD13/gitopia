// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/pullRequest.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PullRequest struct {
	Creator             string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                  uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Iid                 string `protobuf:"bytes,3,opt,name=iid,proto3" json:"iid,omitempty"`
	Title               string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	State               string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Description         string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Locked              string `protobuf:"bytes,7,opt,name=locked,proto3" json:"locked,omitempty"`
	Comments            string `protobuf:"bytes,8,opt,name=comments,proto3" json:"comments,omitempty"`
	Issues              string `protobuf:"bytes,9,opt,name=issues,proto3" json:"issues,omitempty"`
	RepositoryId        string `protobuf:"bytes,10,opt,name=repositoryId,proto3" json:"repositoryId,omitempty"`
	Labels              string `protobuf:"bytes,11,opt,name=labels,proto3" json:"labels,omitempty"`
	Assignees           string `protobuf:"bytes,12,opt,name=assignees,proto3" json:"assignees,omitempty"`
	Reviewers           string `protobuf:"bytes,13,opt,name=reviewers,proto3" json:"reviewers,omitempty"`
	Draft               string `protobuf:"bytes,14,opt,name=draft,proto3" json:"draft,omitempty"`
	CreatedAt           string `protobuf:"bytes,15,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt           string `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	ClosedAt            string `protobuf:"bytes,17,opt,name=closedAt,proto3" json:"closedAt,omitempty"`
	ClosedBy            string `protobuf:"bytes,18,opt,name=closedBy,proto3" json:"closedBy,omitempty"`
	MergedAt            string `protobuf:"bytes,19,opt,name=mergedAt,proto3" json:"mergedAt,omitempty"`
	MergedBy            string `protobuf:"bytes,20,opt,name=mergedBy,proto3" json:"mergedBy,omitempty"`
	MergeCommitSha      string `protobuf:"bytes,21,opt,name=mergeCommitSha,proto3" json:"mergeCommitSha,omitempty"`
	MaintainerCanModify string `protobuf:"bytes,22,opt,name=maintainerCanModify,proto3" json:"maintainerCanModify,omitempty"`
	Head                string `protobuf:"bytes,23,opt,name=head,proto3" json:"head,omitempty"`
	Base                string `protobuf:"bytes,24,opt,name=base,proto3" json:"base,omitempty"`
	Extensions          string `protobuf:"bytes,25,opt,name=extensions,proto3" json:"extensions,omitempty"`
}

func (m *PullRequest) Reset()         { *m = PullRequest{} }
func (m *PullRequest) String() string { return proto.CompactTextString(m) }
func (*PullRequest) ProtoMessage()    {}
func (*PullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee729f91ddeb1e95, []int{0}
}
func (m *PullRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullRequest.Merge(m, src)
}
func (m *PullRequest) XXX_Size() int {
	return m.Size()
}
func (m *PullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullRequest proto.InternalMessageInfo

func (m *PullRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *PullRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PullRequest) GetIid() string {
	if m != nil {
		return m.Iid
	}
	return ""
}

func (m *PullRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PullRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *PullRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PullRequest) GetLocked() string {
	if m != nil {
		return m.Locked
	}
	return ""
}

func (m *PullRequest) GetComments() string {
	if m != nil {
		return m.Comments
	}
	return ""
}

func (m *PullRequest) GetIssues() string {
	if m != nil {
		return m.Issues
	}
	return ""
}

func (m *PullRequest) GetRepositoryId() string {
	if m != nil {
		return m.RepositoryId
	}
	return ""
}

func (m *PullRequest) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *PullRequest) GetAssignees() string {
	if m != nil {
		return m.Assignees
	}
	return ""
}

func (m *PullRequest) GetReviewers() string {
	if m != nil {
		return m.Reviewers
	}
	return ""
}

func (m *PullRequest) GetDraft() string {
	if m != nil {
		return m.Draft
	}
	return ""
}

func (m *PullRequest) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *PullRequest) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *PullRequest) GetClosedAt() string {
	if m != nil {
		return m.ClosedAt
	}
	return ""
}

func (m *PullRequest) GetClosedBy() string {
	if m != nil {
		return m.ClosedBy
	}
	return ""
}

func (m *PullRequest) GetMergedAt() string {
	if m != nil {
		return m.MergedAt
	}
	return ""
}

func (m *PullRequest) GetMergedBy() string {
	if m != nil {
		return m.MergedBy
	}
	return ""
}

func (m *PullRequest) GetMergeCommitSha() string {
	if m != nil {
		return m.MergeCommitSha
	}
	return ""
}

func (m *PullRequest) GetMaintainerCanModify() string {
	if m != nil {
		return m.MaintainerCanModify
	}
	return ""
}

func (m *PullRequest) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

func (m *PullRequest) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

func (m *PullRequest) GetExtensions() string {
	if m != nil {
		return m.Extensions
	}
	return ""
}

func init() {
	proto.RegisterType((*PullRequest)(nil), "gitopia.gitopia.gitopia.PullRequest")
}

func init() { proto.RegisterFile("gitopia/pullRequest.proto", fileDescriptor_ee729f91ddeb1e95) }

var fileDescriptor_ee729f91ddeb1e95 = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x97, 0xae, 0xed, 0x56, 0x77, 0x94, 0xe1, 0x95, 0xed, 0x6d, 0x42, 0x51, 0xb5, 0x03,
	0x9a, 0x38, 0xb4, 0x48, 0x7c, 0x02, 0x3a, 0x2e, 0x1c, 0x90, 0x50, 0xb9, 0x71, 0x73, 0xe3, 0xb7,
	0xd4, 0x22, 0x89, 0x83, 0xed, 0xc0, 0xf2, 0x2d, 0xf8, 0x46, 0x5c, 0x39, 0xee, 0xc8, 0x11, 0xb5,
	0x5f, 0x04, 0xf9, 0x39, 0x4d, 0xcb, 0xc4, 0xc9, 0xef, 0xff, 0xfb, 0xbd, 0x17, 0xeb, 0x45, 0x32,
	0xbb, 0x4c, 0x95, 0xd3, 0xa5, 0x12, 0xb3, 0xb2, 0xca, 0xb2, 0x05, 0x7e, 0xad, 0xd0, 0xba, 0x69,
	0x69, 0xb4, 0xd3, 0xfc, 0xa2, 0x51, 0xd3, 0x47, 0xe7, 0xd5, 0x38, 0xd5, 0xa9, 0xa6, 0x9e, 0x99,
	0xaf, 0x42, 0xfb, 0xf5, 0xcf, 0x1e, 0x1b, 0x7e, 0xdc, 0x7d, 0x84, 0x03, 0x3b, 0x4a, 0x0c, 0x0a,
	0xa7, 0x0d, 0x44, 0x93, 0xe8, 0x66, 0xb0, 0xd8, 0x46, 0x3e, 0x62, 0x1d, 0x25, 0xa1, 0x33, 0x89,
	0x6e, 0xba, 0x8b, 0x8e, 0x92, 0xfc, 0x94, 0x1d, 0x2a, 0x25, 0xe1, 0x90, 0xba, 0x7c, 0xc9, 0xc7,
	0xac, 0xe7, 0x94, 0xcb, 0x10, 0xba, 0xc4, 0x42, 0xf0, 0xd4, 0x3a, 0xe1, 0x10, 0x7a, 0x81, 0x52,
	0xe0, 0x13, 0x36, 0x94, 0x68, 0x13, 0xa3, 0x4a, 0xa7, 0x74, 0x01, 0x7d, 0x72, 0xfb, 0x88, 0x9f,
	0xb3, 0x7e, 0xa6, 0x93, 0x2f, 0x28, 0xe1, 0x88, 0x64, 0x93, 0xf8, 0x15, 0x3b, 0x4e, 0x74, 0x9e,
	0x63, 0xe1, 0x2c, 0x1c, 0x93, 0x69, 0xb3, 0x9f, 0x51, 0xd6, 0x56, 0x68, 0x61, 0x10, 0x66, 0x42,
	0xe2, 0xd7, 0xec, 0xc4, 0x60, 0xa9, 0xad, 0x72, 0xda, 0xd4, 0xef, 0x25, 0x30, 0xb2, 0xff, 0x30,
	0xba, 0x4f, 0x2c, 0x31, 0xb3, 0x30, 0x6c, 0xee, 0xa3, 0xc4, 0x5f, 0xb0, 0x81, 0xb0, 0x56, 0xa5,
	0x05, 0xa2, 0x85, 0x13, 0x52, 0x3b, 0xe0, 0xad, 0xc1, 0x6f, 0x0a, 0xbf, 0xa3, 0xb1, 0xf0, 0x24,
	0xd8, 0x16, 0xf8, 0xdd, 0xa5, 0x11, 0x77, 0x0e, 0x46, 0x61, 0x77, 0x0a, 0x7e, 0x86, 0x7e, 0x2a,
	0xca, 0xb7, 0x0e, 0x9e, 0x86, 0x99, 0x16, 0x78, 0x5b, 0x95, 0xb2, 0xb1, 0xa7, 0xc1, 0xb6, 0x80,
	0xb6, 0xcf, 0xb4, 0x25, 0xf9, 0xac, 0xd9, 0xbe, 0xc9, 0x3b, 0x37, 0xaf, 0x81, 0xef, 0xbb, 0x79,
	0xed, 0x5d, 0x8e, 0x26, 0xa5, 0xb9, 0xb3, 0xe0, 0xb6, 0x79, 0xe7, 0xe6, 0x35, 0x8c, 0xf7, 0xdd,
	0xbc, 0xe6, 0x2f, 0xd9, 0x88, 0xea, 0x5b, 0x9d, 0xe7, 0xca, 0x7d, 0x5a, 0x09, 0x78, 0x4e, 0x1d,
	0x8f, 0x28, 0x7f, 0xcd, 0xce, 0x72, 0xa1, 0x0a, 0x27, 0x54, 0x81, 0xe6, 0x56, 0x14, 0x1f, 0xb4,
	0x54, 0x77, 0x35, 0x9c, 0x53, 0xf3, 0xff, 0x14, 0xe7, 0xac, 0xbb, 0x42, 0x21, 0xe1, 0x82, 0x5a,
	0xa8, 0xf6, 0x6c, 0x29, 0x2c, 0x02, 0x04, 0xe6, 0x6b, 0x1e, 0x33, 0x86, 0xf7, 0x0e, 0x0b, 0xab,
	0x74, 0x61, 0xe1, 0x92, 0xcc, 0x1e, 0x99, 0xbf, 0xfb, 0xb5, 0x8e, 0xa3, 0x87, 0x75, 0x1c, 0xfd,
	0x59, 0xc7, 0xd1, 0x8f, 0x4d, 0x7c, 0xf0, 0xb0, 0x89, 0x0f, 0x7e, 0x6f, 0xe2, 0x83, 0xcf, 0xaf,
	0x52, 0xe5, 0x56, 0xd5, 0x72, 0x9a, 0xe8, 0x7c, 0xb6, 0x7d, 0x30, 0xdb, 0xf3, 0xbe, 0xad, 0x5c,
	0x5d, 0xa2, 0x5d, 0xf6, 0xe9, 0x39, 0xbc, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x5c, 0xac,
	0x61, 0x5a, 0x03, 0x00, 0x00,
}

func (m *PullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extensions) > 0 {
		i -= len(m.Extensions)
		copy(dAtA[i:], m.Extensions)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Extensions)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.Base) > 0 {
		i -= len(m.Base)
		copy(dAtA[i:], m.Base)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Base)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Head) > 0 {
		i -= len(m.Head)
		copy(dAtA[i:], m.Head)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Head)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.MaintainerCanModify) > 0 {
		i -= len(m.MaintainerCanModify)
		copy(dAtA[i:], m.MaintainerCanModify)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.MaintainerCanModify)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.MergeCommitSha) > 0 {
		i -= len(m.MergeCommitSha)
		copy(dAtA[i:], m.MergeCommitSha)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.MergeCommitSha)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.MergedBy) > 0 {
		i -= len(m.MergedBy)
		copy(dAtA[i:], m.MergedBy)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.MergedBy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.MergedAt) > 0 {
		i -= len(m.MergedAt)
		copy(dAtA[i:], m.MergedAt)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.MergedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ClosedBy) > 0 {
		i -= len(m.ClosedBy)
		copy(dAtA[i:], m.ClosedBy)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.ClosedBy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ClosedAt) > 0 {
		i -= len(m.ClosedAt)
		copy(dAtA[i:], m.ClosedAt)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.ClosedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Draft) > 0 {
		i -= len(m.Draft)
		copy(dAtA[i:], m.Draft)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Draft)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Reviewers) > 0 {
		i -= len(m.Reviewers)
		copy(dAtA[i:], m.Reviewers)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Reviewers)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Assignees) > 0 {
		i -= len(m.Assignees)
		copy(dAtA[i:], m.Assignees)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Assignees)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Labels) > 0 {
		i -= len(m.Labels)
		copy(dAtA[i:], m.Labels)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Labels)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.RepositoryId) > 0 {
		i -= len(m.RepositoryId)
		copy(dAtA[i:], m.RepositoryId)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.RepositoryId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Issues) > 0 {
		i -= len(m.Issues)
		copy(dAtA[i:], m.Issues)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Issues)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Comments) > 0 {
		i -= len(m.Comments)
		copy(dAtA[i:], m.Comments)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Comments)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Locked) > 0 {
		i -= len(m.Locked)
		copy(dAtA[i:], m.Locked)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Locked)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Iid) > 0 {
		i -= len(m.Iid)
		copy(dAtA[i:], m.Iid)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Iid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPullRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovPullRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PullRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovPullRequest(uint64(m.Id))
	}
	l = len(m.Iid)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Locked)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Comments)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Issues)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.RepositoryId)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Labels)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Assignees)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Reviewers)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Draft)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	l = len(m.ClosedAt)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	l = len(m.ClosedBy)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	l = len(m.MergedAt)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	l = len(m.MergedBy)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	l = len(m.MergeCommitSha)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	l = len(m.MaintainerCanModify)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Head)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Base)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Extensions)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	return n
}

func sovPullRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPullRequest(x uint64) (n int) {
	return sovPullRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issues = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepositoryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assignees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reviewers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reviewers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draft", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Draft = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClosedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClosedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MergedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MergedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergeCommitSha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MergeCommitSha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaintainerCanModify", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaintainerCanModify = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPullRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPullRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPullRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPullRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPullRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPullRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPullRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPullRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPullRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPullRequest = fmt.Errorf("proto: unexpected end of group")
)
