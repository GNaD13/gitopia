// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/repository.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RepositoryOwner_Type int32

const (
	RepositoryOwner_USER         RepositoryOwner_Type = 0
	RepositoryOwner_ORGANIZATION RepositoryOwner_Type = 1
)

var RepositoryOwner_Type_name = map[int32]string{
	0: "USER",
	1: "ORGANIZATION",
}

var RepositoryOwner_Type_value = map[string]int32{
	"USER":         0,
	"ORGANIZATION": 1,
}

func (x RepositoryOwner_Type) String() string {
	return proto.EnumName(RepositoryOwner_Type_name, int32(x))
}

func (RepositoryOwner_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{1, 0}
}

type RepositoryCollaborator_Permission int32

const (
	RepositoryCollaborator_READ     RepositoryCollaborator_Permission = 0
	RepositoryCollaborator_TRIAGE   RepositoryCollaborator_Permission = 1
	RepositoryCollaborator_WRITE    RepositoryCollaborator_Permission = 2
	RepositoryCollaborator_MAINTAIN RepositoryCollaborator_Permission = 3
	RepositoryCollaborator_ADMIN    RepositoryCollaborator_Permission = 4
)

var RepositoryCollaborator_Permission_name = map[int32]string{
	0: "READ",
	1: "TRIAGE",
	2: "WRITE",
	3: "MAINTAIN",
	4: "ADMIN",
}

var RepositoryCollaborator_Permission_value = map[string]int32{
	"READ":     0,
	"TRIAGE":   1,
	"WRITE":    2,
	"MAINTAIN": 3,
	"ADMIN":    4,
}

func (x RepositoryCollaborator_Permission) String() string {
	return proto.EnumName(RepositoryCollaborator_Permission_name, int32(x))
}

func (RepositoryCollaborator_Permission) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{6, 0}
}

type Repository struct {
	Creator       string                    `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id            uint64                    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Owner         *RepositoryOwner          `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Description   string                    `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Forks         []uint64                  `protobuf:"varint,6,rep,packed,name=forks,proto3" json:"forks,omitempty"`
	Branches      []*RepositoryBranch       `protobuf:"bytes,7,rep,name=branches,proto3" json:"branches,omitempty"`
	Tags          []*RepositoryTag          `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Subscribers   string                    `protobuf:"bytes,9,opt,name=subscribers,proto3" json:"subscribers,omitempty"`
	Commits       string                    `protobuf:"bytes,10,opt,name=commits,proto3" json:"commits,omitempty"`
	Issues        []*RepositoryIssue        `protobuf:"bytes,11,rep,name=issues,proto3" json:"issues,omitempty"`
	PullRequests  []*RepositoryPullRequest  `protobuf:"bytes,12,rep,name=pullRequests,proto3" json:"pullRequests,omitempty"`
	IssuesCount   uint64                    `protobuf:"varint,13,opt,name=issuesCount,proto3" json:"issuesCount,omitempty"`
	PullsCount    uint64                    `protobuf:"varint,14,opt,name=pullsCount,proto3" json:"pullsCount,omitempty"`
	Labels        []*RepositoryLabel        `protobuf:"bytes,15,rep,name=labels,proto3" json:"labels,omitempty"`
	LabelsCount   uint64                    `protobuf:"varint,16,opt,name=labelsCount,proto3" json:"labelsCount,omitempty"`
	Releases      string                    `protobuf:"bytes,17,opt,name=releases,proto3" json:"releases,omitempty"`
	CreatedAt     int64                     `protobuf:"varint,18,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     int64                     `protobuf:"varint,19,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	PushedAt      int64                     `protobuf:"varint,20,opt,name=pushedAt,proto3" json:"pushedAt,omitempty"`
	Stargazers    []uint64                  `protobuf:"varint,21,rep,packed,name=stargazers,proto3" json:"stargazers,omitempty"`
	Archived      bool                      `protobuf:"varint,22,opt,name=archived,proto3" json:"archived,omitempty"`
	License       string                    `protobuf:"bytes,23,opt,name=license,proto3" json:"license,omitempty"`
	DefaultBranch string                    `protobuf:"bytes,24,opt,name=defaultBranch,proto3" json:"defaultBranch,omitempty"`
	Parent        uint64                    `protobuf:"varint,25,opt,name=parent,proto3" json:"parent,omitempty"`
	Fork          bool                      `protobuf:"varint,26,opt,name=fork,proto3" json:"fork,omitempty"`
	Collaborators []*RepositoryCollaborator `protobuf:"bytes,27,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
	Extensions    string                    `protobuf:"bytes,28,opt,name=extensions,proto3" json:"extensions,omitempty"`
}

func (m *Repository) Reset()         { *m = Repository{} }
func (m *Repository) String() string { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()    {}
func (*Repository) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{0}
}
func (m *Repository) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Repository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Repository.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Repository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Repository.Merge(m, src)
}
func (m *Repository) XXX_Size() int {
	return m.Size()
}
func (m *Repository) XXX_DiscardUnknown() {
	xxx_messageInfo_Repository.DiscardUnknown(m)
}

var xxx_messageInfo_Repository proto.InternalMessageInfo

func (m *Repository) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Repository) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Repository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Repository) GetOwner() *RepositoryOwner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Repository) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Repository) GetForks() []uint64 {
	if m != nil {
		return m.Forks
	}
	return nil
}

func (m *Repository) GetBranches() []*RepositoryBranch {
	if m != nil {
		return m.Branches
	}
	return nil
}

func (m *Repository) GetTags() []*RepositoryTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Repository) GetSubscribers() string {
	if m != nil {
		return m.Subscribers
	}
	return ""
}

func (m *Repository) GetCommits() string {
	if m != nil {
		return m.Commits
	}
	return ""
}

func (m *Repository) GetIssues() []*RepositoryIssue {
	if m != nil {
		return m.Issues
	}
	return nil
}

func (m *Repository) GetPullRequests() []*RepositoryPullRequest {
	if m != nil {
		return m.PullRequests
	}
	return nil
}

func (m *Repository) GetIssuesCount() uint64 {
	if m != nil {
		return m.IssuesCount
	}
	return 0
}

func (m *Repository) GetPullsCount() uint64 {
	if m != nil {
		return m.PullsCount
	}
	return 0
}

func (m *Repository) GetLabels() []*RepositoryLabel {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Repository) GetLabelsCount() uint64 {
	if m != nil {
		return m.LabelsCount
	}
	return 0
}

func (m *Repository) GetReleases() string {
	if m != nil {
		return m.Releases
	}
	return ""
}

func (m *Repository) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Repository) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Repository) GetPushedAt() int64 {
	if m != nil {
		return m.PushedAt
	}
	return 0
}

func (m *Repository) GetStargazers() []uint64 {
	if m != nil {
		return m.Stargazers
	}
	return nil
}

func (m *Repository) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Repository) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *Repository) GetDefaultBranch() string {
	if m != nil {
		return m.DefaultBranch
	}
	return ""
}

func (m *Repository) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *Repository) GetFork() bool {
	if m != nil {
		return m.Fork
	}
	return false
}

func (m *Repository) GetCollaborators() []*RepositoryCollaborator {
	if m != nil {
		return m.Collaborators
	}
	return nil
}

func (m *Repository) GetExtensions() string {
	if m != nil {
		return m.Extensions
	}
	return ""
}

type RepositoryOwner struct {
	Id   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type RepositoryOwner_Type `protobuf:"varint,2,opt,name=type,proto3,enum=gitopia.gitopia.gitopia.RepositoryOwner_Type" json:"type,omitempty"`
}

func (m *RepositoryOwner) Reset()         { *m = RepositoryOwner{} }
func (m *RepositoryOwner) String() string { return proto.CompactTextString(m) }
func (*RepositoryOwner) ProtoMessage()    {}
func (*RepositoryOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{1}
}
func (m *RepositoryOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepositoryOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepositoryOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryOwner.Merge(m, src)
}
func (m *RepositoryOwner) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryOwner.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryOwner proto.InternalMessageInfo

func (m *RepositoryOwner) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RepositoryOwner) GetType() RepositoryOwner_Type {
	if m != nil {
		return m.Type
	}
	return RepositoryOwner_USER
}

type RepositoryBranch struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sha  string `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (m *RepositoryBranch) Reset()         { *m = RepositoryBranch{} }
func (m *RepositoryBranch) String() string { return proto.CompactTextString(m) }
func (*RepositoryBranch) ProtoMessage()    {}
func (*RepositoryBranch) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{2}
}
func (m *RepositoryBranch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryBranch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepositoryBranch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepositoryBranch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryBranch.Merge(m, src)
}
func (m *RepositoryBranch) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryBranch) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryBranch.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryBranch proto.InternalMessageInfo

func (m *RepositoryBranch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RepositoryBranch) GetSha() string {
	if m != nil {
		return m.Sha
	}
	return ""
}

type RepositoryTag struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sha  string `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (m *RepositoryTag) Reset()         { *m = RepositoryTag{} }
func (m *RepositoryTag) String() string { return proto.CompactTextString(m) }
func (*RepositoryTag) ProtoMessage()    {}
func (*RepositoryTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{3}
}
func (m *RepositoryTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepositoryTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepositoryTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryTag.Merge(m, src)
}
func (m *RepositoryTag) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryTag) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryTag.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryTag proto.InternalMessageInfo

func (m *RepositoryTag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RepositoryTag) GetSha() string {
	if m != nil {
		return m.Sha
	}
	return ""
}

type RepositoryIssue struct {
	Iid uint64 `protobuf:"varint,1,opt,name=iid,proto3" json:"iid,omitempty"`
	Id  uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RepositoryIssue) Reset()         { *m = RepositoryIssue{} }
func (m *RepositoryIssue) String() string { return proto.CompactTextString(m) }
func (*RepositoryIssue) ProtoMessage()    {}
func (*RepositoryIssue) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{4}
}
func (m *RepositoryIssue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryIssue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepositoryIssue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepositoryIssue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryIssue.Merge(m, src)
}
func (m *RepositoryIssue) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryIssue) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryIssue.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryIssue proto.InternalMessageInfo

func (m *RepositoryIssue) GetIid() uint64 {
	if m != nil {
		return m.Iid
	}
	return 0
}

func (m *RepositoryIssue) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RepositoryPullRequest struct {
	Iid uint64 `protobuf:"varint,1,opt,name=iid,proto3" json:"iid,omitempty"`
	Id  uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RepositoryPullRequest) Reset()         { *m = RepositoryPullRequest{} }
func (m *RepositoryPullRequest) String() string { return proto.CompactTextString(m) }
func (*RepositoryPullRequest) ProtoMessage()    {}
func (*RepositoryPullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{5}
}
func (m *RepositoryPullRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryPullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepositoryPullRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepositoryPullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryPullRequest.Merge(m, src)
}
func (m *RepositoryPullRequest) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryPullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryPullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryPullRequest proto.InternalMessageInfo

func (m *RepositoryPullRequest) GetIid() uint64 {
	if m != nil {
		return m.Iid
	}
	return 0
}

func (m *RepositoryPullRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RepositoryCollaborator struct {
	Id         string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Permission RepositoryCollaborator_Permission `protobuf:"varint,2,opt,name=permission,proto3,enum=gitopia.gitopia.gitopia.RepositoryCollaborator_Permission" json:"permission,omitempty"`
}

func (m *RepositoryCollaborator) Reset()         { *m = RepositoryCollaborator{} }
func (m *RepositoryCollaborator) String() string { return proto.CompactTextString(m) }
func (*RepositoryCollaborator) ProtoMessage()    {}
func (*RepositoryCollaborator) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{6}
}
func (m *RepositoryCollaborator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryCollaborator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepositoryCollaborator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepositoryCollaborator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryCollaborator.Merge(m, src)
}
func (m *RepositoryCollaborator) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryCollaborator) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryCollaborator.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryCollaborator proto.InternalMessageInfo

func (m *RepositoryCollaborator) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RepositoryCollaborator) GetPermission() RepositoryCollaborator_Permission {
	if m != nil {
		return m.Permission
	}
	return RepositoryCollaborator_READ
}

type RepositoryLabel struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Color       string `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RepositoryLabel) Reset()         { *m = RepositoryLabel{} }
func (m *RepositoryLabel) String() string { return proto.CompactTextString(m) }
func (*RepositoryLabel) ProtoMessage()    {}
func (*RepositoryLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{7}
}
func (m *RepositoryLabel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepositoryLabel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepositoryLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryLabel.Merge(m, src)
}
func (m *RepositoryLabel) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryLabel.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryLabel proto.InternalMessageInfo

func (m *RepositoryLabel) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RepositoryLabel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RepositoryLabel) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *RepositoryLabel) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterEnum("gitopia.gitopia.gitopia.RepositoryOwner_Type", RepositoryOwner_Type_name, RepositoryOwner_Type_value)
	proto.RegisterEnum("gitopia.gitopia.gitopia.RepositoryCollaborator_Permission", RepositoryCollaborator_Permission_name, RepositoryCollaborator_Permission_value)
	proto.RegisterType((*Repository)(nil), "gitopia.gitopia.gitopia.Repository")
	proto.RegisterType((*RepositoryOwner)(nil), "gitopia.gitopia.gitopia.RepositoryOwner")
	proto.RegisterType((*RepositoryBranch)(nil), "gitopia.gitopia.gitopia.RepositoryBranch")
	proto.RegisterType((*RepositoryTag)(nil), "gitopia.gitopia.gitopia.RepositoryTag")
	proto.RegisterType((*RepositoryIssue)(nil), "gitopia.gitopia.gitopia.RepositoryIssue")
	proto.RegisterType((*RepositoryPullRequest)(nil), "gitopia.gitopia.gitopia.RepositoryPullRequest")
	proto.RegisterType((*RepositoryCollaborator)(nil), "gitopia.gitopia.gitopia.RepositoryCollaborator")
	proto.RegisterType((*RepositoryLabel)(nil), "gitopia.gitopia.gitopia.RepositoryLabel")
}

func init() { proto.RegisterFile("gitopia/repository.proto", fileDescriptor_771033d6361900fa) }

var fileDescriptor_771033d6361900fa = []byte{
	// 828 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0x8f, 0x13, 0x27, 0x4d, 0xde, 0x26, 0x5b, 0x33, 0xa4, 0xdb, 0x61, 0xa9, 0x22, 0xcb, 0x42,
	0xc8, 0x20, 0xe1, 0x48, 0x5b, 0x21, 0x41, 0x0f, 0x08, 0xb7, 0x1b, 0x2a, 0x4b, 0x34, 0x5b, 0x0d,
	0xa9, 0x90, 0xf6, 0xe6, 0x38, 0xd3, 0xc4, 0xc2, 0xf1, 0x98, 0x99, 0x31, 0x74, 0xf9, 0x04, 0x1c,
	0xf9, 0x58, 0x1c, 0x38, 0xec, 0x91, 0x23, 0xda, 0xfd, 0x22, 0x68, 0xc6, 0x5e, 0xc7, 0x49, 0x17,
	0xc9, 0x9c, 0xfc, 0xfe, 0xfd, 0x9e, 0xdf, 0xff, 0x01, 0xbc, 0x8e, 0x25, 0xcb, 0xe2, 0x70, 0xca,
	0x69, 0xc6, 0x44, 0x2c, 0x19, 0xbf, 0xf2, 0x32, 0xce, 0x24, 0x43, 0x8f, 0x4b, 0x8d, 0x77, 0xf0,
	0x3d, 0x1d, 0xaf, 0xd9, 0x9a, 0x69, 0x9b, 0xa9, 0xa2, 0x0a, 0x73, 0xe7, 0xba, 0x0f, 0x40, 0x2a,
	0x1f, 0x08, 0xc3, 0x83, 0x88, 0xd3, 0x50, 0x32, 0x8e, 0x0d, 0xdb, 0x70, 0x07, 0xe4, 0x8e, 0x45,
	0xc7, 0xd0, 0x8e, 0x57, 0xb8, 0x6d, 0x1b, 0xae, 0x49, 0xda, 0xf1, 0x0a, 0x21, 0x30, 0xd3, 0x70,
	0x4b, 0x71, 0x47, 0x9b, 0x69, 0x1a, 0x7d, 0x03, 0x5d, 0xf6, 0x6b, 0x4a, 0x39, 0x36, 0x6d, 0xc3,
	0x3d, 0x3a, 0x73, 0xbd, 0xff, 0x88, 0xc5, 0xdb, 0xfd, 0xf1, 0x42, 0xd9, 0x93, 0x02, 0x86, 0x6c,
	0x38, 0x5a, 0x51, 0x11, 0xf1, 0x38, 0x93, 0x31, 0x4b, 0x71, 0x57, 0xbb, 0xae, 0x8b, 0xd0, 0x18,
	0xba, 0x6f, 0x19, 0xff, 0x49, 0xe0, 0x9e, 0xdd, 0x71, 0x4d, 0x52, 0x30, 0x68, 0x06, 0xfd, 0x25,
	0x0f, 0xd3, 0x68, 0x43, 0x05, 0x7e, 0x60, 0x77, 0xdc, 0xa3, 0xb3, 0xcf, 0x1a, 0xfc, 0xfa, 0xb9,
	0x86, 0x90, 0x0a, 0x8a, 0x9e, 0x81, 0x29, 0xc3, 0xb5, 0xc0, 0x7d, 0xed, 0xe2, 0xd3, 0x06, 0x2e,
	0x16, 0xe1, 0x9a, 0x68, 0x8c, 0x0a, 0x5d, 0xe4, 0x4b, 0x15, 0xe8, 0x92, 0x72, 0x81, 0x07, 0x45,
	0xe8, 0x35, 0x91, 0x2e, 0x2d, 0xdb, 0x6e, 0x63, 0x29, 0x30, 0x94, 0xa5, 0x2d, 0x58, 0xf4, 0x2d,
	0xf4, 0x62, 0x21, 0x72, 0x2a, 0xf0, 0x91, 0xfe, 0x73, 0x93, 0xba, 0x05, 0x0a, 0x40, 0x4a, 0x1c,
	0x22, 0x30, 0xcc, 0xf2, 0x24, 0x21, 0xf4, 0xe7, 0x9c, 0x0a, 0x29, 0xf0, 0x50, 0xfb, 0xf1, 0x1a,
	0xf8, 0x79, 0xbd, 0x83, 0x91, 0x3d, 0x1f, 0x2a, 0xa3, 0xc2, 0xfb, 0x0b, 0x96, 0xa7, 0x12, 0x8f,
	0x74, 0xe7, 0xeb, 0x22, 0x34, 0x01, 0x50, 0x88, 0xd2, 0xe0, 0x58, 0x1b, 0xd4, 0x24, 0x2a, 0xaf,
	0x24, 0x5c, 0xd2, 0x44, 0xe0, 0x87, 0x8d, 0xf3, 0xfa, 0x5e, 0x01, 0x48, 0x89, 0x53, 0x31, 0x14,
	0x54, 0xf1, 0x0b, 0xab, 0x88, 0xa1, 0x26, 0x42, 0xa7, 0xd0, 0xe7, 0x34, 0xa1, 0xa1, 0xa0, 0x02,
	0x7f, 0xa0, 0xcb, 0x5a, 0xf1, 0xe8, 0x09, 0x0c, 0xf4, 0xf4, 0xd2, 0x95, 0x2f, 0x31, 0xb2, 0x0d,
	0xb7, 0x43, 0x76, 0x02, 0xa5, 0xcd, 0xb3, 0x55, 0xa9, 0xfd, 0xb0, 0xd0, 0x56, 0x02, 0xe5, 0x37,
	0xcb, 0xc5, 0x46, 0x2b, 0xc7, 0x5a, 0x59, 0xf1, 0x2a, 0x6f, 0x21, 0x43, 0xbe, 0x0e, 0x7f, 0x53,
	0xad, 0x7e, 0xa4, 0x27, 0xb1, 0x26, 0x51, 0xd8, 0x90, 0x47, 0x9b, 0xf8, 0x17, 0xba, 0xc2, 0x27,
	0xb6, 0xe1, 0xf6, 0x49, 0xc5, 0xab, 0x29, 0x48, 0xe2, 0x88, 0xa6, 0x82, 0xe2, 0xc7, 0xc5, 0x14,
	0x94, 0x2c, 0xfa, 0x04, 0x46, 0x2b, 0xfa, 0x36, 0xcc, 0x13, 0x59, 0x0c, 0x26, 0xc6, 0x5a, 0xbf,
	0x2f, 0x44, 0x27, 0xd0, 0xcb, 0x42, 0x4e, 0x53, 0x89, 0x3f, 0xd2, 0xc5, 0x28, 0x39, 0xb5, 0x8e,
	0x6a, 0x17, 0xf0, 0xa9, 0xfe, 0x9f, 0xa6, 0xd1, 0x1b, 0x18, 0x45, 0x2c, 0x49, 0xc2, 0x25, 0xe3,
	0x6a, 0x85, 0x05, 0xfe, 0x58, 0xb7, 0x61, 0xda, 0xa0, 0x0d, 0x2f, 0x6a, 0x38, 0xb2, 0xef, 0x45,
	0xa5, 0x4f, 0xdf, 0x49, 0x9a, 0x8a, 0x98, 0xa5, 0x02, 0x3f, 0xd1, 0x51, 0xd6, 0x24, 0xce, 0xef,
	0x06, 0x3c, 0x3c, 0x58, 0xf0, 0xf2, 0x7a, 0x14, 0x27, 0x45, 0x5d, 0x0f, 0x1f, 0x4c, 0x79, 0x95,
	0x51, 0x7d, 0x4f, 0x8e, 0xcf, 0xbe, 0x68, 0x7a, 0x28, 0xbc, 0xc5, 0x55, 0x46, 0x89, 0x86, 0x3a,
	0x0e, 0x98, 0x8a, 0x43, 0x7d, 0x30, 0xdf, 0xfc, 0x30, 0x23, 0x56, 0x0b, 0x59, 0x30, 0xbc, 0x20,
	0x2f, 0xfd, 0x79, 0x70, 0xe9, 0x2f, 0x82, 0x8b, 0xb9, 0x65, 0x38, 0x5f, 0x81, 0x75, 0xb8, 0xef,
	0xd5, 0xe1, 0x32, 0x6a, 0x87, 0xcb, 0x82, 0x8e, 0xd8, 0x84, 0x3a, 0x9a, 0x01, 0x51, 0xa4, 0xf3,
	0x25, 0x8c, 0xf6, 0xd6, 0xbc, 0x21, 0xec, 0x69, 0x3d, 0x75, 0xbd, 0xa3, 0xca, 0x28, 0x2e, 0x73,
	0x37, 0x89, 0x22, 0x0f, 0x4f, 0xa9, 0xf3, 0x35, 0x3c, 0xba, 0x77, 0x21, 0x1b, 0x40, 0xff, 0x32,
	0xe0, 0xe4, 0xfe, 0xae, 0xbd, 0x57, 0xf2, 0x4b, 0x80, 0x8c, 0xf2, 0x6d, 0x2c, 0x54, 0x97, 0xca,
	0xc2, 0x3f, 0xfb, 0x9f, 0xa3, 0xe0, 0xbd, 0xae, 0x3c, 0x90, 0x9a, 0x37, 0xe7, 0x3b, 0x80, 0x9d,
	0x46, 0x75, 0x84, 0xcc, 0xfc, 0x73, 0xab, 0x85, 0x00, 0x7a, 0x0b, 0x12, 0xf8, 0x2f, 0x67, 0x96,
	0x81, 0x06, 0xd0, 0xfd, 0x91, 0x04, 0x8b, 0x99, 0xd5, 0x46, 0x43, 0xe8, 0xbf, 0xf2, 0x83, 0xf9,
	0xc2, 0x0f, 0xe6, 0x56, 0x47, 0x29, 0xfc, 0xf3, 0x57, 0xc1, 0xdc, 0x32, 0x9d, 0x6d, 0xbd, 0x7c,
	0xfa, 0x14, 0xd4, 0xd2, 0xd8, 0x7f, 0x77, 0xda, 0xb5, 0x3e, 0x8c, 0xa1, 0x1b, 0xb1, 0x84, 0xf1,
	0xf2, 0x31, 0x2a, 0x98, 0xc3, 0xd7, 0xc4, 0x7c, 0xef, 0x35, 0x79, 0x7e, 0xfe, 0xe7, 0xcd, 0xc4,
	0xb8, 0xbe, 0x99, 0x18, 0xff, 0xdc, 0x4c, 0x8c, 0x3f, 0x6e, 0x27, 0xad, 0xeb, 0xdb, 0x49, 0xeb,
	0xef, 0xdb, 0x49, 0xeb, 0xf2, 0xf3, 0x75, 0x2c, 0x37, 0xf9, 0xd2, 0x8b, 0xd8, 0x76, 0x7a, 0xf7,
	0xd4, 0xde, 0x7d, 0xdf, 0x55, 0x94, 0x9a, 0x43, 0xb1, 0xec, 0xe9, 0x97, 0xf4, 0xe9, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x12, 0xae, 0x4d, 0x16, 0x94, 0x07, 0x00, 0x00,
}

func (m *Repository) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Repository) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Repository) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extensions) > 0 {
		i -= len(m.Extensions)
		copy(dAtA[i:], m.Extensions)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Extensions)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.Collaborators) > 0 {
		for iNdEx := len(m.Collaborators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collaborators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if m.Fork {
		i--
		if m.Fork {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.Parent != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Parent))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.DefaultBranch) > 0 {
		i -= len(m.DefaultBranch)
		copy(dAtA[i:], m.DefaultBranch)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.DefaultBranch)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.License) > 0 {
		i -= len(m.License)
		copy(dAtA[i:], m.License)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.License)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.Archived {
		i--
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.Stargazers) > 0 {
		dAtA2 := make([]byte, len(m.Stargazers)*10)
		var j1 int
		for _, num := range m.Stargazers {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintRepository(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.PushedAt != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.PushedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.CreatedAt != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.Releases) > 0 {
		i -= len(m.Releases)
		copy(dAtA[i:], m.Releases)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Releases)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.LabelsCount != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.LabelsCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Labels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.PullsCount != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.PullsCount))
		i--
		dAtA[i] = 0x70
	}
	if m.IssuesCount != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.IssuesCount))
		i--
		dAtA[i] = 0x68
	}
	if len(m.PullRequests) > 0 {
		for iNdEx := len(m.PullRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PullRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Issues) > 0 {
		for iNdEx := len(m.Issues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Issues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Commits) > 0 {
		i -= len(m.Commits)
		copy(dAtA[i:], m.Commits)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Commits)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Subscribers) > 0 {
		i -= len(m.Subscribers)
		copy(dAtA[i:], m.Subscribers)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Subscribers)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Branches) > 0 {
		for iNdEx := len(m.Branches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Branches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Forks) > 0 {
		dAtA4 := make([]byte, len(m.Forks)*10)
		var j3 int
		for _, num := range m.Forks {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintRepository(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RepositoryOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RepositoryBranch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryBranch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryBranch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sha) > 0 {
		i -= len(m.Sha)
		copy(dAtA[i:], m.Sha)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Sha)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RepositoryTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryTag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryTag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sha) > 0 {
		i -= len(m.Sha)
		copy(dAtA[i:], m.Sha)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Sha)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RepositoryIssue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryIssue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryIssue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Iid != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Iid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RepositoryPullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryPullRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryPullRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Iid != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Iid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RepositoryCollaborator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryCollaborator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryCollaborator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permission != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RepositoryLabel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRepository(dAtA []byte, offset int, v uint64) int {
	offset -= sovRepository(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Repository) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovRepository(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if len(m.Forks) > 0 {
		l = 0
		for _, e := range m.Forks {
			l += sovRepository(uint64(e))
		}
		n += 1 + sovRepository(uint64(l)) + l
	}
	if len(m.Branches) > 0 {
		for _, e := range m.Branches {
			l = e.Size()
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	l = len(m.Subscribers)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Commits)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if len(m.Issues) > 0 {
		for _, e := range m.Issues {
			l = e.Size()
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if len(m.PullRequests) > 0 {
		for _, e := range m.PullRequests {
			l = e.Size()
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if m.IssuesCount != 0 {
		n += 1 + sovRepository(uint64(m.IssuesCount))
	}
	if m.PullsCount != 0 {
		n += 1 + sovRepository(uint64(m.PullsCount))
	}
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if m.LabelsCount != 0 {
		n += 2 + sovRepository(uint64(m.LabelsCount))
	}
	l = len(m.Releases)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 2 + sovRepository(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovRepository(uint64(m.UpdatedAt))
	}
	if m.PushedAt != 0 {
		n += 2 + sovRepository(uint64(m.PushedAt))
	}
	if len(m.Stargazers) > 0 {
		l = 0
		for _, e := range m.Stargazers {
			l += sovRepository(uint64(e))
		}
		n += 2 + sovRepository(uint64(l)) + l
	}
	if m.Archived {
		n += 3
	}
	l = len(m.License)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.DefaultBranch)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	if m.Parent != 0 {
		n += 2 + sovRepository(uint64(m.Parent))
	}
	if m.Fork {
		n += 3
	}
	if len(m.Collaborators) > 0 {
		for _, e := range m.Collaborators {
			l = e.Size()
			n += 2 + l + sovRepository(uint64(l))
		}
	}
	l = len(m.Extensions)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	return n
}

func (m *RepositoryOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRepository(uint64(m.Type))
	}
	return n
}

func (m *RepositoryBranch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Sha)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	return n
}

func (m *RepositoryTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Sha)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	return n
}

func (m *RepositoryIssue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iid != 0 {
		n += 1 + sovRepository(uint64(m.Iid))
	}
	if m.Id != 0 {
		n += 1 + sovRepository(uint64(m.Id))
	}
	return n
}

func (m *RepositoryPullRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iid != 0 {
		n += 1 + sovRepository(uint64(m.Iid))
	}
	if m.Id != 0 {
		n += 1 + sovRepository(uint64(m.Id))
	}
	return n
}

func (m *RepositoryCollaborator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.Permission != 0 {
		n += 1 + sovRepository(uint64(m.Permission))
	}
	return n
}

func (m *RepositoryLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRepository(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	return n
}

func sovRepository(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRepository(x uint64) (n int) {
	return sovRepository(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Repository) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Repository: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Repository: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &RepositoryOwner{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Forks = append(m.Forks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRepository
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRepository
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Forks) == 0 {
					m.Forks = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Forks = append(m.Forks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Forks", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Branches = append(m.Branches, &RepositoryBranch{})
			if err := m.Branches[len(m.Branches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &RepositoryTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscribers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issues = append(m.Issues, &RepositoryIssue{})
			if err := m.Issues[len(m.Issues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PullRequests = append(m.PullRequests, &RepositoryPullRequest{})
			if err := m.PullRequests[len(m.PullRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuesCount", wireType)
			}
			m.IssuesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullsCount", wireType)
			}
			m.PullsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PullsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, &RepositoryLabel{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelsCount", wireType)
			}
			m.LabelsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LabelsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Releases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Releases = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushedAt", wireType)
			}
			m.PushedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stargazers = append(m.Stargazers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRepository
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRepository
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Stargazers) == 0 {
					m.Stargazers = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stargazers = append(m.Stargazers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stargazers", wireType)
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBranch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultBranch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fork", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fork = bool(v != 0)
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collaborators = append(m.Collaborators, &RepositoryCollaborator{})
			if err := m.Collaborators[len(m.Collaborators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RepositoryOwner_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryBranch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryBranch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryBranch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryIssue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryIssue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryIssue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			m.Iid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryPullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryPullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryPullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			m.Iid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryCollaborator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryCollaborator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryCollaborator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= RepositoryCollaborator_Permission(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryLabel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryLabel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryLabel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRepository(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRepository
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRepository
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRepository
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRepository        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRepository          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRepository = fmt.Errorf("proto: unexpected end of group")
)
