// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/repository.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Repository struct {
	Creator       string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id            uint64            `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name          string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Owner         string            `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Description   string            `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Forks         []uint64          `protobuf:"varint,6,rep,packed,name=forks,proto3" json:"forks,omitempty"`
	Branches      map[string]string `protobuf:"bytes,7,rep,name=branches,proto3" json:"branches,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tags          string            `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
	Subscribers   string            `protobuf:"bytes,9,opt,name=subscribers,proto3" json:"subscribers,omitempty"`
	Commits       string            `protobuf:"bytes,10,opt,name=commits,proto3" json:"commits,omitempty"`
	Issues        []uint64          `protobuf:"varint,11,rep,packed,name=issues,proto3" json:"issues,omitempty"`
	Pulls         []uint64          `protobuf:"varint,12,rep,packed,name=pulls,proto3" json:"pulls,omitempty"`
	Labels        string            `protobuf:"bytes,13,opt,name=labels,proto3" json:"labels,omitempty"`
	Releases      string            `protobuf:"bytes,14,opt,name=releases,proto3" json:"releases,omitempty"`
	CreatedAt     int64             `protobuf:"varint,15,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     int64             `protobuf:"varint,16,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	PushedAt      int64             `protobuf:"varint,17,opt,name=pushedAt,proto3" json:"pushedAt,omitempty"`
	Stargazers    []uint64          `protobuf:"varint,18,rep,packed,name=stargazers,proto3" json:"stargazers,omitempty"`
	Archived      bool              `protobuf:"varint,19,opt,name=archived,proto3" json:"archived,omitempty"`
	License       string            `protobuf:"bytes,20,opt,name=license,proto3" json:"license,omitempty"`
	DefaultBranch string            `protobuf:"bytes,21,opt,name=defaultBranch,proto3" json:"defaultBranch,omitempty"`
	Extensions    string            `protobuf:"bytes,22,opt,name=extensions,proto3" json:"extensions,omitempty"`
}

func (m *Repository) Reset()         { *m = Repository{} }
func (m *Repository) String() string { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()    {}
func (*Repository) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{0}
}
func (m *Repository) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Repository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Repository.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Repository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Repository.Merge(m, src)
}
func (m *Repository) XXX_Size() int {
	return m.Size()
}
func (m *Repository) XXX_DiscardUnknown() {
	xxx_messageInfo_Repository.DiscardUnknown(m)
}

var xxx_messageInfo_Repository proto.InternalMessageInfo

func (m *Repository) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Repository) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Repository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Repository) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Repository) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Repository) GetForks() []uint64 {
	if m != nil {
		return m.Forks
	}
	return nil
}

func (m *Repository) GetBranches() map[string]string {
	if m != nil {
		return m.Branches
	}
	return nil
}

func (m *Repository) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *Repository) GetSubscribers() string {
	if m != nil {
		return m.Subscribers
	}
	return ""
}

func (m *Repository) GetCommits() string {
	if m != nil {
		return m.Commits
	}
	return ""
}

func (m *Repository) GetIssues() []uint64 {
	if m != nil {
		return m.Issues
	}
	return nil
}

func (m *Repository) GetPulls() []uint64 {
	if m != nil {
		return m.Pulls
	}
	return nil
}

func (m *Repository) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *Repository) GetReleases() string {
	if m != nil {
		return m.Releases
	}
	return ""
}

func (m *Repository) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Repository) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Repository) GetPushedAt() int64 {
	if m != nil {
		return m.PushedAt
	}
	return 0
}

func (m *Repository) GetStargazers() []uint64 {
	if m != nil {
		return m.Stargazers
	}
	return nil
}

func (m *Repository) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Repository) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *Repository) GetDefaultBranch() string {
	if m != nil {
		return m.DefaultBranch
	}
	return ""
}

func (m *Repository) GetExtensions() string {
	if m != nil {
		return m.Extensions
	}
	return ""
}

func init() {
	proto.RegisterType((*Repository)(nil), "gitopia.gitopia.gitopia.Repository")
	proto.RegisterMapType((map[string]string)(nil), "gitopia.gitopia.gitopia.Repository.BranchesEntry")
}

func init() { proto.RegisterFile("gitopia/repository.proto", fileDescriptor_771033d6361900fa) }

var fileDescriptor_771033d6361900fa = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0xf3, 0xd5, 0x64, 0x43, 0x4a, 0x59, 0x42, 0x19, 0x45, 0xc8, 0xb2, 0x10, 0x07, 0x8b,
	0x83, 0x23, 0xe0, 0x82, 0xe0, 0x44, 0x05, 0x47, 0x2e, 0x3e, 0x72, 0x5b, 0xdb, 0x53, 0x67, 0x55,
	0xc7, 0x6b, 0xed, 0xac, 0x4b, 0xc3, 0xaf, 0xe0, 0x67, 0x21, 0x4e, 0x3d, 0x72, 0x44, 0xc9, 0x1f,
	0x41, 0xbb, 0x76, 0xdc, 0x14, 0xa9, 0x27, 0xcf, 0x7b, 0x6f, 0x66, 0xfc, 0x66, 0x76, 0x97, 0x41,
	0x2e, 0x8d, 0xaa, 0xa4, 0x58, 0x69, 0xac, 0x14, 0x49, 0xa3, 0xf4, 0x36, 0xaa, 0xb4, 0x32, 0x8a,
	0x3f, 0x6f, 0x95, 0xe8, 0xbf, 0xef, 0x72, 0x91, 0xab, 0x5c, 0xb9, 0x9c, 0x95, 0x8d, 0x9a, 0xf4,
	0x97, 0xbf, 0x47, 0x8c, 0xc5, 0x5d, 0x0f, 0x0e, 0xec, 0x24, 0xd5, 0x28, 0x8c, 0xd2, 0xe0, 0x05,
	0x5e, 0x38, 0x8d, 0x0f, 0x90, 0x9f, 0xb2, 0xbe, 0xcc, 0xa0, 0x1f, 0x78, 0xe1, 0x30, 0xee, 0xcb,
	0x8c, 0x73, 0x36, 0x2c, 0xc5, 0x06, 0x61, 0xe0, 0xd2, 0x5c, 0xcc, 0x17, 0x6c, 0xa4, 0xbe, 0x97,
	0xa8, 0x61, 0xe8, 0xc8, 0x06, 0xf0, 0x80, 0xcd, 0x32, 0xa4, 0x54, 0xcb, 0xca, 0x48, 0x55, 0xc2,
	0xc8, 0x69, 0xc7, 0x94, 0xad, 0xbb, 0x54, 0xfa, 0x8a, 0x60, 0x1c, 0x0c, 0xc2, 0x61, 0xdc, 0x00,
	0xfe, 0x95, 0x4d, 0x12, 0x2d, 0xca, 0x74, 0x8d, 0x04, 0x27, 0xc1, 0x20, 0x9c, 0xbd, 0x7d, 0x13,
	0x3d, 0x30, 0x5c, 0x74, 0x37, 0x42, 0x74, 0xd1, 0xd6, 0x7c, 0x29, 0x8d, 0xde, 0xc6, 0x5d, 0x0b,
	0x6b, 0xd8, 0x88, 0x9c, 0x60, 0xd2, 0x18, 0xb6, 0xb1, 0xb5, 0x46, 0x75, 0x62, 0x8d, 0x24, 0xa8,
	0x09, 0xa6, 0x8d, 0xb5, 0x23, 0xca, 0x2d, 0x44, 0x6d, 0x36, 0xd2, 0x10, 0xb0, 0x76, 0x21, 0x0d,
	0xe4, 0xe7, 0x6c, 0x2c, 0x89, 0x6a, 0x24, 0x98, 0x39, 0xd7, 0x2d, 0xb2, 0xc3, 0x54, 0x75, 0x51,
	0x10, 0x3c, 0x6a, 0x86, 0x71, 0xc0, 0x66, 0x17, 0x22, 0xc1, 0x82, 0x60, 0xee, 0xda, 0xb4, 0x88,
	0x2f, 0xd9, 0x44, 0x63, 0x81, 0x82, 0x90, 0xe0, 0xd4, 0x29, 0x1d, 0xe6, 0x2f, 0xd8, 0xd4, 0x6d,
	0x1f, 0xb3, 0x4f, 0x06, 0x1e, 0x07, 0x5e, 0x38, 0x88, 0xef, 0x08, 0xab, 0xd6, 0x55, 0xd6, 0xaa,
	0x67, 0x8d, 0xda, 0x11, 0xb6, 0x6f, 0x55, 0xd3, 0xda, 0x89, 0x4f, 0x9c, 0xd8, 0x61, 0xee, 0x33,
	0x46, 0x46, 0xe8, 0x5c, 0xfc, 0xb0, 0x43, 0x73, 0x67, 0xf3, 0x88, 0xb1, 0xb5, 0x42, 0xa7, 0x6b,
	0x79, 0x8d, 0x19, 0x3c, 0x0d, 0xbc, 0x70, 0x12, 0x77, 0xd8, 0xee, 0xa3, 0x90, 0x29, 0x96, 0x84,
	0xb0, 0x68, 0xf6, 0xd1, 0x42, 0xfe, 0x8a, 0xcd, 0x33, 0xbc, 0x14, 0x75, 0x61, 0x9a, 0x13, 0x80,
	0x67, 0x4e, 0xbf, 0x4f, 0xda, 0x7f, 0xe3, 0x8d, 0xc1, 0x92, 0xa4, 0x2a, 0x09, 0xce, 0x5d, 0xca,
	0x11, 0xb3, 0xfc, 0xc8, 0xe6, 0xf7, 0x0e, 0x90, 0x9f, 0xb1, 0xc1, 0x15, 0x6e, 0xdb, 0xdb, 0x68,
	0x43, 0xbb, 0xe0, 0x6b, 0x51, 0xd4, 0xe8, 0x2e, 0xe3, 0x34, 0x6e, 0xc0, 0x87, 0xfe, 0x7b, 0xef,
	0xe2, 0xf3, 0xaf, 0x9d, 0xef, 0xdd, 0xee, 0x7c, 0xef, 0xef, 0xce, 0xf7, 0x7e, 0xee, 0xfd, 0xde,
	0xed, 0xde, 0xef, 0xfd, 0xd9, 0xfb, 0xbd, 0x6f, 0xaf, 0x73, 0x69, 0xd6, 0x75, 0x12, 0xa5, 0x6a,
	0xb3, 0x3a, 0x3c, 0x9d, 0xc3, 0xf7, 0xa6, 0x8b, 0xcc, 0xb6, 0x42, 0x4a, 0xc6, 0xee, 0x65, 0xbc,
	0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0x45, 0x18, 0x90, 0xa2, 0x64, 0x03, 0x00, 0x00,
}

func (m *Repository) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Repository) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Repository) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extensions) > 0 {
		i -= len(m.Extensions)
		copy(dAtA[i:], m.Extensions)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Extensions)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.DefaultBranch) > 0 {
		i -= len(m.DefaultBranch)
		copy(dAtA[i:], m.DefaultBranch)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.DefaultBranch)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.License) > 0 {
		i -= len(m.License)
		copy(dAtA[i:], m.License)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.License)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Archived {
		i--
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Stargazers) > 0 {
		dAtA2 := make([]byte, len(m.Stargazers)*10)
		var j1 int
		for _, num := range m.Stargazers {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintRepository(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.PushedAt != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.PushedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CreatedAt != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Releases) > 0 {
		i -= len(m.Releases)
		copy(dAtA[i:], m.Releases)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Releases)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Labels) > 0 {
		i -= len(m.Labels)
		copy(dAtA[i:], m.Labels)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Labels)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Pulls) > 0 {
		dAtA4 := make([]byte, len(m.Pulls)*10)
		var j3 int
		for _, num := range m.Pulls {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintRepository(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Issues) > 0 {
		dAtA6 := make([]byte, len(m.Issues)*10)
		var j5 int
		for _, num := range m.Issues {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintRepository(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Commits) > 0 {
		i -= len(m.Commits)
		copy(dAtA[i:], m.Commits)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Commits)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Subscribers) > 0 {
		i -= len(m.Subscribers)
		copy(dAtA[i:], m.Subscribers)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Subscribers)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Tags) > 0 {
		i -= len(m.Tags)
		copy(dAtA[i:], m.Tags)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Tags)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Branches) > 0 {
		for k := range m.Branches {
			v := m.Branches[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRepository(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRepository(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRepository(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Forks) > 0 {
		dAtA8 := make([]byte, len(m.Forks)*10)
		var j7 int
		for _, num := range m.Forks {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintRepository(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRepository(dAtA []byte, offset int, v uint64) int {
	offset -= sovRepository(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Repository) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovRepository(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if len(m.Forks) > 0 {
		l = 0
		for _, e := range m.Forks {
			l += sovRepository(uint64(e))
		}
		n += 1 + sovRepository(uint64(l)) + l
	}
	if len(m.Branches) > 0 {
		for k, v := range m.Branches {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRepository(uint64(len(k))) + 1 + len(v) + sovRepository(uint64(len(v)))
			n += mapEntrySize + 1 + sovRepository(uint64(mapEntrySize))
		}
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Subscribers)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Commits)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if len(m.Issues) > 0 {
		l = 0
		for _, e := range m.Issues {
			l += sovRepository(uint64(e))
		}
		n += 1 + sovRepository(uint64(l)) + l
	}
	if len(m.Pulls) > 0 {
		l = 0
		for _, e := range m.Pulls {
			l += sovRepository(uint64(e))
		}
		n += 1 + sovRepository(uint64(l)) + l
	}
	l = len(m.Labels)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Releases)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovRepository(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovRepository(uint64(m.UpdatedAt))
	}
	if m.PushedAt != 0 {
		n += 2 + sovRepository(uint64(m.PushedAt))
	}
	if len(m.Stargazers) > 0 {
		l = 0
		for _, e := range m.Stargazers {
			l += sovRepository(uint64(e))
		}
		n += 2 + sovRepository(uint64(l)) + l
	}
	if m.Archived {
		n += 3
	}
	l = len(m.License)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.DefaultBranch)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.Extensions)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	return n
}

func sovRepository(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRepository(x uint64) (n int) {
	return sovRepository(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Repository) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Repository: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Repository: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Forks = append(m.Forks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRepository
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRepository
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Forks) == 0 {
					m.Forks = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Forks = append(m.Forks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Forks", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Branches == nil {
				m.Branches = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRepository
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRepository
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRepository
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRepository
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRepository(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRepository
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Branches[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscribers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Issues = append(m.Issues, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRepository
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRepository
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Issues) == 0 {
					m.Issues = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Issues = append(m.Issues, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Issues", wireType)
			}
		case 12:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pulls = append(m.Pulls, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRepository
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRepository
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pulls) == 0 {
					m.Pulls = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pulls = append(m.Pulls, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pulls", wireType)
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Releases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Releases = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushedAt", wireType)
			}
			m.PushedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stargazers = append(m.Stargazers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRepository
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRepository
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Stargazers) == 0 {
					m.Stargazers = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stargazers = append(m.Stargazers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stargazers", wireType)
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBranch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultBranch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRepository(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRepository
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRepository
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRepository
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRepository        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRepository          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRepository = fmt.Errorf("proto: unexpected end of group")
)
