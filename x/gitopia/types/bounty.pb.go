// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/bounty.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BountyState int32

const (
	BountyStateSRCDEBITTED  BountyState = 0
	BountyStateDESTCREDITED BountyState = 1
	BountyStateREVERTEDBACK BountyState = 2
)

var BountyState_name = map[int32]string{
	0: "BOUNTY_STATE_SRCDEBITTED",
	1: "BOUNTY_STATE_DESTCREDITED",
	2: "BOUNTY_STATE_REVERTEDBACK",
}

var BountyState_value = map[string]int32{
	"BOUNTY_STATE_SRCDEBITTED":  0,
	"BOUNTY_STATE_DESTCREDITED": 1,
	"BOUNTY_STATE_REVERTEDBACK": 2,
}

func (x BountyState) String() string {
	return proto.EnumName(BountyState_name, int32(x))
}

func (BountyState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_67a698d5c16076fb, []int{0}
}

type BountyParent int32

const (
	BountyParentIssue BountyParent = 0
)

var BountyParent_name = map[int32]string{
	0: "BOUNTY_PARENT_ISSUE",
}

var BountyParent_value = map[string]int32{
	"BOUNTY_PARENT_ISSUE": 0,
}

func (x BountyParent) String() string {
	return proto.EnumName(BountyParent_name, int32(x))
}

func (BountyParent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_67a698d5c16076fb, []int{1}
}

type Bounty struct {
	Id         uint64                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	State      BountyState                              `protobuf:"varint,3,opt,name=state,proto3,enum=gitopia.gitopia.gitopia.BountyState" json:"state,omitempty"`
	ParentId   uint64                                   `protobuf:"varint,4,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Parent     BountyParent                             `protobuf:"varint,5,opt,name=parent,proto3,enum=gitopia.gitopia.gitopia.BountyParent" json:"parent,omitempty"`
	ExpireAt   int64                                    `protobuf:"varint,6,opt,name=expireAt,proto3" json:"expireAt,omitempty"`
	RewardedTo string                                   `protobuf:"bytes,7,opt,name=rewardedTo,proto3" json:"rewardedTo,omitempty"`
	CreatedAt  int64                                    `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt  int64                                    `protobuf:"varint,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Creator    string                                   `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Bounty) Reset()         { *m = Bounty{} }
func (m *Bounty) String() string { return proto.CompactTextString(m) }
func (*Bounty) ProtoMessage()    {}
func (*Bounty) Descriptor() ([]byte, []int) {
	return fileDescriptor_67a698d5c16076fb, []int{0}
}
func (m *Bounty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bounty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bounty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bounty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bounty.Merge(m, src)
}
func (m *Bounty) XXX_Size() int {
	return m.Size()
}
func (m *Bounty) XXX_DiscardUnknown() {
	xxx_messageInfo_Bounty.DiscardUnknown(m)
}

var xxx_messageInfo_Bounty proto.InternalMessageInfo

func (m *Bounty) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Bounty) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Bounty) GetState() BountyState {
	if m != nil {
		return m.State
	}
	return BountyStateSRCDEBITTED
}

func (m *Bounty) GetParentId() uint64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *Bounty) GetParent() BountyParent {
	if m != nil {
		return m.Parent
	}
	return BountyParentIssue
}

func (m *Bounty) GetExpireAt() int64 {
	if m != nil {
		return m.ExpireAt
	}
	return 0
}

func (m *Bounty) GetRewardedTo() string {
	if m != nil {
		return m.RewardedTo
	}
	return ""
}

func (m *Bounty) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Bounty) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Bounty) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterEnum("gitopia.gitopia.gitopia.BountyState", BountyState_name, BountyState_value)
	proto.RegisterEnum("gitopia.gitopia.gitopia.BountyParent", BountyParent_name, BountyParent_value)
	proto.RegisterType((*Bounty)(nil), "gitopia.gitopia.gitopia.Bounty")
}

func init() { proto.RegisterFile("gitopia/bounty.proto", fileDescriptor_67a698d5c16076fb) }

var fileDescriptor_67a698d5c16076fb = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x93, 0xb6, 0xeb, 0x56, 0x0f, 0x4d, 0xc5, 0x0c, 0xe6, 0x05, 0x94, 0x45, 0x08, 0xa4,
	0xa8, 0x12, 0x0e, 0x1b, 0x17, 0x34, 0x89, 0x43, 0xd3, 0xf8, 0x50, 0x21, 0x8d, 0xc9, 0xc9, 0x90,
	0xe0, 0x52, 0xa5, 0x89, 0x55, 0x22, 0xd4, 0x3a, 0x4a, 0x5c, 0xd8, 0xde, 0x00, 0xf5, 0xc4, 0x0b,
	0xf4, 0x84, 0xc4, 0x81, 0xf7, 0x40, 0xda, 0x71, 0x47, 0x4e, 0x80, 0xda, 0x17, 0x41, 0x71, 0xd2,
	0x62, 0x98, 0x10, 0x27, 0x7f, 0xdf, 0xf7, 0xff, 0xff, 0x7f, 0x71, 0x2c, 0x1b, 0xec, 0x8e, 0x12,
	0xc1, 0xd3, 0x24, 0x74, 0x86, 0x7c, 0x3a, 0x11, 0x17, 0x38, 0xcd, 0xb8, 0xe0, 0x70, 0xaf, 0x9a,
	0xe2, 0xbf, 0x56, 0x63, 0x77, 0xc4, 0x47, 0x5c, 0x7a, 0x9c, 0xa2, 0x2a, 0xed, 0x86, 0x19, 0xf1,
	0x7c, 0xcc, 0x73, 0x67, 0x18, 0xe6, 0xcc, 0x79, 0x77, 0x38, 0x64, 0x22, 0x3c, 0x74, 0x22, 0x9e,
	0x4c, 0x4a, 0xfd, 0xfe, 0xe7, 0x3a, 0x68, 0xba, 0x92, 0x0f, 0x77, 0x40, 0x2d, 0x89, 0x91, 0x6e,
	0xe9, 0x76, 0x83, 0xd6, 0x92, 0x18, 0x46, 0xa0, 0x19, 0x8e, 0x0b, 0x09, 0xd5, 0xac, 0xba, 0xbd,
	0x7d, 0xb4, 0x8f, 0x4b, 0x16, 0x2e, 0x58, 0xb8, 0x62, 0xe1, 0x1e, 0x4f, 0x26, 0xee, 0xe3, 0xcb,
	0xef, 0x07, 0xda, 0x97, 0x1f, 0x07, 0xf6, 0x28, 0x11, 0x6f, 0xa6, 0x43, 0x1c, 0xf1, 0xb1, 0x53,
	0x7d, 0xb8, 0x5c, 0x1e, 0xe5, 0xf1, 0x5b, 0x47, 0x5c, 0xa4, 0x2c, 0x97, 0x81, 0x9c, 0x56, 0x68,
	0x78, 0x0c, 0x36, 0x72, 0x11, 0x0a, 0x86, 0xea, 0x96, 0x6e, 0xef, 0x1c, 0x3d, 0xc0, 0xff, 0xf8,
	0x3d, 0x5c, 0x6e, 0xd2, 0x2f, 0xbc, 0xb4, 0x8c, 0x40, 0x03, 0x6c, 0xa5, 0x61, 0xc6, 0x26, 0xa2,
	0x1f, 0xa3, 0x86, 0xdc, 0xf6, 0xba, 0x87, 0xcf, 0x40, 0xb3, 0xac, 0xd1, 0x86, 0x04, 0x3f, 0xfc,
	0x0f, 0xf8, 0x54, 0x9a, 0x69, 0x15, 0x2a, 0xd0, 0xec, 0x3c, 0x4d, 0x32, 0xd6, 0x15, 0xa8, 0x69,
	0xe9, 0x76, 0x9d, 0xae, 0x7b, 0x68, 0x02, 0x90, 0xb1, 0xf7, 0x61, 0x16, 0xb3, 0x38, 0xe0, 0x68,
	0xd3, 0xd2, 0xed, 0x16, 0x55, 0x26, 0xf0, 0x1e, 0x68, 0x45, 0x19, 0x0b, 0x05, 0x8b, 0xbb, 0x02,
	0x6d, 0xc9, 0xf0, 0xef, 0x41, 0xa1, 0x4e, 0xd3, 0xb8, 0x52, 0x5b, 0xa5, 0xba, 0x1e, 0x40, 0x04,
	0x36, 0xa5, 0x95, 0x67, 0x08, 0x48, 0xf0, 0xaa, 0xed, 0x7c, 0xd5, 0xc1, 0xb6, 0x72, 0x06, 0xf0,
	0x29, 0x40, 0xee, 0x8b, 0xb3, 0x93, 0xe0, 0xd5, 0xc0, 0x0f, 0xba, 0x01, 0x19, 0xf8, 0xb4, 0xe7,
	0x11, 0xb7, 0x1f, 0x04, 0xc4, 0x6b, 0x6b, 0x86, 0x31, 0x9b, 0x5b, 0x77, 0x14, 0xbb, 0xa2, 0xc2,
	0x63, 0xb0, 0xff, 0x47, 0xd2, 0x23, 0x7e, 0xd0, 0xa3, 0xc4, 0xeb, 0x17, 0x51, 0xdd, 0xb8, 0x3b,
	0x9b, 0x5b, 0x7b, 0x4a, 0x54, 0x95, 0xaf, 0x65, 0x29, 0x79, 0x49, 0x68, 0x40, 0x3c, 0xb7, 0xdb,
	0x7b, 0xde, 0xae, 0x5d, 0xcb, 0xaa, 0xb2, 0xd1, 0xf8, 0xf0, 0xc9, 0xd4, 0x3a, 0x1e, 0xb8, 0xa1,
	0x9e, 0x38, 0xc4, 0xe0, 0x56, 0x45, 0x3c, 0xed, 0x52, 0x72, 0x12, 0x0c, 0xfa, 0xbe, 0x7f, 0x46,
	0xda, 0x9a, 0x71, 0x7b, 0x36, 0xb7, 0x6e, 0xaa, 0xd6, 0x7e, 0x9e, 0x4f, 0x59, 0x49, 0x71, 0xbd,
	0xcb, 0x85, 0xa9, 0x5f, 0x2d, 0x4c, 0xfd, 0xe7, 0xc2, 0xd4, 0x3f, 0x2e, 0x4d, 0xed, 0x6a, 0x69,
	0x6a, 0xdf, 0x96, 0xa6, 0xf6, 0xba, 0xa3, 0x5c, 0xc1, 0xd5, 0x03, 0x5a, 0xad, 0xe7, 0xeb, 0x4a,
	0x5e, 0xc5, 0x61, 0x53, 0xbe, 0x81, 0x27, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xef, 0x98,
	0x82, 0x6a, 0x03, 0x00, 0x00,
}

func (m *Bounty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bounty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bounty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x52
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x48
	}
	if m.CreatedAt != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x40
	}
	if len(m.RewardedTo) > 0 {
		i -= len(m.RewardedTo)
		copy(dAtA[i:], m.RewardedTo)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.RewardedTo)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ExpireAt != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.ExpireAt))
		i--
		dAtA[i] = 0x30
	}
	if m.Parent != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.Parent))
		i--
		dAtA[i] = 0x28
	}
	if m.ParentId != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBounty(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBounty(dAtA []byte, offset int, v uint64) int {
	offset -= sovBounty(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bounty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBounty(uint64(m.Id))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovBounty(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovBounty(uint64(m.State))
	}
	if m.ParentId != 0 {
		n += 1 + sovBounty(uint64(m.ParentId))
	}
	if m.Parent != 0 {
		n += 1 + sovBounty(uint64(m.Parent))
	}
	if m.ExpireAt != 0 {
		n += 1 + sovBounty(uint64(m.ExpireAt))
	}
	l = len(m.RewardedTo)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovBounty(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovBounty(uint64(m.UpdatedAt))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	return n
}

func sovBounty(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBounty(x uint64) (n int) {
	return sovBounty(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bounty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bounty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bounty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= BountyState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parent |= BountyParent(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			m.ExpireAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardedTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardedTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBounty(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBounty
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBounty
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBounty
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBounty        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBounty          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBounty = fmt.Errorf("proto: unexpected end of group")
)
