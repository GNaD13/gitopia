// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/genesis.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the gitopia module's genesis state.
type GenesisState struct {
	// this line is used by starport scaffolding # genesis/proto/state
	PullRequestList   []*PullRequest  `protobuf:"bytes,13,rep,name=pullRequestList,proto3" json:"pullRequestList,omitempty"`
	PullRequestCount  uint64          `protobuf:"varint,14,opt,name=pullRequestCount,proto3" json:"pullRequestCount,omitempty"`
	OrganizationList  []*Organization `protobuf:"bytes,11,rep,name=organizationList,proto3" json:"organizationList,omitempty"`
	OrganizationCount uint64          `protobuf:"varint,12,opt,name=organizationCount,proto3" json:"organizationCount,omitempty"`
	CommentList       []*Comment      `protobuf:"bytes,9,rep,name=commentList,proto3" json:"commentList,omitempty"`
	CommentCount      uint64          `protobuf:"varint,10,opt,name=commentCount,proto3" json:"commentCount,omitempty"`
	IssueList         []*Issue        `protobuf:"bytes,7,rep,name=issueList,proto3" json:"issueList,omitempty"`
	IssueCount        uint64          `protobuf:"varint,8,opt,name=issueCount,proto3" json:"issueCount,omitempty"`
	RepositoryList    []*Repository   `protobuf:"bytes,5,rep,name=repositoryList,proto3" json:"repositoryList,omitempty"`
	RepositoryCount   uint64          `protobuf:"varint,6,opt,name=repositoryCount,proto3" json:"repositoryCount,omitempty"`
	UserList          []*User         `protobuf:"bytes,3,rep,name=userList,proto3" json:"userList,omitempty"`
	UserCount         uint64          `protobuf:"varint,4,opt,name=userCount,proto3" json:"userCount,omitempty"`
	WhoisList         []*Whois        `protobuf:"bytes,1,rep,name=whoisList,proto3" json:"whoisList,omitempty"`
	WhoisCount        uint64          `protobuf:"varint,2,opt,name=whoisCount,proto3" json:"whoisCount,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe28ed7a80acf9ab, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetPullRequestList() []*PullRequest {
	if m != nil {
		return m.PullRequestList
	}
	return nil
}

func (m *GenesisState) GetPullRequestCount() uint64 {
	if m != nil {
		return m.PullRequestCount
	}
	return 0
}

func (m *GenesisState) GetOrganizationList() []*Organization {
	if m != nil {
		return m.OrganizationList
	}
	return nil
}

func (m *GenesisState) GetOrganizationCount() uint64 {
	if m != nil {
		return m.OrganizationCount
	}
	return 0
}

func (m *GenesisState) GetCommentList() []*Comment {
	if m != nil {
		return m.CommentList
	}
	return nil
}

func (m *GenesisState) GetCommentCount() uint64 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *GenesisState) GetIssueList() []*Issue {
	if m != nil {
		return m.IssueList
	}
	return nil
}

func (m *GenesisState) GetIssueCount() uint64 {
	if m != nil {
		return m.IssueCount
	}
	return 0
}

func (m *GenesisState) GetRepositoryList() []*Repository {
	if m != nil {
		return m.RepositoryList
	}
	return nil
}

func (m *GenesisState) GetRepositoryCount() uint64 {
	if m != nil {
		return m.RepositoryCount
	}
	return 0
}

func (m *GenesisState) GetUserList() []*User {
	if m != nil {
		return m.UserList
	}
	return nil
}

func (m *GenesisState) GetUserCount() uint64 {
	if m != nil {
		return m.UserCount
	}
	return 0
}

func (m *GenesisState) GetWhoisList() []*Whois {
	if m != nil {
		return m.WhoisList
	}
	return nil
}

func (m *GenesisState) GetWhoisCount() uint64 {
	if m != nil {
		return m.WhoisCount
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "gitopia.gitopia.gitopia.GenesisState")
}

func init() { proto.RegisterFile("gitopia/genesis.proto", fileDescriptor_fe28ed7a80acf9ab) }

var fileDescriptor_fe28ed7a80acf9ab = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0x86, 0x1b, 0xfb, 0x61, 0x7b, 0x5a, 0xdb, 0x3a, 0x22, 0xd6, 0xa2, 0x43, 0xa9, 0x0a, 0xa5,
	0x48, 0x0a, 0x7a, 0x25, 0x78, 0xd5, 0x0a, 0x22, 0x8a, 0x1f, 0x23, 0x22, 0x78, 0x97, 0x96, 0x21,
	0x1d, 0x68, 0x33, 0x31, 0x33, 0x41, 0xbb, 0xbf, 0x62, 0x7f, 0xd6, 0x5e, 0xf6, 0x72, 0x2f, 0x97,
	0xf6, 0x87, 0xec, 0x92, 0x33, 0xf9, 0xda, 0x94, 0xb0, 0x57, 0xc9, 0xbc, 0xe7, 0xbc, 0xef, 0x93,
	0x39, 0x99, 0x81, 0xc7, 0xae, 0xd0, 0xd2, 0x17, 0xce, 0xcc, 0xe5, 0x1e, 0x57, 0x42, 0xd9, 0x7e,
	0x20, 0xb5, 0x24, 0x4f, 0x62, 0xd9, 0x2e, 0x3c, 0x87, 0x4f, 0x93, 0x7e, 0x3f, 0xdc, 0x6c, 0x18,
	0xff, 0x1b, 0x72, 0xa5, 0x8d, 0x67, 0x38, 0x4c, 0x4a, 0x32, 0x70, 0x1d, 0x4f, 0x9c, 0x39, 0x5a,
	0x48, 0x2f, 0xae, 0xa5, 0x98, 0x95, 0xdc, 0x6e, 0xb9, 0x97, 0x58, 0x1e, 0x25, 0xb2, 0x50, 0x2a,
	0xe4, 0xb1, 0x38, 0x48, 0xc4, 0x80, 0xfb, 0x52, 0x09, 0x2d, 0x83, 0x5d, 0x5c, 0x21, 0x49, 0x25,
	0x54, 0x3c, 0x28, 0x46, 0xfc, 0x5b, 0xcb, 0xe4, 0xf3, 0xc7, 0xd7, 0x75, 0xe8, 0x7c, 0x34, 0x1b,
	0xfa, 0xa9, 0x1d, 0xcd, 0xc9, 0x57, 0xe8, 0xe5, 0x3e, 0xf8, 0x8b, 0x50, 0x7a, 0xf0, 0x60, 0x54,
	0x9d, 0xb4, 0xdf, 0xbc, 0xb4, 0x4b, 0x76, 0x6a, 0x7f, 0xcf, 0xfa, 0x59, 0xd1, 0x4c, 0xa6, 0xd0,
	0xcf, 0x49, 0x0b, 0x19, 0x7a, 0x7a, 0xd0, 0x1d, 0x59, 0x93, 0x1a, 0x3b, 0xd1, 0xc9, 0x0f, 0xe8,
	0xe7, 0x27, 0x82, 0xf0, 0x36, 0xc2, 0x5f, 0x95, 0xc2, 0xbf, 0xe5, 0x0c, 0xec, 0xc4, 0x4e, 0x5e,
	0xc3, 0xc3, 0xbc, 0x66, 0xf8, 0x1d, 0xe4, 0x9f, 0x16, 0xc8, 0x1c, 0xda, 0xf1, 0xd8, 0x91, 0xdd,
	0x42, 0xf6, 0xa8, 0x94, 0xbd, 0x30, 0xbd, 0x2c, 0x6f, 0x22, 0x63, 0xe8, 0xc4, 0x4b, 0x03, 0x03,
	0x84, 0xdd, 0xd2, 0xc8, 0x7b, 0x68, 0xe1, 0x7f, 0x44, 0xca, 0x7d, 0xa4, 0xd0, 0x52, 0xca, 0xa7,
	0xa8, 0x93, 0x65, 0x06, 0x42, 0x01, 0x70, 0x61, 0xf2, 0x9b, 0x98, 0x9f, 0x53, 0xc8, 0x67, 0xe8,
	0x66, 0x07, 0x02, 0x11, 0x75, 0x44, 0xbc, 0x28, 0x45, 0xb0, 0xb4, 0x9d, 0x15, 0xac, 0x64, 0x02,
	0xbd, 0x4c, 0x31, 0xc4, 0x06, 0x12, 0x8b, 0x32, 0x79, 0x07, 0xcd, 0xe8, 0xb4, 0x21, 0xb0, 0x8a,
	0xc0, 0xe7, 0xa5, 0xc0, 0x5f, 0x8a, 0x07, 0x2c, 0x6d, 0x27, 0xcf, 0xa0, 0x15, 0xbd, 0x9b, 0xf8,
	0x1a, 0xc6, 0x67, 0x42, 0x34, 0x2d, 0x3c, 0xb2, 0x98, 0x6c, 0xdd, 0x31, 0xad, 0xdf, 0x51, 0x27,
	0xcb, 0x0c, 0xd1, 0xb4, 0x70, 0x61, 0xc2, 0xef, 0x99, 0x69, 0x65, 0xca, 0xfc, 0xc3, 0xc5, 0x81,
	0x5a, 0xfb, 0x03, 0xb5, 0xae, 0x0e, 0xd4, 0x3a, 0x3f, 0xd2, 0xca, 0xfe, 0x48, 0x2b, 0x97, 0x47,
	0x5a, 0xf9, 0x33, 0x75, 0x85, 0x5e, 0x87, 0x4b, 0x7b, 0x25, 0xb7, 0xb3, 0xf4, 0xf2, 0xc7, 0xcf,
	0xff, 0xe9, 0x9b, 0xde, 0xf9, 0x5c, 0x2d, 0x1b, 0x78, 0x9d, 0xde, 0xde, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xca, 0xd5, 0x5b, 0x3a, 0x26, 0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PullRequestCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PullRequestCount))
		i--
		dAtA[i] = 0x70
	}
	if len(m.PullRequestList) > 0 {
		for iNdEx := len(m.PullRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PullRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.OrganizationCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OrganizationCount))
		i--
		dAtA[i] = 0x60
	}
	if len(m.OrganizationList) > 0 {
		for iNdEx := len(m.OrganizationList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrganizationList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.CommentCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CommentCount))
		i--
		dAtA[i] = 0x50
	}
	if len(m.CommentList) > 0 {
		for iNdEx := len(m.CommentList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommentList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.IssueCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.IssueCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.IssueList) > 0 {
		for iNdEx := len(m.IssueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IssueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.RepositoryCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.RepositoryCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RepositoryList) > 0 {
		for iNdEx := len(m.RepositoryList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RepositoryList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.UserCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.UserCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UserList) > 0 {
		for iNdEx := len(m.UserList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.WhoisCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.WhoisCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WhoisList) > 0 {
		for iNdEx := len(m.WhoisList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WhoisList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WhoisList) > 0 {
		for _, e := range m.WhoisList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.WhoisCount != 0 {
		n += 1 + sovGenesis(uint64(m.WhoisCount))
	}
	if len(m.UserList) > 0 {
		for _, e := range m.UserList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.UserCount != 0 {
		n += 1 + sovGenesis(uint64(m.UserCount))
	}
	if len(m.RepositoryList) > 0 {
		for _, e := range m.RepositoryList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.RepositoryCount != 0 {
		n += 1 + sovGenesis(uint64(m.RepositoryCount))
	}
	if len(m.IssueList) > 0 {
		for _, e := range m.IssueList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.IssueCount != 0 {
		n += 1 + sovGenesis(uint64(m.IssueCount))
	}
	if len(m.CommentList) > 0 {
		for _, e := range m.CommentList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.CommentCount != 0 {
		n += 1 + sovGenesis(uint64(m.CommentCount))
	}
	if len(m.OrganizationList) > 0 {
		for _, e := range m.OrganizationList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.OrganizationCount != 0 {
		n += 1 + sovGenesis(uint64(m.OrganizationCount))
	}
	if len(m.PullRequestList) > 0 {
		for _, e := range m.PullRequestList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.PullRequestCount != 0 {
		n += 1 + sovGenesis(uint64(m.PullRequestCount))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhoisList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhoisList = append(m.WhoisList, &Whois{})
			if err := m.WhoisList[len(m.WhoisList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhoisCount", wireType)
			}
			m.WhoisCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WhoisCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserList = append(m.UserList, &User{})
			if err := m.UserList[len(m.UserList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCount", wireType)
			}
			m.UserCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepositoryList = append(m.RepositoryList, &Repository{})
			if err := m.RepositoryList[len(m.RepositoryList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryCount", wireType)
			}
			m.RepositoryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueList = append(m.IssueList, &Issue{})
			if err := m.IssueList[len(m.IssueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueCount", wireType)
			}
			m.IssueCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssueCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentList = append(m.CommentList, &Comment{})
			if err := m.CommentList[len(m.CommentList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationList = append(m.OrganizationList, &Organization{})
			if err := m.OrganizationList[len(m.OrganizationList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationCount", wireType)
			}
			m.OrganizationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrganizationCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PullRequestList = append(m.PullRequestList, &PullRequest{})
			if err := m.PullRequestList[len(m.PullRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullRequestCount", wireType)
			}
			m.PullRequestCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PullRequestCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
