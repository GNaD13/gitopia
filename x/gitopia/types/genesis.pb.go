// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the gitopia module's genesis state.
type GenesisState struct {
	LegacyDaoAddressList  []LegacyDaoAddress  `protobuf:"bytes,29,rep,name=legacyDaoAddressList,proto3" json:"legacyDaoAddressList"`
	LegacyDaoAddressCount uint64              `protobuf:"varint,30,opt,name=legacyDaoAddressCount,proto3" json:"legacyDaoAddressCount,omitempty"`
	StorageProviderList   []StorageProvider   `protobuf:"bytes,27,rep,name=storageProviderList,proto3" json:"storageProviderList"`
	StorageProviderCount  uint64              `protobuf:"varint,28,opt,name=storageProviderCount,proto3" json:"storageProviderCount,omitempty"`
	BaseRepositoryKeyList []BaseRepositoryKey `protobuf:"bytes,26,rep,name=baseRepositoryKeyList,proto3" json:"baseRepositoryKeyList"`
	UserDaoList           []UserDao           `protobuf:"bytes,25,rep,name=userDaoList,proto3" json:"userDaoList"`
	TaskList              []Task              `protobuf:"bytes,17,rep,name=taskList,proto3" json:"taskList"`
	TaskCount             uint64              `protobuf:"varint,18,opt,name=taskCount,proto3" json:"taskCount,omitempty"`
	BranchList            []Branch            `protobuf:"bytes,19,rep,name=branchList,proto3" json:"branchList"`
	BranchCount           uint64              `protobuf:"varint,20,opt,name=branchCount,proto3" json:"branchCount,omitempty"`
	TagList               []Tag               `protobuf:"bytes,21,rep,name=tagList,proto3" json:"tagList"`
	TagCount              uint64              `protobuf:"varint,22,opt,name=tagCount,proto3" json:"tagCount,omitempty"`
	MemberList            []Member            `protobuf:"bytes,23,rep,name=memberList,proto3" json:"memberList"`
	MemberCount           uint64              `protobuf:"varint,24,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	// this line is used by starport scaffolding # genesis/proto/state
	ReleaseList      []Release     `protobuf:"bytes,15,rep,name=releaseList,proto3" json:"releaseList"`
	ReleaseCount     uint64        `protobuf:"varint,16,opt,name=releaseCount,proto3" json:"releaseCount,omitempty"`
	PullRequestList  []PullRequest `protobuf:"bytes,13,rep,name=pullRequestList,proto3" json:"pullRequestList"`
	PullRequestCount uint64        `protobuf:"varint,14,opt,name=pullRequestCount,proto3" json:"pullRequestCount,omitempty"`
	DaoList          []Dao         `protobuf:"bytes,11,rep,name=daoList,proto3" json:"daoList"`
	DaoCount         uint64        `protobuf:"varint,12,opt,name=daoCount,proto3" json:"daoCount,omitempty"`
	CommentList      []Comment     `protobuf:"bytes,9,rep,name=commentList,proto3" json:"commentList"`
	CommentCount     uint64        `protobuf:"varint,10,opt,name=commentCount,proto3" json:"commentCount,omitempty"`
	IssueList        []Issue       `protobuf:"bytes,7,rep,name=issueList,proto3" json:"issueList"`
	IssueCount       uint64        `protobuf:"varint,8,opt,name=issueCount,proto3" json:"issueCount,omitempty"`
	RepositoryList   []Repository  `protobuf:"bytes,5,rep,name=repositoryList,proto3" json:"repositoryList"`
	RepositoryCount  uint64        `protobuf:"varint,6,opt,name=repositoryCount,proto3" json:"repositoryCount,omitempty"`
	UserList         []User        `protobuf:"bytes,3,rep,name=userList,proto3" json:"userList"`
	UserCount        uint64        `protobuf:"varint,4,opt,name=userCount,proto3" json:"userCount,omitempty"`
	WhoisList        []Whois       `protobuf:"bytes,1,rep,name=whoisList,proto3" json:"whoisList"`
	WhoisCount       uint64        `protobuf:"varint,2,opt,name=whoisCount,proto3" json:"whoisCount,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe28ed7a80acf9ab, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetLegacyDaoAddressList() []LegacyDaoAddress {
	if m != nil {
		return m.LegacyDaoAddressList
	}
	return nil
}

func (m *GenesisState) GetLegacyDaoAddressCount() uint64 {
	if m != nil {
		return m.LegacyDaoAddressCount
	}
	return 0
}

func (m *GenesisState) GetStorageProviderList() []StorageProvider {
	if m != nil {
		return m.StorageProviderList
	}
	return nil
}

func (m *GenesisState) GetStorageProviderCount() uint64 {
	if m != nil {
		return m.StorageProviderCount
	}
	return 0
}

func (m *GenesisState) GetBaseRepositoryKeyList() []BaseRepositoryKey {
	if m != nil {
		return m.BaseRepositoryKeyList
	}
	return nil
}

func (m *GenesisState) GetUserDaoList() []UserDao {
	if m != nil {
		return m.UserDaoList
	}
	return nil
}

func (m *GenesisState) GetTaskList() []Task {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *GenesisState) GetTaskCount() uint64 {
	if m != nil {
		return m.TaskCount
	}
	return 0
}

func (m *GenesisState) GetBranchList() []Branch {
	if m != nil {
		return m.BranchList
	}
	return nil
}

func (m *GenesisState) GetBranchCount() uint64 {
	if m != nil {
		return m.BranchCount
	}
	return 0
}

func (m *GenesisState) GetTagList() []Tag {
	if m != nil {
		return m.TagList
	}
	return nil
}

func (m *GenesisState) GetTagCount() uint64 {
	if m != nil {
		return m.TagCount
	}
	return 0
}

func (m *GenesisState) GetMemberList() []Member {
	if m != nil {
		return m.MemberList
	}
	return nil
}

func (m *GenesisState) GetMemberCount() uint64 {
	if m != nil {
		return m.MemberCount
	}
	return 0
}

func (m *GenesisState) GetReleaseList() []Release {
	if m != nil {
		return m.ReleaseList
	}
	return nil
}

func (m *GenesisState) GetReleaseCount() uint64 {
	if m != nil {
		return m.ReleaseCount
	}
	return 0
}

func (m *GenesisState) GetPullRequestList() []PullRequest {
	if m != nil {
		return m.PullRequestList
	}
	return nil
}

func (m *GenesisState) GetPullRequestCount() uint64 {
	if m != nil {
		return m.PullRequestCount
	}
	return 0
}

func (m *GenesisState) GetDaoList() []Dao {
	if m != nil {
		return m.DaoList
	}
	return nil
}

func (m *GenesisState) GetDaoCount() uint64 {
	if m != nil {
		return m.DaoCount
	}
	return 0
}

func (m *GenesisState) GetCommentList() []Comment {
	if m != nil {
		return m.CommentList
	}
	return nil
}

func (m *GenesisState) GetCommentCount() uint64 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *GenesisState) GetIssueList() []Issue {
	if m != nil {
		return m.IssueList
	}
	return nil
}

func (m *GenesisState) GetIssueCount() uint64 {
	if m != nil {
		return m.IssueCount
	}
	return 0
}

func (m *GenesisState) GetRepositoryList() []Repository {
	if m != nil {
		return m.RepositoryList
	}
	return nil
}

func (m *GenesisState) GetRepositoryCount() uint64 {
	if m != nil {
		return m.RepositoryCount
	}
	return 0
}

func (m *GenesisState) GetUserList() []User {
	if m != nil {
		return m.UserList
	}
	return nil
}

func (m *GenesisState) GetUserCount() uint64 {
	if m != nil {
		return m.UserCount
	}
	return 0
}

func (m *GenesisState) GetWhoisList() []Whois {
	if m != nil {
		return m.WhoisList
	}
	return nil
}

func (m *GenesisState) GetWhoisCount() uint64 {
	if m != nil {
		return m.WhoisCount
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "gitopia.gitopia.gitopia.GenesisState")
}

func init() { proto.RegisterFile("gitopia/genesis.proto", fileDescriptor_fe28ed7a80acf9ab) }

var fileDescriptor_fe28ed7a80acf9ab = []byte{
	// 752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0x5f, 0x4f, 0x13, 0x4f,
	0x14, 0x6d, 0x7f, 0xf0, 0xe3, 0xcf, 0x94, 0xbf, 0x43, 0x2b, 0xa5, 0xc2, 0xd2, 0xa0, 0x0f, 0x95,
	0x87, 0x92, 0xa0, 0x8f, 0x26, 0xc6, 0x82, 0x51, 0x23, 0x26, 0x58, 0x30, 0x26, 0xbe, 0xe8, 0xb4,
	0x1d, 0x97, 0x0d, 0x6d, 0xa7, 0xee, 0xcc, 0xaa, 0xfd, 0x16, 0x7e, 0x2c, 0x1e, 0x79, 0xe4, 0xc9,
	0x18, 0xf8, 0x22, 0x66, 0xee, 0x9d, 0x99, 0x5d, 0x96, 0x2e, 0xfb, 0xd4, 0xb9, 0x67, 0xef, 0x3d,
	0xe7, 0xce, 0xb9, 0xdb, 0xdb, 0x92, 0x8a, 0x1f, 0x28, 0x31, 0x0a, 0xd8, 0x9e, 0xcf, 0x87, 0x5c,
	0x06, 0xb2, 0x39, 0x0a, 0x85, 0x12, 0x74, 0xdd, 0xc0, 0xcd, 0xd4, 0x67, 0x8d, 0xda, 0x7c, 0xc5,
	0xe4, 0x39, 0x26, 0xd7, 0xca, 0x16, 0xeb, 0x84, 0x6c, 0xd8, 0x3d, 0x33, 0xe8, 0x6a, 0x9c, 0xe9,
	0xa7, 0x13, 0x07, 0x7c, 0xd0, 0xe1, 0xa1, 0x41, 0x3d, 0x8b, 0x4a, 0x25, 0x42, 0xe6, 0xf3, 0x2f,
	0xa3, 0x50, 0xfc, 0x08, 0x7a, 0xee, 0x79, 0xd9, 0x17, 0xbe, 0x80, 0xe3, 0x9e, 0x3e, 0x19, 0xd4,
	0x35, 0x1e, 0xf2, 0x3e, 0x67, 0x92, 0x1b, 0x78, 0xc3, 0xc2, 0xa3, 0xa8, 0xdf, 0x6f, 0xf3, 0xef,
	0x11, 0x97, 0x2a, 0xdd, 0x50, 0x8f, 0xdd, 0x21, 0xe9, 0x8a, 0xc1, 0x80, 0x0f, 0x6d, 0xe6, 0x9a,
	0x85, 0x03, 0x29, 0x23, 0xcb, 0x5c, 0x8d, 0x05, 0x47, 0x42, 0x06, 0x4a, 0x84, 0x63, 0xf3, 0xc4,
	0x79, 0x12, 0x49, 0xd7, 0xb4, 0xa3, 0xf8, 0x79, 0x26, 0xac, 0xab, 0x3b, 0x57, 0x8b, 0x64, 0xe1,
	0x35, 0xfa, 0x7c, 0xa2, 0x98, 0xe2, 0xb4, 0x4b, 0xca, 0x7d, 0xee, 0xb3, 0xee, 0xf8, 0x90, 0x89,
	0x97, 0xbd, 0x5e, 0xc8, 0xa5, 0x3c, 0x0a, 0xa4, 0xaa, 0x6e, 0xd5, 0xa7, 0x1a, 0xa5, 0xfd, 0x27,
	0xcd, 0x8c, 0x29, 0x34, 0x8f, 0x52, 0x45, 0xad, 0xe9, 0x8b, 0x3f, 0xdb, 0x85, 0xf6, 0x44, 0x32,
	0xfa, 0x8c, 0x54, 0xd2, 0xf8, 0x81, 0x88, 0x86, 0xaa, 0xea, 0xd5, 0x8b, 0x8d, 0xe9, 0xf6, 0xe4,
	0x87, 0xf4, 0x2b, 0x59, 0x33, 0xf3, 0x38, 0x36, 0xe3, 0x80, 0xce, 0x1e, 0x42, 0x67, 0x8d, 0xcc,
	0xce, 0x4e, 0x6e, 0xd7, 0x98, 0xc6, 0x26, 0x51, 0xd1, 0x7d, 0x52, 0x4e, 0xc1, 0xd8, 0xd6, 0x26,
	0xb4, 0x35, 0xf1, 0x19, 0xfd, 0x46, 0x2a, 0x1d, 0x26, 0x79, 0xdb, 0x8d, 0xe0, 0x1d, 0x1f, 0x43,
	0x5f, 0x35, 0xe8, 0x6b, 0x37, 0xb3, 0xaf, 0x56, 0xba, 0xca, 0x74, 0x36, 0x99, 0x8e, 0xbe, 0x21,
	0x25, 0x3d, 0xcc, 0x43, 0x26, 0x80, 0x7d, 0x03, 0xd8, 0xeb, 0x99, 0xec, 0x1f, 0x31, 0xd7, 0x70,
	0x26, 0x4b, 0xe9, 0x0b, 0x32, 0xa7, 0xbf, 0x2a, 0x40, 0xb3, 0x0a, 0x34, 0x5b, 0x99, 0x34, 0xa7,
	0x4c, 0x9e, 0x1b, 0x0e, 0x57, 0x44, 0x37, 0xc9, 0xbc, 0x3e, 0xa3, 0x37, 0x14, 0xbc, 0x89, 0x01,
	0xfa, 0x8a, 0x10, 0xfc, 0xd6, 0x81, 0xc0, 0x1a, 0x08, 0x6c, 0x67, 0xbb, 0x00, 0xa9, 0x46, 0x22,
	0x51, 0x48, 0xeb, 0xa4, 0x84, 0x11, 0xca, 0x94, 0x41, 0x26, 0x09, 0xd1, 0xe7, 0x64, 0x56, 0x31,
	0x1f, 0x54, 0x2a, 0xa0, 0xb2, 0x79, 0xcf, 0x35, 0x7c, 0x23, 0x61, 0x4b, 0x68, 0x4d, 0xbb, 0xe0,
	0x23, 0xf9, 0x03, 0x20, 0x77, 0xb1, 0xbe, 0x02, 0xee, 0x03, 0x20, 0x5f, 0xcf, 0xb9, 0xc2, 0x7b,
	0x48, 0xb5, 0x57, 0x88, 0x0b, 0xf5, 0x15, 0x30, 0x42, 0x95, 0x2a, 0x5e, 0x21, 0x01, 0xe9, 0xa1,
	0x9a, 0x65, 0x01, 0x4a, 0xcb, 0x39, 0x43, 0x6d, 0x63, 0xae, 0x1d, 0x6a, 0xa2, 0x94, 0xee, 0x90,
	0x05, 0x13, 0xa2, 0xd8, 0x0a, 0x88, 0xdd, 0xc2, 0xe8, 0x29, 0x59, 0x4e, 0xec, 0x20, 0x50, 0x5c,
	0x04, 0xc5, 0xc7, 0x99, 0x8a, 0xc7, 0x71, 0xbe, 0x51, 0x4d, 0x53, 0xd0, 0x5d, 0xb2, 0x92, 0x80,
	0x50, 0x7d, 0x09, 0xd4, 0xef, 0xe0, 0x7a, 0x64, 0x3d, 0xf3, 0x02, 0x97, 0x72, 0x46, 0x16, 0xbf,
	0xbc, 0xb6, 0x44, 0x8f, 0xac, 0xc7, 0x04, 0x2a, 0x2c, 0xe0, 0xc8, 0x6c, 0xac, 0x9d, 0x34, 0x1b,
	0x13, 0xd8, 0xe7, 0x73, 0x9c, 0x3c, 0xc0, 0x5c, 0xeb, 0x64, 0xa2, 0x54, 0x3b, 0x69, 0x42, 0x54,
	0x22, 0xe8, 0x64, 0x12, 0xa3, 0x2d, 0x32, 0x0f, 0x8b, 0x18, 0xb4, 0x66, 0x41, 0xcb, 0xcb, 0xd4,
	0x7a, 0xab, 0x33, 0x8d, 0x52, 0x5c, 0x46, 0x3d, 0x42, 0x20, 0x40, 0x95, 0x39, 0x50, 0x49, 0x20,
	0xf4, 0x03, 0x59, 0x8a, 0xf7, 0x3a, 0x08, 0xfd, 0x0f, 0x42, 0x8f, 0xee, 0x79, 0x3d, 0x6c, 0xba,
	0x51, 0x4b, 0x11, 0xd0, 0x06, 0x59, 0x8e, 0x11, 0xd4, 0x9d, 0x01, 0xdd, 0x34, 0xac, 0x77, 0x84,
	0x5e, 0x19, 0x20, 0x3b, 0x95, 0xb3, 0x23, 0xf4, 0xaa, 0xb1, 0x3b, 0xc2, 0x16, 0xe9, 0x1d, 0xa1,
	0xcf, 0x28, 0x32, 0x8d, 0x3b, 0xc2, 0x01, 0xda, 0x3f, 0xf8, 0x15, 0x02, 0xfe, 0x62, 0x8e, 0x7f,
	0x9f, 0x74, 0xa6, 0xf5, 0xcf, 0x95, 0x69, 0xff, 0x20, 0x40, 0x89, 0xff, 0xd0, 0xbf, 0x18, 0x69,
	0x1d, 0x5e, 0x5c, 0x7b, 0xc5, 0xcb, 0x6b, 0xaf, 0xf8, 0xf7, 0xda, 0x2b, 0xfe, 0xbe, 0xf1, 0x0a,
	0x97, 0x37, 0x5e, 0xe1, 0xea, 0xc6, 0x2b, 0x7c, 0xde, 0xf5, 0x03, 0x75, 0x16, 0x75, 0x9a, 0x5d,
	0x31, 0xd8, 0x73, 0x7f, 0x36, 0xcc, 0xe7, 0x2f, 0x77, 0x52, 0xe3, 0x11, 0x97, 0x9d, 0x19, 0xf8,
	0x9d, 0x7c, 0xfa, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xb1, 0xe7, 0xfe, 0x96, 0x08, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LegacyDaoAddressCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LegacyDaoAddressCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if len(m.LegacyDaoAddressList) > 0 {
		for iNdEx := len(m.LegacyDaoAddressList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LegacyDaoAddressList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
	}
	if m.StorageProviderCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.StorageProviderCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if len(m.StorageProviderList) > 0 {
		for iNdEx := len(m.StorageProviderList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StorageProviderList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.BaseRepositoryKeyList) > 0 {
		for iNdEx := len(m.BaseRepositoryKeyList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BaseRepositoryKeyList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.UserDaoList) > 0 {
		for iNdEx := len(m.UserDaoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserDaoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if m.MemberCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MemberCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.MemberList) > 0 {
		for iNdEx := len(m.MemberList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MemberList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if m.TagCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TagCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.TagList) > 0 {
		for iNdEx := len(m.TagList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TagList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.BranchCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BranchCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.BranchList) > 0 {
		for iNdEx := len(m.BranchList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BranchList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.TaskCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TaskCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.TaskList) > 0 {
		for iNdEx := len(m.TaskList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.ReleaseCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ReleaseCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.ReleaseList) > 0 {
		for iNdEx := len(m.ReleaseList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReleaseList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.PullRequestCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PullRequestCount))
		i--
		dAtA[i] = 0x70
	}
	if len(m.PullRequestList) > 0 {
		for iNdEx := len(m.PullRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PullRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.DaoCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DaoCount))
		i--
		dAtA[i] = 0x60
	}
	if len(m.DaoList) > 0 {
		for iNdEx := len(m.DaoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DaoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.CommentCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CommentCount))
		i--
		dAtA[i] = 0x50
	}
	if len(m.CommentList) > 0 {
		for iNdEx := len(m.CommentList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommentList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.IssueCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.IssueCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.IssueList) > 0 {
		for iNdEx := len(m.IssueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IssueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.RepositoryCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.RepositoryCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RepositoryList) > 0 {
		for iNdEx := len(m.RepositoryList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RepositoryList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.UserCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.UserCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UserList) > 0 {
		for iNdEx := len(m.UserList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.WhoisCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.WhoisCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WhoisList) > 0 {
		for iNdEx := len(m.WhoisList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WhoisList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WhoisList) > 0 {
		for _, e := range m.WhoisList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.WhoisCount != 0 {
		n += 1 + sovGenesis(uint64(m.WhoisCount))
	}
	if len(m.UserList) > 0 {
		for _, e := range m.UserList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.UserCount != 0 {
		n += 1 + sovGenesis(uint64(m.UserCount))
	}
	if len(m.RepositoryList) > 0 {
		for _, e := range m.RepositoryList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.RepositoryCount != 0 {
		n += 1 + sovGenesis(uint64(m.RepositoryCount))
	}
	if len(m.IssueList) > 0 {
		for _, e := range m.IssueList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.IssueCount != 0 {
		n += 1 + sovGenesis(uint64(m.IssueCount))
	}
	if len(m.CommentList) > 0 {
		for _, e := range m.CommentList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.CommentCount != 0 {
		n += 1 + sovGenesis(uint64(m.CommentCount))
	}
	if len(m.DaoList) > 0 {
		for _, e := range m.DaoList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.DaoCount != 0 {
		n += 1 + sovGenesis(uint64(m.DaoCount))
	}
	if len(m.PullRequestList) > 0 {
		for _, e := range m.PullRequestList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.PullRequestCount != 0 {
		n += 1 + sovGenesis(uint64(m.PullRequestCount))
	}
	if len(m.ReleaseList) > 0 {
		for _, e := range m.ReleaseList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.ReleaseCount != 0 {
		n += 2 + sovGenesis(uint64(m.ReleaseCount))
	}
	if len(m.TaskList) > 0 {
		for _, e := range m.TaskList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.TaskCount != 0 {
		n += 2 + sovGenesis(uint64(m.TaskCount))
	}
	if len(m.BranchList) > 0 {
		for _, e := range m.BranchList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.BranchCount != 0 {
		n += 2 + sovGenesis(uint64(m.BranchCount))
	}
	if len(m.TagList) > 0 {
		for _, e := range m.TagList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.TagCount != 0 {
		n += 2 + sovGenesis(uint64(m.TagCount))
	}
	if len(m.MemberList) > 0 {
		for _, e := range m.MemberList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.MemberCount != 0 {
		n += 2 + sovGenesis(uint64(m.MemberCount))
	}
	if len(m.UserDaoList) > 0 {
		for _, e := range m.UserDaoList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BaseRepositoryKeyList) > 0 {
		for _, e := range m.BaseRepositoryKeyList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.StorageProviderList) > 0 {
		for _, e := range m.StorageProviderList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.StorageProviderCount != 0 {
		n += 2 + sovGenesis(uint64(m.StorageProviderCount))
	}
	if len(m.LegacyDaoAddressList) > 0 {
		for _, e := range m.LegacyDaoAddressList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.LegacyDaoAddressCount != 0 {
		n += 2 + sovGenesis(uint64(m.LegacyDaoAddressCount))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhoisList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhoisList = append(m.WhoisList, Whois{})
			if err := m.WhoisList[len(m.WhoisList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhoisCount", wireType)
			}
			m.WhoisCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WhoisCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserList = append(m.UserList, User{})
			if err := m.UserList[len(m.UserList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCount", wireType)
			}
			m.UserCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepositoryList = append(m.RepositoryList, Repository{})
			if err := m.RepositoryList[len(m.RepositoryList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryCount", wireType)
			}
			m.RepositoryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueList = append(m.IssueList, Issue{})
			if err := m.IssueList[len(m.IssueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueCount", wireType)
			}
			m.IssueCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssueCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentList = append(m.CommentList, Comment{})
			if err := m.CommentList[len(m.CommentList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaoList = append(m.DaoList, Dao{})
			if err := m.DaoList[len(m.DaoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoCount", wireType)
			}
			m.DaoCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DaoCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PullRequestList = append(m.PullRequestList, PullRequest{})
			if err := m.PullRequestList[len(m.PullRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullRequestCount", wireType)
			}
			m.PullRequestCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PullRequestCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleaseList = append(m.ReleaseList, Release{})
			if err := m.ReleaseList[len(m.ReleaseList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseCount", wireType)
			}
			m.ReleaseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleaseCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskList = append(m.TaskList, Task{})
			if err := m.TaskList[len(m.TaskList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskCount", wireType)
			}
			m.TaskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchList = append(m.BranchList, Branch{})
			if err := m.BranchList[len(m.BranchList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchCount", wireType)
			}
			m.BranchCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BranchCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagList = append(m.TagList, Tag{})
			if err := m.TagList[len(m.TagList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagCount", wireType)
			}
			m.TagCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberList = append(m.MemberList, Member{})
			if err := m.MemberList[len(m.MemberList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberCount", wireType)
			}
			m.MemberCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDaoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserDaoList = append(m.UserDaoList, UserDao{})
			if err := m.UserDaoList[len(m.UserDaoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRepositoryKeyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseRepositoryKeyList = append(m.BaseRepositoryKeyList, BaseRepositoryKey{})
			if err := m.BaseRepositoryKeyList[len(m.BaseRepositoryKeyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageProviderList = append(m.StorageProviderList, StorageProvider{})
			if err := m.StorageProviderList[len(m.StorageProviderList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderCount", wireType)
			}
			m.StorageProviderCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageProviderCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyDaoAddressList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegacyDaoAddressList = append(m.LegacyDaoAddressList, LegacyDaoAddress{})
			if err := m.LegacyDaoAddressList[len(m.LegacyDaoAddressList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyDaoAddressCount", wireType)
			}
			m.LegacyDaoAddressCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LegacyDaoAddressCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
