// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/issue.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Issue struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id           uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Iid          string `protobuf:"bytes,3,opt,name=iid,proto3" json:"iid,omitempty"`
	Title        string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	State        string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Description  string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	AuthorId     string `protobuf:"bytes,7,opt,name=authorId,proto3" json:"authorId,omitempty"`
	Comments     string `protobuf:"bytes,8,opt,name=comments,proto3" json:"comments,omitempty"`
	PullRequests string `protobuf:"bytes,9,opt,name=pullRequests,proto3" json:"pullRequests,omitempty"`
	RepositoryId string `protobuf:"bytes,10,opt,name=repositoryId,proto3" json:"repositoryId,omitempty"`
	Labels       string `protobuf:"bytes,11,opt,name=labels,proto3" json:"labels,omitempty"`
	Weight       string `protobuf:"bytes,12,opt,name=weight,proto3" json:"weight,omitempty"`
	AssigneesId  string `protobuf:"bytes,13,opt,name=assigneesId,proto3" json:"assigneesId,omitempty"`
	CreatedAt    string `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	ClosedAt     string `protobuf:"bytes,16,opt,name=closedAt,proto3" json:"closedAt,omitempty"`
	ClosedBy     string `protobuf:"bytes,17,opt,name=closedBy,proto3" json:"closedBy,omitempty"`
	Extensions   string `protobuf:"bytes,18,opt,name=extensions,proto3" json:"extensions,omitempty"`
}

func (m *Issue) Reset()         { *m = Issue{} }
func (m *Issue) String() string { return proto.CompactTextString(m) }
func (*Issue) ProtoMessage()    {}
func (*Issue) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cf64e56e9098bda, []int{0}
}
func (m *Issue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Issue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Issue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Issue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue.Merge(m, src)
}
func (m *Issue) XXX_Size() int {
	return m.Size()
}
func (m *Issue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue proto.InternalMessageInfo

func (m *Issue) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Issue) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Issue) GetIid() string {
	if m != nil {
		return m.Iid
	}
	return ""
}

func (m *Issue) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Issue) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Issue) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Issue) GetAuthorId() string {
	if m != nil {
		return m.AuthorId
	}
	return ""
}

func (m *Issue) GetComments() string {
	if m != nil {
		return m.Comments
	}
	return ""
}

func (m *Issue) GetPullRequests() string {
	if m != nil {
		return m.PullRequests
	}
	return ""
}

func (m *Issue) GetRepositoryId() string {
	if m != nil {
		return m.RepositoryId
	}
	return ""
}

func (m *Issue) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *Issue) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func (m *Issue) GetAssigneesId() string {
	if m != nil {
		return m.AssigneesId
	}
	return ""
}

func (m *Issue) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Issue) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Issue) GetClosedAt() string {
	if m != nil {
		return m.ClosedAt
	}
	return ""
}

func (m *Issue) GetClosedBy() string {
	if m != nil {
		return m.ClosedBy
	}
	return ""
}

func (m *Issue) GetExtensions() string {
	if m != nil {
		return m.Extensions
	}
	return ""
}

func init() {
	proto.RegisterType((*Issue)(nil), "gitopia.gitopia.gitopia.Issue")
}

func init() { proto.RegisterFile("gitopia/issue.proto", fileDescriptor_4cf64e56e9098bda) }

var fileDescriptor_4cf64e56e9098bda = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xb1, 0x8e, 0xda, 0x40,
	0x10, 0x86, 0x31, 0x1c, 0xdc, 0xb1, 0x77, 0x21, 0x64, 0x83, 0x92, 0x11, 0x8a, 0x2c, 0x44, 0x85,
	0x52, 0x40, 0x91, 0x27, 0x08, 0x4a, 0xe3, 0x96, 0x32, 0x9d, 0xf1, 0x8e, 0xcc, 0x4a, 0xc6, 0xeb,
	0x78, 0xc6, 0x0a, 0x7e, 0x8b, 0x3c, 0x56, 0x4a, 0xca, 0x94, 0x11, 0x3c, 0x44, 0xda, 0x68, 0x77,
	0x6d, 0x70, 0x52, 0xed, 0xfc, 0xdf, 0xf7, 0xbb, 0x18, 0x6b, 0xc4, 0xdb, 0x54, 0xb3, 0x29, 0x74,
	0xbc, 0xd1, 0x44, 0x15, 0xae, 0x8b, 0xd2, 0xb0, 0x91, 0xef, 0x1b, 0xb8, 0xfe, 0xef, 0x9d, 0xcf,
	0x52, 0x93, 0x1a, 0xd7, 0xd9, 0xd8, 0xc9, 0xd7, 0x97, 0x7f, 0x06, 0x62, 0x18, 0xd9, 0xcf, 0x25,
	0x88, 0xc7, 0xa4, 0xc4, 0x98, 0x4d, 0x09, 0xc1, 0x22, 0x58, 0x8d, 0x77, 0x6d, 0x94, 0x13, 0xd1,
	0xd7, 0x0a, 0xfa, 0x8b, 0x60, 0xf5, 0xb0, 0xeb, 0x6b, 0x25, 0xa7, 0x62, 0xa0, 0xb5, 0x82, 0x81,
	0x6b, 0xd9, 0x51, 0xce, 0xc4, 0x90, 0x35, 0x67, 0x08, 0x0f, 0x8e, 0xf9, 0x60, 0x29, 0x71, 0xcc,
	0x08, 0x43, 0x4f, 0x5d, 0x90, 0x0b, 0xf1, 0xac, 0x90, 0x92, 0x52, 0x17, 0xac, 0x4d, 0x0e, 0x23,
	0xe7, 0xba, 0x48, 0xce, 0xc5, 0x53, 0x5c, 0xf1, 0xc1, 0x94, 0x91, 0x82, 0x47, 0xa7, 0x6f, 0xd9,
	0xba, 0xc4, 0x1c, 0x8f, 0x98, 0x33, 0xc1, 0x93, 0x77, 0x6d, 0x96, 0x4b, 0xf1, 0x52, 0x54, 0x59,
	0xb6, 0xc3, 0x6f, 0x15, 0x12, 0x13, 0x8c, 0x9d, 0xff, 0x87, 0xd9, 0x4e, 0x89, 0x85, 0x21, 0xcd,
	0xa6, 0xac, 0x23, 0x05, 0xc2, 0x77, 0xba, 0x4c, 0xbe, 0x13, 0xa3, 0x2c, 0xde, 0x63, 0x46, 0xf0,
	0xec, 0x6c, 0x93, 0x2c, 0xff, 0x8e, 0x3a, 0x3d, 0x30, 0xbc, 0x78, 0xee, 0x93, 0xdd, 0x28, 0x26,
	0xd2, 0x69, 0x8e, 0x48, 0x91, 0x82, 0x57, 0x7e, 0xa3, 0x0e, 0x92, 0x1f, 0xc4, 0xd8, 0xfd, 0x4c,
	0x54, 0x9f, 0x19, 0x26, 0xce, 0xdf, 0x81, 0xb5, 0x55, 0xa1, 0x1a, 0xfb, 0xda, 0xdb, 0x1b, 0x70,
	0x1b, 0x67, 0x86, 0x9c, 0x9c, 0x36, 0x1b, 0x37, 0xf9, 0xee, 0xb6, 0x35, 0xbc, 0xe9, 0xba, 0x6d,
	0x2d, 0x43, 0x21, 0xf0, 0xc4, 0x98, 0x93, 0x36, 0x39, 0x81, 0x74, 0xb6, 0x43, 0xb6, 0x5f, 0x7e,
	0x5e, 0xc2, 0xe0, 0x7c, 0x09, 0x83, 0xdf, 0x97, 0x30, 0xf8, 0x71, 0x0d, 0x7b, 0xe7, 0x6b, 0xd8,
	0xfb, 0x75, 0x0d, 0x7b, 0x5f, 0x3f, 0xa6, 0x9a, 0x0f, 0xd5, 0x7e, 0x9d, 0x98, 0xe3, 0xa6, 0x3d,
	0xb1, 0xf6, 0x3d, 0xdd, 0x26, 0xae, 0x0b, 0xa4, 0xfd, 0xc8, 0x9d, 0xd1, 0xa7, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x04, 0x28, 0x44, 0x1b, 0x8c, 0x02, 0x00, 0x00,
}

func (m *Issue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Issue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Issue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extensions) > 0 {
		i -= len(m.Extensions)
		copy(dAtA[i:], m.Extensions)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Extensions)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ClosedBy) > 0 {
		i -= len(m.ClosedBy)
		copy(dAtA[i:], m.ClosedBy)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.ClosedBy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ClosedAt) > 0 {
		i -= len(m.ClosedAt)
		copy(dAtA[i:], m.ClosedAt)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.ClosedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.AssigneesId) > 0 {
		i -= len(m.AssigneesId)
		copy(dAtA[i:], m.AssigneesId)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.AssigneesId)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Weight) > 0 {
		i -= len(m.Weight)
		copy(dAtA[i:], m.Weight)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Weight)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Labels) > 0 {
		i -= len(m.Labels)
		copy(dAtA[i:], m.Labels)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Labels)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.RepositoryId) > 0 {
		i -= len(m.RepositoryId)
		copy(dAtA[i:], m.RepositoryId)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.RepositoryId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PullRequests) > 0 {
		i -= len(m.PullRequests)
		copy(dAtA[i:], m.PullRequests)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.PullRequests)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Comments) > 0 {
		i -= len(m.Comments)
		copy(dAtA[i:], m.Comments)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Comments)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AuthorId) > 0 {
		i -= len(m.AuthorId)
		copy(dAtA[i:], m.AuthorId)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.AuthorId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Iid) > 0 {
		i -= len(m.Iid)
		copy(dAtA[i:], m.Iid)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Iid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintIssue(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIssue(dAtA []byte, offset int, v uint64) int {
	offset -= sovIssue(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Issue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovIssue(uint64(m.Id))
	}
	l = len(m.Iid)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.AuthorId)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.Comments)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.PullRequests)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.RepositoryId)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.Labels)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.Weight)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.AssigneesId)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.ClosedAt)
	if l > 0 {
		n += 2 + l + sovIssue(uint64(l))
	}
	l = len(m.ClosedBy)
	if l > 0 {
		n += 2 + l + sovIssue(uint64(l))
	}
	l = len(m.Extensions)
	if l > 0 {
		n += 2 + l + sovIssue(uint64(l))
	}
	return n
}

func sovIssue(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIssue(x uint64) (n int) {
	return sovIssue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Issue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Issue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Issue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullRequests", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PullRequests = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepositoryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssigneesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssigneesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClosedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClosedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIssue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIssue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIssue
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIssue
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIssue
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIssue        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIssue          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIssue = fmt.Errorf("proto: unexpected end of group")
)
